{"meta":{"title":"Guangnan's Notes","subtitle":"I rest, I rust","description":"Guangnan","author":"ygnmax","url":"http://yoursite.com","root":"/"},"pages":[{"title":"About Me","date":"2019-01-16T09:37:17.000Z","updated":"2019-02-15T13:29:38.089Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"Hi! My name is Guangnan Yang, but you will mostly meet me as ygnmax on the internet. “Max“ is my English name which is given by my first English teacher. Therefore, you can also call me Max Yang. Now, I have received an offer of Master of Science in Financial Engineering from NYU Tandon School and been preparing for my oversea education. Before that, I was major in Finance with a Bachelor of Economics degree and minor in Jurisprudence with a Bachelor of Laws degree in Xiamen University. Please check my Linkedin to get more information about my profession and Curriculum Vitae. This blog is aimed at honing my skills in Financial Engineering fields and recording my academic notes. Please check “Hello World“ to know the origin of “Guangnan’s Notes”. Feel free to contact me via ygnmax@gmail.com. Alternatively you can find me from the social media listed on catalog."}],"posts":[{"title":"Python NumPy Basics","slug":"Python NumPy Basics","date":"2019-08-05T04:00:00.000Z","updated":"2019-08-07T16:56:27.214Z","comments":true,"path":"2019/08/05/Python NumPy Basics/","link":"","permalink":"http://yoursite.com/2019/08/05/Python NumPy Basics/","excerpt":"","text":"This is a class note of NYU MFE Bootcamp, including contains basic knowledge of Python NumPy syntax and techniques. Understanding Data Types in Python to part of Operations of NumPy arrays was on Aug 5th; The rest was on Aug 6th. Understanding Data Types in PythonStatically-typing &amp; Dynamic typingA statically-typed language like C or Java requires each variable to be explicitly declared, while Python skips this specification. 1234result = 0for i in range(100): result += iprint(result) This means we can assign any kind of data to any variable. Behind the python: flexibilityThe standard Python implementation is written in C, which means every Python object is simply a cleverly-disguised C structure, not only its value, but other information as well. IntegerA single integer in Python 3.4 contains four pieces. ob_refcnt ob_type ob_size ob_digit A python integer is a pointer to a position in memory containing all the Python object information, including the bytes that contain the integer value. ListList is almost the most flexibility type in Python. 123L = list(range(10))Ltype(L[0]) output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] int Change it to a list of strings: 123L2 = [str(c) for c in L]L2type(L2[0]) output: [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;] str Or we can create heterogeneous lists: 12L3 = [True, \"2\", 3.0, 4][type(item) for item in L3] output: [bool, str, float, int] Flexibility comes with a cost (loss of storage and efficiency). In the special case that all variables are of the same type, much of this flexibility is redundant. Then comes with fixed-type NumPy-style array. ArrayThe built in array module can be used to create dense arrays of a uniform type: 1234import arrayL = list(range(10))A = array.array('i', L)A output: array(&#39;i&#39;, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) However, the NumPy Array is more efficient than array because of the operations on data. Overlook of NumPy arraysBasic NumPy array syntax:basic syntax: 12import numpy as npnp.array([1,4,2,5,3]) output: array([1, 4, 2, 5, 3]) The type of elements in array should, but does not have to, be the same. If the types do not match, Numpy will upcast if possible. 1np.array([3.14, 4, 2, 3]) output: array([3.14, 4. , 2. , 3. ]) Here, integers are up-cast to floating point. And we can use dtype keyword to set the data type: 1np.array([1, 2, 3, 4], dtype='float32') output: array([1., 2., 3., 4.], dtype=float32) NumPy array as matrixNumpy arrays can explicity be muti-dimensional, using a list of lists: 12# nested lists result in multi-dimensional arraysnp.array([range(i, i+3) for i in [2, 4, 6]]) output: array([[2, 3, 4], [4, 5, 6], [6, 7, 8]]) for better understanding, we can run a 2*2 array: 1np.array([range(i, i+2) for i in [2, 4]]) output array([[2, 3], [4, 5]]) or a 3*10 array: 1np.array([range(i, i+10) for i in [2, 4, 6]]) output: array([[ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]]) It is more efficient to create arrays from scratch using routines built into Numpy: zero array with 10 integer: 1np.zeros(10, dtype=int) output: array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) one array: 1np.ones((3,5), dtype=float) output: array([[1., 1., 1., 1., 1.], [1., 1., 1., 1., 1.], [1., 1., 1., 1., 1.]]) An array with some identical elements: 1np.full((3, 5), 3.14) output: array([[3.14, 3.14, 3.14, 3.14, 3.14], [3.14, 3.14, 3.14, 3.14, 3.14], [3.14, 3.14, 3.14, 3.14, 3.14]]) A linear sequence 123# create an array filled with a linear sequence# starting at 0, this is similar to the built-in range() functionnp.arange(0, 20, 2) output: array([ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18]) linspace 123# create an array of five values evenly spaced# between 0 and 1np.linspace(0, 1, 5) output: array([0. , 0.25, 0.5 , 0.75, 1. ]) uniformly distributed random value 12# create a 3*e arrayof uniformly distributed random values between 0 and 1np.random.random((3, 3)) output: array([[0.57226098, 0.56849713, 0.63410602], [0.88335333, 0.46056684, 0.95494879], [0.22305721, 0.18478839, 0.78352821]]) normal distributed random value 1np.random.normal(0, 1, (3, 3)) output: array([[ 1.05100904, 1.71407429, 0.75356105], [-0.61885082, 0.43198626, 0.63819954], [-0.53911965, 1.07533192, -0.27227068]]) random value 12# create a 3*3 array of random integers in the interval [0, 10]np.random.randint(0, 10, (3, 3)) output: array([[0, 7, 1], [2, 7, 6], [7, 8, 5]]) create identity matrix 12# create a 3*3 identity matrixnp.eye(3) output: array([[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]]) uninitialized array 1234# create an uninitialized array of three integers# the values will be whatever happens to # already exist at that memory locationnp.empty(3) output: array([1., 1., 1.]) Standard Data Types numpy is also built in C, the data type can be specified using a string: 12np.zeros(10, dtype = 'int16')np.zeros(10, dtype = np.int16) #same output array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int16) Operations of NumPy arrays attributes of arrays indexing of arrays slicing of arrays reshaping of arrays joining and splitting of arrays Attributes of arraysdetermining the size, shape, memory consumption, and data types of arrays We can use random number generator, which we will seed with a set value in order to ensure that the same random arrays are generated each time this code is run: 1234567np.random.seed(0)# seed for reproducibilityx1 = np.random.randint(10, size=6)x2 = np.random.randint(10, size=(3, 4))x3 = np.random.randint(10, size=(3, 4, 5))print(x1)print(x2)print(x3) output: [5 0 3 3 7 9] [[3 5 2 4] [7 6 8 8] [1 6 7 7]] ([[[8, 1, 5, 9, 8], [9, 4, 3, 0, 3], [5, 0, 2, 3, 8], [1, 3, 3, 3, 7]], [[0, 1, 9, 9, 0], [4, 7, 3, 2, 7], [2, 0, 0, 4, 5], [5, 6, 8, 4, 1]], [[4, 9, 8, 1, 1], [7, 9, 9, 3, 6], [7, 2, 0, 3, 5], [9, 4, 4, 6, 4]]]) each array has attributes ndim, shape and size: 123print(\"x3 ndim: \", x3.ndim)print(\"x3 shape: \", x3.shape)print(\"x3 size: \", x3.size) output: x3 ndim: 3 x3 shape: (3, 4, 5) x3 size: 60 we can check the type of x3 1print(\"dtype:\", x3.dtype) dtype: int32 itemsize is another attribute, which list the size in bytes of each array element, and nbytes list the total size of the array: 1print(\"itemsize: \", x3.itemsize, \"bytes\") itemsize: 4 In general, we expect that nbytes is equal to itemsize times size. Array IndexingGetting and setting the value of individual array elements 12print(x1[0])print(x1[4]) output: 5 7 use negative indices: 12print(x1[-1])print(x1[-2]) ouptut: 9 7 items can be accessed using a comma-separated tuple of indices: 123print(x2)print(x2[2, 0])print(x2[2, -1]) output: [[3 5 2 4] [7 6 8 8] [1 6 7 7]] 1 7 Values can be modified using any of the above index notation: 123print(x2)x2[0, 0] = 12print(x2) output: [[3 5 2 4] [7 6 8 8] [1 6 7 7]] [[12 5 2 4] [ 7 6 8 8] [ 1 6 7 7]] Numpy arrays have a fixed type. The different type will be silently truncated automatically 12x1[0] = 3.14159 # this will be truncated!x1 output: array([3, 0, 3, 3, 7, 9]) Array SlicingGetting and setting smaller subarrays within a larger array The standard Python list slicing is: ​ x[start:stop:step] The default to the values start = 0, stop = size of dimension, step = 1 12x = np.arange(10)x output: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) One-dimensionThis is operation of one-dimensional subarrays 1234567x[:5] # first five elementsx[5:]x[4:7] # middle sub-arrayx[::2] # every other elementx[1::2] # every other element, starting at index1x[::-1] # reversedx[5::-2] # reversed every other from index 5 output: array([0, 1, 2, 3, 4]) array([5, 6, 7, 8, 9]) array([4, 5, 6]) array([0, 2, 4, 6, 8]) array([1, 3, 5, 7, 9]) array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) array([5, 3, 1]) Multi-dimension1x2 output: array([[12, 5, 2, 4], [ 7, 6, 8, 8], [ 1, 6, 7, 7]]) Some operations of multi-dimensional subarrays 123x2[:2, :3] # first two rows, three columnsx2[:3, ::2] #all rows, every other columnx2[::-1, ::-1] # subarray dimensions can even be reversed together output: array([[12, 5, 2], [ 7, 6, 8]]) array([[12, 2], [ 7, 8], [ 1, 7]]) array([[ 7, 7, 6, 1], [ 8, 8, 6, 7], [ 4, 2, 5, 12]]) Accessing of single rows or columns of an array can be done by combining indexing and slicing, using an empty slice marked by a single colon (:): 123456print(x2[:,0]) #first column of x2print(x2[0,:]) #first row of x2# In the case of row access, the empty slice can be omitted for a more compact syntaxprint(x2[0]) #equivalent output: [12 7 1] [12 5 2 4] [12 5 2 4] Copy &amp; No-Copy SubarraysNumPy array slice return views rather than copies of the array data. However, Python list slicing will be copies. Changed Example Extract a 2*2 subarray from this: 12x2_sub = x2[:2, :2]print(x2_sub) [[12 5] [ 7 6]] The original array is changed: 123x2_sub[0, 0] = 99print(x2_sub)print(x2) output: [[99 5] [ 7 6]] [[99 5 2 4] [ 7 6 8 8] [ 1 6 7 7]] it is a useful property, we can access and process pieces of these datasets without the need to copy the underlying data buffer. Unchanged Example we can also create a explicitly copy the data within an array or a subarray. 123x2_sub_copy = x2[:2,:2].copy()print(x2_sub_copy)print(x2) output: [[99 5] [ 7 6]] [[99 5 2 4] [ 7 6 8 8] [ 1 6 7 7]] If we modify this subarray, the original array is not touched: 123x2_sub_copy[0,0] = 42print(x2_sub_copy)print(x2) output: [[42 5] [ 7 6]] [[99 5 2 4] [ 7 6 8 8] [ 1 6 7 7]] Array ReshapingChanging the shape of a given array 123# put number 1-9 in a 3*3 grid:grid = np.arange(1,10).reshape((3,3))print(grid) output: [[1 2 3] [4 5 6] [7 8 9]] The size of the initial array must match the size of the reshaped array. The reshape method will use a no-copy view of the initial array. We can use newaxis method to realize the reshape effect. 1234567x = np.array([1,2,3])x.reshape((1,3))x[np.newaxis, :]x.reshape((3,1))x[:, np.newaxis] output: array([[1, 2, 3]]) array([[1, 2, 3]]) array([[1], [2], [3]]) array([[1], [2], [3]]) Array concatenation and splittingCombining multiple arrays into one, and splitting one array into many Concatenationconcatenation: combine multiple arrays into one 123x = np.array([1, 2, 3])y = np.array([3, 2, 1])np.concatenate([x, y]) output: array([1, 2, 3, 3, 2, 1]) In two-dimensional situation, default is zero-indexed. 1234grid = np.array([[1, 2, 3], [4, 5, 6]])# concatenate along the first axisnp.concatenate([grid, grid]) output: array([[1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6]]) We can concatenate along the second axis (zero-indexed). 12# zero-indexednp.concatenate([grid, grid], axis=1) output: array([[1, 2, 3, 1, 2, 3], [4, 5, 6, 4, 5, 6]]) vstack: vertically stack the arrays 1234x = np.array([1,2,3])grid = np.array([[9, 8, 7], [6, 5, 4]])np.vstack([x, grid]) output: array([[1, 2, 3], [9, 8, 7], [6, 5, 4]]) hstack: horizontally stack the arrays 1234# horizontaly = np.array([[99], [99]])np.hstack([grid, y]) output: array([[ 9, 8, 7, 99], [ 6, 5, 4, 99]]) Splitingsplit: opposite of concatenation. 123x = [1, 2, 3, 99, 99, 3, 2, 1]x1, x2, x3 = np.split(x, [3, 5])print(x1, x2, x3) output: [1 2 3] [99 99] [3 2 1] Notice that N split-points, leads to N+1 subarrays. np.hsplit and np.vsplit are similar. In multi-dimensional situation: 12grid = np.arange(16).reshape((4, 4))grid output: array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11], [12, 13, 14, 15]]) np.vsplit and np.hsplit 1234567upper, lower = np.vsplit(grid, [2])print(upper)print(lower)left, right = np.hsplit(grid, [2])print(left)print(right) output: [[0 1 2 3] [4 5 6 7]] [[ 8 9 10 11] [12 13 14 15]] [[ 0 1] [ 4 5] [ 8 9] [12 13]] [[ 2 3] [ 6 7] [10 11] [14 15]] Computation and Functions in NumPyThe speed of computation on NumpyComputation can be very fast or very slow. The key to making it fast is to use vectorized operations, generally implemented through universal functions(ufuncs). The Slowness of Loops123456789101112# slowness of loopsimport numpy as npnp.random.seed(0)def compute_reciprocals(values): output = np.empty(len(values)) for i in range(len(values)): output[i] = 1.0 / values[i] return outputvalues = np.random.randint(1, 10, size = 5)compute_reciprocals(values) output: array([0.16666667, 1. , 0.25 , 0.25 , 0.125 ]) If we use this code for a large input, the operation is very slow. 123# IPython's %timeitbig_array = np.random.randint(1, 100. size=1000000)%timeit compute_reciprocals(big_array) It turns out that the bottleneck here is not the operations themselves, but the type-checking and function dispatches that CPython must do at each cycle of the loop. Vectorized OperationHowever, Numpy provides a convenient interface to compile routine, which is named as a vectorized operation. 123print(compute_reciprocals(values))print(1.0 / values)%timeit (1.0 / big_array) Vectorized operations in Numpy are implemented via ufuncs, whose main purpose is to quickly execute repeated operations or values in Numpy arrays. 1np.arange(5) / np.arange(1,6) output: array([0. , 0.5 , 0.66666667, 0.75 , 0.8 ]) Here is the multi-dimensional situation: 12x = np.arange(9).reshape((3,3))2 ** x output: array([[ 1, 2, 4], [ 8, 16, 32], [ 64, 128, 256]], dtype=int32) We can use these ufuncs to realize various purpose. Computation via NumPy UFuncsUfuncs exist in two flavors: unary ufuncs, which operate on a single input binary ufuncs, which operate on two inputs We can use uFuncs to achieve arithmetic purpose. Array arithmeticThe basic arithmetic operations 1234567891011import numpy as npx=np.arange(4)print(\"x =\", x)print(\"x + 5 =\", x + 5)print(\"x - 5 =\", x - 5)print(\"x + 5 =\", x + 5)print(\"x + 5 =\", x + 5)print(\"x + 5 =\", x + 5)print(\"-x =\", -x) # negationprint(\"x ** 2 =\", x ** 2) # exponentiationprint(\"x % 2 =\", x &amp; 2) # modulus output: 123456789x = [0 1 2 3]x + 5 = [5 6 7 8]x - 5 = [-5 -4 -3 -2]x + 5 = [5 6 7 8]x + 5 = [5 6 7 8]x + 5 = [5 6 7 8]-x = [ 0 -1 -2 -3]x ** 2 = [0 1 4 9]x % 2 = [0 0 2 2] We can also combine them together. these arithmetic are simply wrappers specific functions built into NumPy. 12print(-(0.5* + 1)**2)print(np.add(x, 2)) output: 12-0.25[2 3 4 5] Other arithmetic operators and functions include: 1234abx(x)np.exp(x)np.log(x)np.sin(x) Specialized functions used in statistics exist in scipy 12345from scipy import specialx = [1, 5, 10]print(\"gamma(x) =\", special.gamma(x))print(\"ln|gamma(x)| =\", special.gammaln(x))print(\"beta(x, 2) =\", special.beta(x, 2)) output: 123gamma(x) = [1.0000e+00 2.4000e+01 3.6288e+05]ln|gamma(x)| = [ 0. 3.17805383 12.80182748]beta(x, 2) = [0.5 0.03333333 0.00909091] To summarize the typical values in a dataset, we can use aggregates function. NumPy’s aggregate function version is computed much more quickly. 123L = np.random.random(100)print(sum(L))print(np.sum(L)) 1247.62021077872389447.620210778723894 Timing the different functions: 123big_array = np.random.rand(1000000)%timeit sum(big_array)%timeit np.sum(big_array) ouptut: 12113 ms ± 7.37 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)1.28 ms ± 69.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) For min, max, sum, and several other NumPy aggregates, a shorter syntax is to use methods of the array object itself: 123min(big_array), max(big_array)np.min(big_array), np.max(big_array)print(big_array.min(), big_array.max(), big_array.sum()) output: 123(7.476608001599772e-07, 0.9999999017465359)(7.476608001599772e-07, 0.9999999017465359)7.476608001599772e-07 0.9999999017465359 499703.64780246833 For multi-dimensional aggregates, there are three situation: the entire array, the row and the column. 123M = np.random.random((3, 4))print(M)print(M.sum()) output: 1234[[0.31678953 0.12015542 0.47115746 0.91046151] [0.66547603 0.36825635 0.79325825 0.2072341 ] [0.73285524 0.39698562 0.5593977 0.514694 ]]6.0567212054611375 To calculate aggregate from an axis. 12print(M.min(axis=0))print(M.max(axis=1)) output: 12[0.31678953 0.12015542 0.47115746 0.2072341 ][0.91046151 0.79325825 0.73285524] The axis keyword specifies the dimension of the array will be collapsed, rather than the dimension that will be returned. additionally, most aggregates have a NaN-safe counterpart that computes the result while ignoring values, for example, np.sum and np.nansum. Example: What is Average Height of US Presidents?12345678910111213import numpy as npimport pandas as pddata = pd.read_csv('E:/NYU/BootCamp/Bootcamp Onsite/Afternoon/python/president_heights.csv')# data.head()heights = np.array(data['height(cm)'])print(heights)print(\"Mean height: \", heights.mean())print(\"Standard deviation:\", heights.std())print(\"Minimum height: \", heights.min())print(\"Maximum height: \", heights.max())print(\"25th percentile: \", np.percentile(heights, 25))print(\"Median: \", np.median(heights))print(\"75th percentile: \", np.percentile(heights, 75)) output: order name height(cm) 0 1 George Washington 189 1 2 John Adams 170 2 3 Thomas Jefferson 189 3 4 James Madison 163 4 5 James Monroe 183 123[189 170 189 163 183 171 185 168 173 183 173 173 175 178 183 193 178 173 174 183 183 168 170 178 182 180 183 178 182 188 175 179 183 193 182 183 177 185 188 188 182 185] 12345678%matplotlib inlineimport matplotlib.pyplot as pltimport seaborn; seaborn.set() # set plot styleplt.hist(heights)plt.title('Height Distributtion of US Presidents')plt.xlabel('height (cm)')plt.ylabel('number') output: 1Text(0, 0.5, &apos;number&apos;)","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Programming","slug":"Computer-Science/Programming","permalink":"http://yoursite.com/categories/Computer-Science/Programming/"},{"name":"Python","slug":"Computer-Science/Programming/Python","permalink":"http://yoursite.com/categories/Computer-Science/Programming/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"NYU","slug":"NYU","permalink":"http://yoursite.com/tags/NYU/"},{"name":"Numpy","slug":"Numpy","permalink":"http://yoursite.com/tags/Numpy/"},{"name":"Bootcamp","slug":"Bootcamp","permalink":"http://yoursite.com/tags/Bootcamp/"}]},{"title":"The Unamiable but Worthwhile Age of 22","slug":"The Unamiable but Worthwhile Age of 22","date":"2019-03-28T16:00:00.000Z","updated":"2019-03-29T13:32:01.967Z","comments":true,"path":"2019/03/28/The Unamiable but Worthwhile Age of 22/","link":"","permalink":"http://yoursite.com/2019/03/28/The Unamiable but Worthwhile Age of 22/","excerpt":"","text":"It appears to me that, by flipping the screen at the tail of the age of 22, I only posted 10 moments on WeChat in the pasted year. Having no idea how I will estimate it after many years, I would like to write my frustration and growth, compared to the wonderful life created by the images on the social media, briefly but seriously. Around February last year, I had to experience a gap year without submitting the applications, for the simple reason that the English tests are unfavorable. Thus, the beginning of the age of 22 is a little disappointing for me. Going back to the campus in the last undergraduate semester drove me kind of nervous and embarrassed: after all, lack of offers from both postgraduate schools and employers, as well as consumption of parents’ money in the next few years, was not a honored situation to show. But I was released later because friendly classmates and considerate colleagues didn’t regard it as a big matter, which taught me that peer pressure which always appears in several steps in life is such a subtle mood that on the one hand it stems from personal initiative, but on the other hand, also more importantly, we had better not be coerced by it so as to live in an anxious but unconstructive situation. Now that having decided to apply in the next year, I just wanted to do an internship to accumulate more working experience, which is also the requirement for graduation. Fortunately, I got the opportunity, via Peng, to be a part time assistant in RB to assist Arielle, Peiyao, Jass, Jessie and other mentors in finishing a challenging but interesting project from March to May. Not only did I learn the way of thinking as a consultant with the knowledge about the Internet of Things &amp; Energy and cases, but acquaint and make friends with excellent colleagues and peers. At the same time, I completed my thesis during this period under the routine of library-canteen-dormitory. To be honest, it was exhausting but fulfilling. Time flies. Before the commencement, graduation trip fascinates me to fly to Chongqing, Chengdu and Xi’an with other 11 classmates, during which the first time disco dancing, airbnb living, hangover, love stories and et cetera all constituted one of the most memorable experience in my life. I appreciated it. However, graduation process cannot be stoppable, even if I still lived in Lin’s dorm 2 weeks after commencement. The old days, I missed them. Oddly enough, the sense of graduation is not strong for me, perhaps because I still have the mission to complete. In August, I went to Beijing and restarted the fight with ETS, which last to November and December. I met numerous comrades in similar situation with dreams but struggles to get the points. The details in these stories are complicated, even unperfect, but the important thing was that I survived. I still remember the slogan of ETS: “Go Anywhere From Here.” It may means how widespread and well-accepted it is all over the world. However, I prefer regarding it as below: after beating it, anyone will be bestowed the courage to go anywhere. I spent most of my struggling time at home, Zhengzhou, with parents, which was also an appropriate time to consider what I really want and what really matters in life. In Zhengzhou, there is an English corner where I have met a group of sagacious and experienced people. At the meantime, I learned how to cook and feed myself, how to drive a car, and how to deal with my inner impulse and frustration without a supervision and “normal” pace. From the aspect of the result of my application, the age of 22 is unamiable and unperfect, but I still eager to regard it as a worthwhile and well-rounded wealth, because I still need my endeavor to protect my dream in the brand new age of 23.","categories":[{"name":"Thoughts","slug":"Thoughts","permalink":"http://yoursite.com/categories/Thoughts/"},{"name":"Personal Journals","slug":"Thoughts/Personal-Journals","permalink":"http://yoursite.com/categories/Thoughts/Personal-Journals/"}],"tags":[{"name":"Journal","slug":"Journal","permalink":"http://yoursite.com/tags/Journal/"},{"name":"Annual Letter","slug":"Annual-Letter","permalink":"http://yoursite.com/tags/Annual-Letter/"}]},{"title":"What I Have Lived For","slug":"What I Have Lived For","date":"2019-03-20T16:00:00.000Z","updated":"2019-03-21T14:01:10.156Z","comments":true,"path":"2019/03/20/What I Have Lived For/","link":"","permalink":"http://yoursite.com/2019/03/20/What I Have Lived For/","excerpt":"","text":"This prose is the prologue to Bertrand Russell’s Autobiography, where the three passions have been motivating me since the high school. Below is Russell’s original text: Three passions, simple but overwhelmingly strong, have governed my life: the longing for love, the search for knowledge, and unbearable pity for the suffering of mankind. These passions, like great winds, have blown me hither and thither, in a wayward course, over a great ocean of anguish, reaching to the very verge of despair. I have sought love, first, because it brings ecstasy - ecstasy so great that I would often have sacrificed all the rest of life for a few hours of this joy. I have sought it, next, because it relieves loneliness—that terrible loneliness in which one shivering consciousness looks over the rim of the world into the cold unfathomable lifeless abyss. I have sought it finally, because in the union of love I have seen, in a mystic miniature, the prefiguring vision of the heaven that saints and poets have imagined. This is what I sought, and though it might seem too good for human life, this is what—at last—I have found. With equal passion I have sought knowledge. I have wished to understand the hearts of men. I have wished to know why the stars shine. And I have tried to apprehend the Pythagorean power by which number holds sway above the flux. A little of this, but not much, I have achieved. Love and knowledge, so far as they were possible, led upward toward the heavens. But always pity brought me back to earth. Echoes of cries of pain reverberate in my heart. Children in famine, victims tortured by oppressors, helpless old people a burden to their sons, and the whole world of loneliness, poverty, and pain make a mockery of what human life should be. I long to alleviate this evil, but I cannot, and I too suffer. This has been my life. I have found it worth living, and would gladly live it again if the chance were offered me.","categories":[{"name":"Thoughts","slug":"Thoughts","permalink":"http://yoursite.com/categories/Thoughts/"},{"name":"Other","slug":"Thoughts/Other","permalink":"http://yoursite.com/categories/Thoughts/Other/"}],"tags":[{"name":"Journal","slug":"Journal","permalink":"http://yoursite.com/tags/Journal/"}]},{"title":"Python Pandas Basics","slug":"Python Pandas Basics","date":"2019-03-18T04:00:00.000Z","updated":"2019-08-07T17:42:39.557Z","comments":true,"path":"2019/03/18/Python Pandas Basics/","link":"","permalink":"http://yoursite.com/2019/03/18/Python Pandas Basics/","excerpt":"","text":"This note contains basic knowledge of pandas including basic syntax and so on. Posted on Aug 6th is a draft. 1. Data Type in Pandaspandas is a newer package built on top of NumPy. Series and DataFrame is the basic data type. Pandas provides efficient access to these sorts of “data munging” tasks that occupy much of a data scientist’s time. 1.1 Series1.1.1 Series BasicsSeries is a one-dimensional array of indexed data. 123import pandas as pddata = pd.Series([0.25, 0.5, 0.75, 1.0])data output: 123450 0.251 0.502 0.753 1.00dtype: float64 The values are simply a familiar Numpy array and the index is an array-like of type pd.index. 12data.valuesdata.index output: 12array([0.25, 0.5 , 0.75, 1. ])RangeIndex(start=0, stop=4, step=1) we can access the element in the series via square-bracket notation. 12print(data[1])print(data[1:3]) output: 12340.51 0.502 0.75dtype: float64 1.1.2 Series IndexSeries is similar to one-dimensional NumPy Array. The essential difference is the presence of the index: while the NumPy Array has an implicitly de fined integer index used to access the values, the Pandas Series has an explicitly de fined index associated with the values. we can define the index with any desired type when creating a series 12data = pd.Series([0.25, 0.5, 0.75, 1.0], index=[\"a\", \"b\", \"c\", \"d\"])data output: 12345a 0.25b 0.50c 0.75d 1.00dtype: float64 We can access the element by using index 1data[\"b\"] output: 10.5 Here, series is a bit like a specialization of a Python dictionary. It is even more clear and efficient than dictionary in Python. 12345678population_dict = &#123;'California': 38332521, 'Florida': 19652860, 'Illinois':12882135, 'New York': 19651127, 'Texas': 26448193 &#125;population = pd.Series(population_dict)population output: 123456California 38332521Florida 19652860Illinois 12882135New York 19651127Texas 26448193dtype: int64 Here, series is a bit like a specialization of a Python dictionary. It is even more clear and efficient than dictionary in Python. 12population['California']population['California':'Illinois'] output: 1234538332521California 38332521Florida 19552860Illinois 12882135dtype: int64 1.1.3 Constructing SeriesWe can construct a Series from scratch: pd.Series(data, index = index), where Index is an optional argument. data can be one of many entities. The ‘data’ can be a list or Numpy array, can be a scalar, can be a dictionary 123pd.Series(5, index = [100, 200, 300])pd.Series(&#123;2:'a', 1:'b', 3:'c'&#125;)pd.Series(&#123;2:'a', 1:'b', 3:'c'&#125;, index = [3, 2]) output: 1234567891011100 5200 5300 5dtype: int642 a1 b3 cdtype: object3 c2 adtype: object In this case, the Series is populated only wit the explicitly identified keys. 1.2 DataFrame1.2.1 DataFrame BasicsDataframe can be thought of either as a generalization of a NumPy array, or as a specialization of a Python dictionary. It is an analog of a two dimensional array with flexible row indices and column names. 12345678area_dict = &#123;'California': 423967, 'Florida': 170312 , 'Illinois':149995, 'New York': 141297, 'Texas': 696562 &#125;area = pd.Series(area_dict)area output: 123456California 423967Florida 170312Illinois 149995New York 141297Texas 696562dtype: int64 we can use a dictionary to construct a single two-dimensional object: 12states = pd.DataFrame(&#123;'population': population, 'area': area&#125;)states output: population area California 38332521 423967 Florida 19652860 170312 Illinois 12882135 149995 New York 19651127 141297 Texas 26448193 696562 DataFrame also has index attribute that gives access to the index lables: 12states.indexstates.columns output: 12Index([California, Florida, Illinois, New York,Texas], dtype=object)Index([area, population], dtype=object) A Pandas Dataframe can be constructed in variety of ways a. from a single Series object: 1pd.DataFrame(population, columns=['popluation']) output: popluation California 38332521 Florida 19652860 Illinois 12882135 New York 19651127 Texas 26448193 b. from a list of dicts: 123data = [&#123;'a':i, 'b':2 * i&#125; for i in range(3)]pd.DataFrame(data) output: .dataframe tbody tr th:only-of-type { vertical-align: middle; } 1234567.dataframe tbody tr th &#123; vertical-align: top;&#125;.dataframe thead th &#123; text-align: right;&#125; a b 0 0 0 1 1 2 2 2 4 Even if some keys in the dictionary are missing, Pandas will fill them in with NaN (i.e., \\not a number”) values: 1pd.DataFrame([&#123;'a':1, 'b': 2&#125;,&#123;'b':3, 'c':4&#125;]) output: a b c 0 1.0 2 NaN 1 NaN 3 4.0 c. from a dictionary of Series objects 1pd.DataFrame(&#123;population: population, area: area&#125;) d. from a two-dimensional Numpy array 123pd.DataFrame(np.random.rand(3, 2), columns=['foo', 'bar'], index=['a', 'b', 'c']) output: foo bar a 0.010853 0.798349 b 0.970245 0.074233 c 0.429177 0.251008 e. from a numpy structured array 1A = np.zeros(3, dtype = [('A', 'i8'), ('B', 'f8')]) 1.2.2 Pandas Index ObjectHere is an example: 12ind = pd.Index([2, 3, 5, 7, 11])ind output: 1Int64Index([2, 3, 5, 7, 11], dtype=&apos;int64&apos;) a. we can use standard Python indexing notation to retrieve values or slices: 123print(ind[1])print(ind[::2])print(ind.size,ind.shape, ind.ndim, ind.dtype) 1233Int64Index([2, 5, 11], dtype=&apos;int64&apos;)5 (5,) 1 int64 b. index objects and numpy arrays are immutable, they cannot be modified 1ind[1] = 0 output: 123456---------------------------------------------------------------------------TypeError Traceback (most recent call last)&lt;ipython-input-66-906a9fa1424c&gt; in &lt;module&gt;----&gt; 1 ind[1] = 0 123456D:\\Anaconda\\lib\\site-packages\\pandas\\core\\indexes\\base.py in __setitem__(self, key, value) 2063 2064 def __setitem__(self, key, value):-&gt; 2065 raise TypeError(&quot;Index does not support mutable operations&quot;) 2066 2067 def __getitem__(self, key): 1TypeError: Index does not support mutable operations This immutability makes it safer to share indices between multiple DataFrames and arrays, without the potential for side effects from inadvertent index modi fication. c. set arithmetic 12345indA = pd.Index([1, 3, 5, 7, 9])indB = pd.Index([2, 3, 5, 7, 11])indA &amp; indB # IntersectionindA | indB # UnionindA ^ indB # symmetric difference output: 123Int64Index([3, 5, 7], dtype=&apos;int64&apos;)Int64Index([1, 2, 3, 5, 7, 9, 11], dtype=&apos;int64&apos;)Int64Index([1, 2, 9, 11], dtype=&apos;int64&apos;) 1.3 Data Selection and Operation indexing (e.g., arr[2; 1]) slicing (e.g., arr[:; 1 : 5]) masking (e.g., arr[arr &gt; 0]) fancy indexing (e.g., arr[0; [1; 5]]) combinations thereof (e.g., arr[:; [1; 5]]) 1.3.1 Series Operation1234import pandas as pddata = pd.Series([0.25, 0.5, 0.75, 1.0])data.Index = ['a', 'b', 'c', 'd']data output: 123450 0.251 0.502 0.753 1.00dtype: float64 Index, key and values: 123'a' in datadata.keys()list(data.items()) output: 123TrueIndex([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;], dtype=&apos;object&apos;)[] We can modify the values or extend a Series by assigning to a new index value. 1data['e'] = 1.25 output: 123456a 0.25b 0.50c 0.75d 1.00e 1.25dtype: float64 Examples of slices, masking, fancy indexing: 1234567891011# slicing by explicit indexdata['a':'c']# slicing by implicit integer indexdata[0:2]# maskingdata[(data &gt; 0.3)&amp;(data&lt;0.8)]# fancy indexingdata[['a', 'e']] output: 12345678910111213141516a 0.25b 0.50c 0.75dtype: float64a 0.25b 0.50dtype: float64b 0.50c 0.75dtype: float64a 0.25e 1.25dtype: float64 Notice that when slicing with an explicit index (i.e.,data[&#39;a&#39;: &#39;c&#39;]), the nal index is included in the slice, while when slicing with an implicit index (i.e., data[0 : 2]), the final index is excluded from the slice. 1.3.2 Indexers: loc, iloc, and ixThe slicing and indexing conventions can be a source ofconfusion in term of explicit and implicit form: 12345678data= pd.Series(['a', 'b', 'c'], index=[1, 3, 5])print(data)# index changed print(data[1])# cannot use slicingprint(data[1:3]) output: 123456781 a3 b5 cdtype: objecta3 b5 cdtype: object 1. loc the loc attribute allows indexing and slicing that always references the explicit index: 12print(data.loc[1])print(data.loc[1:3]) output: 1234a1 a3 bdtype: object 2. iloc The iloc attribute allows indexing and slicing that always references the implicit Python-style index: 12data.iloc[1]data.iloc[1:3] output: 1234&apos;b&apos;3 b5 cdtype: object 3. ix ix , is a hybrid of the two, and for Series objects is equivalent to standard [] - based indexing, the purpose of which will become more apparent in the context of Dataframe object. One guiding principle of Python code is that “explicit is better than implicit” 1.3.3 DataFrame Operation","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Programming","slug":"Computer-Science/Programming","permalink":"http://yoursite.com/categories/Computer-Science/Programming/"},{"name":"Python","slug":"Computer-Science/Programming/Python","permalink":"http://yoursite.com/categories/Computer-Science/Programming/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"NYU","slug":"NYU","permalink":"http://yoursite.com/tags/NYU/"},{"name":"Pandas","slug":"Pandas","permalink":"http://yoursite.com/tags/Pandas/"},{"name":"Bootcamp","slug":"Bootcamp","permalink":"http://yoursite.com/tags/Bootcamp/"}]},{"title":"Verbal Advantage Level 3","slug":"Level 3","date":"2019-03-15T04:00:00.000Z","updated":"2019-10-21T21:54:27.228Z","comments":true,"path":"2019/03/15/Level 3/","link":"","permalink":"http://yoursite.com/2019/03/15/Level 3/","excerpt":"","text":"defray pay, provide money for, cover the cost or expenses of compare: pay: pay for a meal / pay your bills defray: provide money for a portion of the cost or expense use an income tax refund to defray the expense of a trip to Europe use the donation to defray the cost of office equipment and supplies taciturn silent, not talkative, holding one’s tongue, reserved, uncommunicative, reticent antonyms: garrulous, loquacious, effusive, voluble compare: reticent: disinclination to express one’s feelings or supply information taciturn: person who is habitually silent and withdrawn (silent by nature) terse brief and to the point, free of superfluous words, expressed in a pointed and polished way synonyms: concise, pithy, succinct, and laconic antonyms: long-winded, redundant, verbose, prolix compare: concise: eliminating anything unnecessary or superfluous her presentation was persuasive and concise succinct: getting the point across in the fewest possible words an effective letter to the editor must be succinct terse: brief, pointed and polished a terse reply is brief and pointed boon a blessing, timely and welcome benefit, something beneficial bestowed upon one, something to be thankful for. tips: [archaic] favor, request His efforts were a boon to their enterprise proletariat The working class, especially the industrial wage-earning class, which earns its living by manual labor tips: proletarian [adj]: relating to the working class Karl Marx heterogeneous varied, composed of parts of different kinds, made up of unrelated or diverse elements, mixed, dissimilar, miscellaneous antonym: homogeneous pittance a small amount, portion, share, especially a small or meager amount of money her inheritance was only a pittance he received a pittance for his services some people will work for a pittance if the job is rewarding glib smooth-spoken, speaking in a ready, fluent manner, with natural or offhand ease, talkative in a nonchalant way synonyms: suave, facile, bland, voluble, flippant, and unctuous compare: unctuous: oily, fatty, having a greasy or soapy feel -&gt; slimy, slippery, or smarmy manner The unctuous person appears agreeable or earnest, but in an affected, self-serving and insincere way. glib: also has a slightly unpleasant aroma glib answers: thoughtless or ill-considered glib proposals or solutions: superficial glib salesperson or glib politician: persuasive but insincere penchant a liking, leaning, strong inclination, decided taste a penchant for sports, a penchant for poetry, a penchant for spicy food synonyms: propensity, proclivity compare: propensity: a profound, often irresistible inclination Successful businesspeople have a propensity for discerning the bottom line and making a profit. proclivity: a strong natural or habitual tendency, especially toward something objectionable or wicked Career criminals have a proclivity for violence. penchant Many people have a penchant for chocolate, a strong liking, decided taste. solicitous concerned, showing care and attention, especially in a worried, anxious, or fearful way be solicitous about the outcome of an event be solicitous of a child be solicitous for the welfare of another eager, full of desire, willing (with anxious concern) solicitous to gain the advantage solicitous to know the results of the election solicitous to go ahead with the plan circumscribe limit, restrict, confine, hem in, fix the boundaries of limited vocabulary can circumscribe your career and undermine your chances of success dearth lack, scarcity, insufficiency, inadequate supply of something needed synonym: paucity antonym: abundance, surplus, excess, superfluity, plethora ingratiating flattering, attempting to win approval or curry favor, trying to gain acceptance, done to charm or please another flash a fake, ingratiating smile mercenary greedy, done for payment only, motivated by a selfish desire for money or other reward synonym: covetous, avaricious extemporize improvise, speak or compose with little or no preparation or practice, perform improvise: improvise a speech, a tune on the piano, or a plan of action extemporize: spoken or composed with little or no preparation or practice","categories":[{"name":"Languages","slug":"Languages","permalink":"http://yoursite.com/categories/Languages/"},{"name":"English","slug":"Languages/English","permalink":"http://yoursite.com/categories/Languages/English/"},{"name":"Verbal Advantage","slug":"Languages/English/Verbal-Advantage","permalink":"http://yoursite.com/categories/Languages/English/Verbal-Advantage/"}],"tags":[{"name":"English","slug":"English","permalink":"http://yoursite.com/tags/English/"},{"name":"Vocabularies","slug":"Vocabularies","permalink":"http://yoursite.com/tags/Vocabularies/"}]},{"title":"Data Structure Basics","slug":"Data Structure Basics","date":"2019-03-09T16:00:00.000Z","updated":"2019-03-21T13:55:33.110Z","comments":true,"path":"2019/03/09/Data Structure Basics/","link":"","permalink":"http://yoursite.com/2019/03/09/Data Structure Basics/","excerpt":"","text":"This note contains basic knowledge of data structure and algorithm, including big-O. Computing ModelComplexityComplexityNotationsBig-$\\Omega$Big-$\\theta$Big-OO(c)O($log^n$)O($n^c$)tractable O($2^n$)intractable example: 2-Subset Problem 2-Subset is NP-complete Algorithm AnalysisObjective Validity Complexity MethodIteration: summation of series Arithmetic Series T(n) = 1 + 2 + ... + n = \\frac{n(n+1)}{2} = O(n^2) Power of natural number Series \\sum_{k=0}^{n}k^d \\approx \\int_{0}^{n}x^{d+1}dx=\\frac{1}{d+1}x^{d+1}\\bigg|_{0}^{n}=\\frac{n^{d+1}}{d+1}=O(n^{d+1}) \\begin{align*} T_2(n) &= 1^2+2^2+..+n^2=\\frac{n(n+1)(2n+1)}{6}=O(n^3) \\\\ T_3(n) &= 1^3+2^3+..+n^3=\\frac{n^2(n+1)^2}{4}=O(n^4) \\\\ T_4(n) &= 1^4+2^4+..+n^4=\\frac{n(n+1)(2n+1)(3n^2+3n-1)}{30}=O(n^5) \\\\ \\end{align*} Geometric series T_p(n)=p^0+p^1+...p^n=\\frac{p^{n+1}-1}{p-1}=O(a^n) 1 + 2 + 4 + ... + 2^n = 2^{n+1}-1=O(2^{n+1})=O(2^n) Convergent series 1+\\frac{1}{2^2}+...+\\frac{1}{n^2}","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Data Structure & Algorithm","slug":"Computer-Science/Data-Structure-Algorithm","permalink":"http://yoursite.com/categories/Computer-Science/Data-Structure-Algorithm/"},{"name":"Data Structure","slug":"Computer-Science/Data-Structure-Algorithm/Data-Structure","permalink":"http://yoursite.com/categories/Computer-Science/Data-Structure-Algorithm/Data-Structure/"}],"tags":[{"name":"MOOC","slug":"MOOC","permalink":"http://yoursite.com/tags/MOOC/"},{"name":"Data Structure","slug":"Data-Structure","permalink":"http://yoursite.com/tags/Data-Structure/"}]},{"title":"Pragmatic Program Savings Account","slug":"C++ Pragmatic Program-SavingsAccount","date":"2019-02-27T16:00:00.000Z","updated":"2019-02-28T13:06:05.955Z","comments":true,"path":"2019/02/27/C++ Pragmatic Program-SavingsAccount/","link":"","permalink":"http://yoursite.com/2019/02/27/C++ Pragmatic Program-SavingsAccount/","excerpt":"","text":"This note contains a simple codes of a savings account in C++. Codes Version 1 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;iosteam&gt;#include &lt;cmath&gt;using namespace std;class SavingsAccount&#123;private: int id; double balance; double rate; int lastDate; double accumulation; void record(int date, double amount); double accumulate(int date)const&#123; return accumulation + balance * (date - lastDate); &#125;public: SavingsAccount(int date, int id, double rate); int getId()&#123;return id;&#125; double getBalance()&#123;return balance;&#125; double getRate()&#123;return rate;&#125; void deposit(int date, double amount); void withdraw(int date, double amount); void settle(int date); void show();&#125;SavingsAccount::SavingsAccount(int date, int id, double rate):id(id),balance(0),rate(rate),lastDate(date),accumulation(0)&#123; cout &lt;&lt; date &lt;&lt; \"\\t#\" &lt;&lt; id &lt;&lt; \"is created\" &lt;&lt; endl;&#125;void SavingsAccount::record(int date, double amount)&#123; accumulation = accumulate(date); lastDate = date; amount = floor(amount * 100 + 0.5) / 100; balance += amount; cout &lt;&lt; date\"\\t#\"&lt;&lt;id&lt;&lt;\"\\t\"&lt;&lt;amount&lt;&lt;\"\\t\"&lt;&lt;balance&lt;&lt;\"\\t\"&lt;&lt;desc&lt;&lt;endl;&#125;void SavingsAcount::settle(int date)&#123; double interest = accumulate(date) * rate / 365; if (interest != 0) record(date, interest); accumulation = 0;&#125;void SavingsAccount::show()&#123; cout &lt;&lt; '#' &lt;&lt; id &lt;&lt;\"\\tBalance:\" &lt;&lt; balance&#125;int main()&#123; SavingsAccount sa0(1,21325302,0.015); SavingsAccount sa1(1,58320212,0.015); sa0.deposit(5,5000); sa1.deposit(25,10000); sa0.deposit(45,5500); sa1.withdaw(60,4000); sa0.settle(90); sa1.settle(90); sa0.show(); cout&lt;&lt;endl; sa1.show(); cout&lt;&lt;endl; return 0;&#125;","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Programming","slug":"Computer-Science/Programming","permalink":"http://yoursite.com/categories/Computer-Science/Programming/"},{"name":"C++","slug":"Computer-Science/Programming/C","permalink":"http://yoursite.com/categories/Computer-Science/Programming/C/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"},{"name":"MOOC","slug":"MOOC","permalink":"http://yoursite.com/tags/MOOC/"}]},{"title":"C++ Array, Pointer & String","slug":"C++ Array, Pointer & String","date":"2019-02-26T16:00:00.000Z","updated":"2019-03-02T15:26:33.401Z","comments":true,"path":"2019/02/26/C++ Array, Pointer & String/","link":"","permalink":"http://yoursite.com/2019/02/26/C++ Array, Pointer & String/","excerpt":"","text":"This note contains the basic rules of array, pointer and string in C++. ArrayDefinitionType Identifier Name [Expression1] [Expression2]… 12int a[10]// a is an integer array with 10 elements. 12int a[5][3]// a is an 2-dimension integer array with 5 rows and 3 columns and 15 elements. tips The array must be declared first, then be used. refer the elements one by one, not the whole array. 12a[0]=a[5]+a[7]-a[2*3]b[1][2]=a[2][3]/2 example 1234567891011121314#include &lt;iostream&gt;using namespace std;int main() &#123; int a[10], b[10]; for(int i = 0; i &lt; 10; i++) &#123; a[i] = i * 2 - 1; b[10 - i - 1] = a[i]; &#125; for(int i = 0; i &lt; 10; i++) &#123; cout &lt;&lt; \"a[\" &lt;&lt; i &lt;&lt; \"] = \" &lt;&lt; a[i] &lt;&lt; \" \"; cout &lt;&lt; \"b[\" &lt;&lt; I &lt;&lt; \"] = \" &lt;&lt; b[i] &lt;&lt; endl; &#125; return 0;&#125; Initialization One dimension 123456// 1. list all the initial value of elementsstatic int a[10]=&#123;0,1,2,3,4,5,6,7,8,9&#125;// 2. initialize part of elementsstatic int a[10]=&#123;0,1,2,3,4&#125;// 3. don't set the length when initializingstatic int a[]=&#123;0,1,2,3,4,5,6,7,8,9&#125; two dimension 123456789// 1. list all the initial value in braces by orderstatic int a[3][4]=&#123;1,2,3,4,5,6,7,8,9,10,11,12&#125;// 2. list the initial value by different rowsstatic int a[3][4]=&#123;&#123;1,2,3,4&#125;,&#123;5,6,7,8&#125;,&#123;9,10,11,12&#125;&#125;// 3. initialize part of elementsstatic int a[3][4]=&#123;&#123;1&#125;,&#123;0,6&#125;,&#123;0,0,11&#125;&#125;// 4. list all the initial values, the first index can be ignoredstatic int a[][4]=&#123;1,2,3,4,5,6,7,8,9,10,11,12&#125;static int a[][4]=&#123;&#123;1,2,3,4&#125;,&#123;5,6,7,8&#125;,&#123;9,10,11,12&#125;&#125; Find the first 20 items in Fibonacci sequence 12345678910111213#include &lt;iostream&gt;using namespace std;int main() &#123; int f[20] = &#123;1,1&#125;; //initialize the 0th and the first number for (int i = 2; i &lt; 20; i++) f[i] = f[i - 2] + f[i - 1]; for (int i=0;i&lt;20;i++) &#123; //output 5 number on each row if (i % 5 == 0) cout &lt;&lt; endl; cout.width(12); //set output width in 12 cout &lt;&lt; f[i]; &#125;return 0;&#125; Input the answers of multiple choices in a loop, compute and output the correct rate of each answer till input the ctrl+z. The answers will be input in a row as “a”, “b”, “c”, “d”. 12345678910111213141516171819202122#include &lt;iostream&gt;using namespace std;int main() &#123; const char key[ ] = &#123;'a','c','b','a','d'&#125;; const int NUM_QUES = 5; char c; int ques = 0, numCorrect = 0; cout &lt;&lt; \"Enter the \" &lt;&lt; NUM_QUES &lt;&lt; \" question tests:\" &lt;&lt; endl; while(cin.get(c)) &#123; if(c != '\\n') &#123; if(c == key[ques]) &#123; numCorrect++; cout &lt;&lt; \" \"; &#125; else cout&lt;&lt;\"*\"; ques++; &#125; else &#123; cout &lt;&lt; \" Score \" &lt;&lt; static_cast&lt;float&gt;(numCorrect)/NUM_QUES*100 &lt;&lt; \"%\"; ques = 0; numCorrect = 0; cout &lt;&lt; endl; &#125; &#125; return 0;&#125; Array as argumenttips when elements in an array are parameters, they are just like variables. The name of array should be arguments and parameters. Type should be the same. Compute the sum of every row of an array. 123456789101112131415161718192021#include &lt;iostream&gt;using namespace std;void rowSum(int a[][4], int nRow) &#123; for (int i = 0; i &lt; nRow; i++) &#123; for(int j = 1; j &lt; 4; j++) a[i][0] += a[i][j]; &#125;&#125;int main() &#123; int table[3][4] = &#123;&#123;1, 2, 3, 4&#125;, &#123;2, 3, 4, 5&#125;, &#123;3, 4, 5, 6&#125;&#125;; for (int i = 0; i &lt; 3; i++) &#123; for (int j = 0; j &lt; 4; j++) cout &lt;&lt; table[i][j] &lt;&lt; \" \"; cout &lt;&lt; endl; &#125; rowSum(table, 3); //compute the sum of every row //output the result for (int i = 0; i &lt; 3; i++) cout &lt;&lt; \"Sum of row \" &lt;&lt; i &lt;&lt; \" is \" &lt;&lt; table[i][0] &lt;&lt; endl; return 0;&#125; Object Array definition Class Name Array Name[number of elements] syntax Array Name[index].member Name initialization 1Point a[2]=&#123;Point(1,2),Point(3,4)&#125; example 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748//Point.h#ifndef _POINT_H#define _POINT_Hclass Point &#123;public: Point(); Point(int x, int y); ~Point(); void move(int newX,int newY); int getX() const &#123; return x; &#125; int getY() const &#123; return y; &#125; static void showCount();private: int x, y;&#125;;#endif //_POINT_H//Point.cpp#include &lt;iostream&gt;#include \"Point.h\"using namespace std;Point::Point() : x(0), y(0) &#123; cout &lt;&lt; \"Default Constructor called.\" &lt;&lt; endl;&#125;Point::Point(int x, int y) : x(x), y(y) &#123; cout &lt;&lt; \"Constructor called.\" &lt;&lt; endl;&#125;Point::~Point() &#123; cout &lt;&lt; \"Destructor called.\" &lt;&lt; endl;&#125;void Point::move(int newX,int newY) &#123; cout &lt;&lt; \"Moving the point to (\" &lt;&lt; newX &lt;&lt; \", \" &lt;&lt; newY &lt;&lt; \")\" &lt;&lt; endl; x = newX; y = newY;&#125;//main.cpp#include \"Point.h\"#include &lt;iostream&gt;using namespace std;int main() &#123; cout &lt;&lt; \"Entering main...\" &lt;&lt; endl; Point a[2]; for(int i = 0; i &lt; 2; i++) a[i].move(i + 10, i + 20); cout &lt;&lt; \"Exiting main...\" &lt;&lt; endl; return 0;&#125; for loop based on range traversal all the elements in an array 123456789int main()&#123; int array[3] = &#123;1,2,3&#125;; int *p; for(p = array; p &lt; array + sizeof(array) / sizeof(int); ++p)&#123; *p += 2; std::cout &lt;&lt; *p &lt;&lt; std::endl; &#125; return 0;&#125; 12345678int main()&#123; int array[3] = &#123;1,2,3&#125;; for(int &amp; e : array)&#123; e += 2; std::cout&lt;&lt;e&lt;&lt;std::endl; &#125; return 0;&#125; PointerDefinition pointer operator *Pointer Name 123static int i;static int* ptr = &amp;i*ptr = 3 address operator &amp;Variable Name Initializationsyntax Storage Type Type Identifier *Pointer Name = initial address 1int *pa = &amp;a tips: The variable should be declared before assigned to a pointer. A non-static variable can be assigned to a static pointer. Assignmentsyntax Pointer Name = address value tips: The address value must be a address constant or address variable rather than an integer. 0 can be assigned to a pointer, which means a null pointer. Now nullptr can be used as a null pointer void pointer can be assigned to the address of any type object. example of pointer 12345678910#include &lt;iostream&gt;using namespace std;int main() &#123; int i; int *ptr = &amp;i; //assign the address of i to ptr i = 10; cout &lt;&lt; \"i = \" &lt;&lt; i &lt;&lt; endl; //output the value of the int variable cout &lt;&lt; \"*ptr = \" &lt;&lt; *ptr &lt;&lt; endl; //output the content that the int pointer is assigned toreturn 0;&#125; the output result is: 12i = 10*ptr = 10 example of a void pointer 1234567891011#include &lt;iostream&gt;using namespace std;int main() &#123; //!void voidObject; //wrong: there is no void variable void *pv; //right: the void type pointer int i = 5; pv = &amp;i; //void pointer is assigned to the int variable int *pint = static_cast&lt;int *&gt;(pv); //void pointer is transformed to an int pointer cout &lt;&lt; \"*pint = \" &lt;&lt; *pint &lt;&lt; endl;return 0;&#125; pointer assigned to an constant and const pointer the assigned object cannot be changed by a pointer assigned to an constant. 12345int a;const int *p1 = &amp;a; //p1 is a pointer assigned to an constantint b;p1 = &amp;b; //right，the assigned value of p1 can be changed *p1 = 1; //wrong，the object value cannot be changed by p1 the assigned value of an const pointer cannot be changed 123int a;int * const p2 = &amp;a;p2 = &amp;b; //wrong，p2 is a const pointer which cannot be changed OperationArithmetic Operation addition and subtraction: +n or -n meaning the pointer assign to the initial address of the n-th data object. ++ or — the initial address of the last or the next data object 12short a[4]short *pa=a Relationship Operationtips: the same type of pointers can be operated with relationship 12p==0p!=0 Access Array with Pointer12int a[10], *pa;pa = &amp;a[0]; //or: pa = a tips: There are similar expression: *pa is a[0], *(pa+1) is a[1], *(pa+i) is a[i], a[i],*(pa+i),*(a+i) and pa[i]are the same effect. a++ is wrong, because a is the initial address of the array, a constant. example: access array with index 123456789#include &lt;iostream&gt;using namespace std;int main()&#123; int a[10] = &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 &#125;; for (int i = 0; i &lt; 10; i++) cout &lt;&lt; a[i] &lt;&lt; \" \"; cout &lt;&lt; endl; return 0;&#125; access array with pointer 123456789#include &lt;iostream&gt;using namespace std;int main() &#123; int a[10] = &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 &#125;; for (int i = 0; i &lt; 10; i++) cout &lt;&lt; *(a+i) &lt;&lt; \" \"; cout &lt;&lt; endl; return 0;&#125; access array with pointer variable 123456789#include &lt;iostream&gt;using namespace std;int main() &#123; int a[10] = &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 &#125;; for (int *p = a; p &lt; (a + 10); p++) cout &lt;&lt; *p &lt;&lt; \" \"; cout &lt;&lt; endl; return 0;&#125; Array with pointer elementsDefinition： ​ Point *pa[2] is made up of pa[0] and pa[1]. 12345678910111213141516#include &lt;iostream&gt; using namespace std;int main() &#123; int line1[] = &#123; 1, 0, 0 &#125;; //The first row int line2[] = &#123; 0, 1, 0 &#125;; //The second row int line3[] = &#123; 0, 0, 1 &#125;; //The third row //define an int array with pointer elements and initialize it int *pLine[3] = &#123; line1, line2, line3 &#125;; cout &lt;&lt; \"Matrix test:\" &lt;&lt; endl; for (int i = 0; i &lt; 3; i++) &#123; for (int j = 0; j &lt; 3; j++) cout &lt;&lt; pLine[i][j] &lt;&lt; \" \"; cout &lt;&lt; endl; &#125; return 0;&#125; The output result is: 1234Matrix test:1,0,00,1,00,0,1 Function with pointer arguments and parameters example: split a number into integer and fraction. 1234567891011121314151617#include &lt;iostream&gt;using namespace std;void splitFloat(float x, int *intPart, float *fracPart) &#123; *intPart = static_cast&lt;int&gt;(x); *fracPart = x - *intPart;&#125;int main() &#123; cout &lt;&lt; \"Enter 3 float point numbers:\" &lt;&lt; endl; for(int i = 0; i &lt; 3; i++) &#123; float x, f; int n; cin &gt;&gt; x; splitFloat(x, &amp;n, &amp;f); //address is the parameter. cout &lt;&lt; \"Integer Part = \" &lt;&lt; n &lt;&lt; \" Fraction Part = \" &lt;&lt; f &lt;&lt; endl; &#125; return 0;&#125; example: a pointer assigned to const is argument 1234567891011121314151617#include &lt;iostream&gt;using namespace std;const int N = 6;void print(const int *p, int n);int main() &#123; int array[N]; for (int i = 0; i &lt; N; i++) cin&gt;&gt;array[i]; print(array, N); return 0;&#125;void print(const int *p, int n) &#123; cout &lt;&lt; \"&#123; \" &lt;&lt; *p; for (int i = 1; i &lt; n; i++) cout &lt;&lt; \", \" &lt;&lt; *(p+i); cout &lt;&lt; \" &#125;\" &lt;&lt; endl;&#125; Function with a pointer return valuesyntax: Type Identifier *Function Name(){ ​ //expression } tips: a non-static local address cannot be a return value. example1: 123456789101112131415#include &lt;iostream&gt;using namespace std;int main()&#123; int array[10]; int* search(int* a, int num); for(int i=0; i&lt;10; i++) cin&gt;&gt;array[i]; int* zeroptr= search(array, 10); //assign the address of array in main function to the sub-function return 0;&#125;int* search(int* a, int num)&#123; //pointer a assign to the array defined in the main function for(int i=0; i&lt;num; i++) if(a[i]==0) return &amp;a[i];&#125; example2: 12345678910111213#include &lt;iostream&gt;using namespace std;int main()&#123; int* newintvar(); int* intptr= newintvar(); *intptr=5; //a valid address delete intptr; //if not delete, the memory will leak return 0;&#125;int* newintvar ()&#123; int* p=new int(); return p; //the returned address is assigned to the dynamic allocated space&#125; Pointer assigned to the FunctionDefinition: Type Identifier (*Function Pointer Name)(); define a function which can achieve any kind of arithmetic operation 1234567891011121314151617181920212223242526#include &lt;iostream&gt;using namespace std;int compute(int a, int b, int(*func)(int, int))&#123; return func(a, b);&#125;int max(int a, int b)&#123; return((a &gt; b)?a: b);&#125;int min(int a, int b)&#123; return((a &lt; b)?a: b);&#125;int sum(int a, int b)&#123; return a + b;&#125;int main()&#123; int a, b, res; cout &lt;&lt; \"inout intager a: \"; cin &gt;&gt; a; cout &lt;&lt; \"inout intager b: \"; cin &gt;&gt; b; res = compute(a, b, &amp; max); cout &lt;&lt; \"Max of \" &lt;&lt; a &lt;&lt; \" and \" &lt;&lt; b &lt;&lt; \" is \" &lt;&lt; res &lt;&lt; endl; res = compute(a, b, &amp; min); cout &lt;&lt; \"Min of \" &lt;&lt; a &lt;&lt; \" and \" &lt;&lt; b &lt;&lt; \" is \" &lt;&lt; res &lt;&lt; endl; res = compute(a, b, &amp; sum); cout &lt;&lt; \"Sum of \" &lt;&lt; a &lt;&lt; \" and \" &lt;&lt; b &lt;&lt; \" is \" &lt;&lt; res &lt;&lt; endl;&#125; Object Pointersyntax: definition: Class Name *Object Pointer Name 123Point a(5, 10);Point *ptr;ptr = &amp;a; access object member by pointer Object Pointer Name-&gt; object member name ptr-&gt;getx() equals (*ptr).getx(); example: 123456789101112131415161718#include &lt;iostream&gt;using namespace std;class Point &#123;public: Point(int x = 0, int y = 0) : x(x), y(y) &#123; &#125; int getX() const &#123; return x; &#125; int getY() const &#123; return y; &#125;private: int x, y;&#125;;int main() &#123; Point a(4, 5); Point *p1 = &amp;a; //define object pointer and initialize with address of a cout &lt;&lt; p1-&gt;getX() &lt;&lt; endl; cout &lt;&lt; a.getX() &lt;&lt; endl; return 0;&#125; This Pointerreturn x equals toreturn this -&gt; x 1234567class Fred; class Barney &#123; Fred *x;&#125;;class Fred &#123; Barney y;&#125;; Dynamic Memory AllocationDefinitionsyntax: new Type Identifier(initial arguments list) delete Pointer Name example: 123456789101112131415161718192021222324252627282930#include &lt;iostream&gt;using namespace std;class Point &#123;public: Point() : x(0), y(0) &#123; cout&lt;&lt;\"Default Constructor called.\"&lt;&lt;endl; &#125; Point(int x, int y) : x(x), y(y) &#123; cout&lt;&lt; \"Constructor called.\"&lt;&lt;endl; &#125; ~Point() &#123; cout&lt;&lt;\"Destructor called.\"&lt;&lt;endl; &#125; int getX() const &#123; return x; &#125; int getY() const &#123; return y; &#125; void move(int newX, int newY) &#123; x = newX; y = newY; &#125;private: int x, y;&#125;;int main()&#123; cout &lt;&lt; \"step one: \" &lt;&lt; endl; Point *ptr1 = new Point; //default constructor function delete ptr1; //destructor function cout &lt;&lt; \"Step two: \" &lt;&lt; endl; ptr1 = new Point(1,2); delete ptr1; return 0;&#125; The result: 123456Step One:Default Constructor called.Destructor called.Step Two:Constructor called.Destructor called. Dynamic Arraysyntax: one dimension new Type identifier [length of the array] delete[] Array Name example: 123456789101112131415161718192021222324252627282930#include &lt;iostream&gt;using namespace std;class Point &#123;public: Point() : x(0), y(0) &#123; cout&lt;&lt;\"Default Constructor called.\"&lt;&lt;endl; &#125; Point(int x, int y) : x(x), y(y) &#123; cout&lt;&lt; \"Constructor called.\"&lt;&lt;endl; &#125; ~Point() &#123; cout&lt;&lt;\"Destructor called.\"&lt;&lt;endl; &#125; int getX() const &#123; return x; &#125; int getY() const &#123; return y; &#125; void move(int newX, int newY) &#123; x = newX; y = newY;&#125;private: int x, y;&#125;;int main() &#123; Point *ptr = new Point[2]; //create ptr[0].move(5, 10); ptr[1].move(15, 20); cout &lt;&lt; \"Deleting...\" &lt;&lt; endl; delete[] ptr; return 0;&#125; The result is: 12345Default Constructor called.Default Constructor called.Deleting...Destructor called.Destructor called. multiple dimension new Type identifier [length of the dimension1] [length of the dimension2] example: 12345678910111213141516171819#include &lt;iostream&gt;using namespace std;int main() &#123; int (*cp)[9][8] = new int[7][9][8]; for (int i = 0; i &lt; 7; i++) for (int j = 0; j &lt; 9; j++) for (int k = 0; k &lt; 8; k++) *(*(*(cp + i) + j) + k) =（i * 100 + j * 10 + k); for (int i = 0; i &lt; 7; i++) &#123; for (int j = 0; j &lt; 9; j++) &#123; for (int k = 0; k &lt; 8; k++) cout &lt;&lt; cp[i][j][k] &lt;&lt; \" \"; cout &lt;&lt; endl; &#125; cout &lt;&lt; endl; &#125; delete[] cp; return 0;&#125; example2: encapsulate dynamic array class 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;iostream&gt;#include &lt;cassert&gt;using namespace std;class Point &#123;public: Point() : x(0), y(0) &#123; cout&lt;&lt;\"Default Constructor called.\"&lt;&lt;endl; &#125; Point(int x, int y) : x(x), y(y) &#123; cout&lt;&lt; \"Constructor called.\"&lt;&lt;endl; &#125; ~Point() &#123; cout&lt;&lt;\"Destructor called.\"&lt;&lt;endl; &#125; int getX() const &#123; return x; &#125; int getY() const &#123; return y; &#125; void move(int newX, int newY) &#123; x = newX; y = newY; &#125;private: int x, y;&#125;;class ArrayOfPoints &#123;public: ArrayOfPoints(int size) : size(size) &#123; points = new Point[size]; &#125; ~ArrayOfPoints() &#123; cout &lt;&lt; \"Deleting...\" &lt;&lt; endl; delete[] points; &#125; Point&amp; element(int index) &#123; assert(index &gt;= 0 &amp;&amp; index &lt; size); return points[index]; &#125;private: Point *points; //dynamic array initial address int size; //size of array&#125;;int main() &#123; int count; cout &lt;&lt; \"Please enter the count of points: \"; cin &gt;&gt; count; ArrayOfPoints points(count); points.element(0).move(5, 0); points.element(1).move(15, 20); return 0;&#125; The result is: 123456Please enter the number of points:2Default Constructor called.Default Constructor called.Deleting...Destructor called.Destructor called. Smart Pointerunique_ptr shared_ptr weak_ptr Vectorsyntax: definition vector\\&lt;Element Type> Array Name(array length); 1vector&lt;int&gt; arr(5) access vector Array name [ index ] vector Array name.size() example: Calculate the average of elements in the array. 123456789101112131415161718192021#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;double average(const vector&lt;double&gt; &amp;arr)&#123; double sum = 0; for (unsigned i = 0; i&lt;arr.size(); i++) sum += arr[i]; return sum / arr.size();&#125;int main() &#123; unsigned n; cout &lt;&lt; \"n = \"; cin &gt;&gt; n; vector&lt;double&gt; arr(n); //create array object cout &lt;&lt; \"Please input \" &lt;&lt; n &lt;&lt; \" real numbers:\" &lt;&lt; endl; for (unsigned i = 0; i &lt; n; i++) cin &gt;&gt; arr[i]; cout &lt;&lt; \"Average = \" &lt;&lt; average(arr) &lt;&lt; endl; return 0;&#125; example2: auto pointer 123456789#include &lt;vector&gt;#include &lt;iostream&gt;int main()&#123; std::vector&lt;int&gt; v = &#123;1,2,3&#125;; for(auto i = v.begin(); i != v.end(); ++i) std::cout &lt;&lt; *i &lt;&lt; std::endl; for(auto e : v) std::cout &lt;&lt; e &lt;&lt; std::endl;&#125; Object ReplicationShallow CopyDeep CopyMove Assignmentsyntax: class_name ( class_name &amp;&amp; ) example: version 1 123456789101112131415161718192021222324252627#include&lt;iostream&gt;using namespace std;class IntNum&#123;public: IntNum(int x = 0) : xptr(new int(x))&#123; //constructor cout &lt;&lt; \"Calling constructor...\" &lt;&lt; endl; &#125; IntNum(const IntNum &amp; n) : xptr(new int(*n.xptr))&#123;//copy constructor cout &lt;&lt; \"Calling copy constructor...\" &lt;&lt; endl; &#125;; ~IntNum()&#123; //destructor delete xptr; cout &lt;&lt; \"Destructing...\" &lt;&lt; endl; &#125; int getInt() &#123; return *xptr; &#125;private: int *xptr;&#125;;//return IntNum class objectIntNum getNum()&#123; IntNum a; return a;&#125;int main() &#123; cout&lt;&lt;getNum().getInt()&lt;&lt;endl; return 0;&#125; version 2: 12345678910111213141516171819202122232425262728293031#include&lt;iostream&gt;using namespace std;class IntNum &#123;public: IntNum(int x = 0) : xptr(new int(x))&#123; //constructor cout &lt;&lt; \"Calling constructor...\" &lt;&lt; endl; &#125; IntNum(const IntNum &amp; n) : xptr(new int(*n.xptr))&#123; // copy constructor cout &lt;&lt; \"Calling copy constructor...\" &lt;&lt; endl; IntNum(IntNum &amp;&amp; n): xptr( n.xptr)&#123; //move constructor n.xptr = nullptr; cout &lt;&lt; \"Calling move constructor...\" &lt;&lt; endl;&#125;~IntNum()&#123; //destructor delete xptr; cout &lt;&lt; \"Destructing...\" &lt;&lt; endl;&#125;private: int *xptr;&#125;;//return IntNum classIntNum getNum() &#123; IntNum a; return a;&#125;int main()&#123; cout &lt;&lt; getNum().getInt() &lt;&lt; endl; return 0;&#125; StringString of C typesyntax: string constant const char *string name=”string content“ 1const char *STRING1 = \"program\" string array char string name = {,..,’\\0’} 123char str[8] = &#123; 'p', 'r', 'o', 'g', 'r', 'a', 'm', '\\0' &#125;;char str[8] = \"program\";char str[] = \"program\"; String Classsyntax: constructor string() string(const char *s) string(const string&amp; rhs) operator s+t s=t s==t, s!=t, s&lt;=t, s&gt;=t, s&lt;t, s&gt;t s[i] 1234string s1 = \"abc\", s2 = \"def\";string s3 = s1 + s2; //\"abcdef\"bool s4 = (s1 &lt; s2); //truechar s5 = s2[1]; //'e' example: 1234567891011121314151617181920212223#include &lt;string&gt;#include &lt;iostream&gt;using namespace std;//output true or false based on the value//title is notificationinline void test(const char *title, bool value)&#123; cout &lt;&lt; title &lt;&lt; \" returns \" &lt;&lt; (value ? \"true\" : \"false\") &lt;&lt; endl;&#125;int main() &#123; string s1 = \"DEF\"; cout &lt;&lt; \"s1 is \" &lt;&lt; s1 &lt;&lt; endl; string s2; cout &lt;&lt; \"Please enter s2: \"; cin &gt;&gt; s2; cout &lt;&lt; \"length of s2: \" &lt;&lt; s2.length() &lt;&lt; endl; test(\"s1 &lt;= \\\"ABC\\\"\", s1 &lt;= \"ABC\"); test(\"\\\"DEF\\\" &lt;= s1\", \"DEF\" &lt;= s1); s2 += s1; cout &lt;&lt; \"s2 = s2 + s1: \" &lt;&lt; s2 &lt;&lt; endl; cout &lt;&lt; \"length of s2: \" &lt;&lt; s2.length() &lt;&lt; endl; return 0;&#125; getlinegetline(cin, string name) getline(cin, string name, ‘,’) example: 123456789101112include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main() &#123; for (int i = 0; i &lt; 2; i++)&#123; string city, state; getline(cin, city, ','); getline(cin, state); cout &lt;&lt; \"City:\" &lt;&lt; city &lt;&lt; “ State:\" &lt;&lt; state &lt;&lt; endl; &#125; return 0;&#125;","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Programming","slug":"Computer-Science/Programming","permalink":"http://yoursite.com/categories/Computer-Science/Programming/"},{"name":"C++","slug":"Computer-Science/Programming/C","permalink":"http://yoursite.com/categories/Computer-Science/Programming/C/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"},{"name":"MOOC","slug":"MOOC","permalink":"http://yoursite.com/tags/MOOC/"}]},{"title":"Random Variables and Distribution","slug":"Random Variables and Distribution","date":"2019-02-14T05:00:00.000Z","updated":"2019-08-13T02:35:39.878Z","comments":true,"path":"2019/02/14/Random Variables and Distribution/","link":"","permalink":"http://yoursite.com/2019/02/14/Random Variables and Distribution/","excerpt":"","text":"This note contains basic knowledge of random variables and distribution, including random variables, expected values, variance, covariance, and other characteristic values. Except the covariance, other conceptions are about one random variable. Random Variables and DistributionRandom VariablesNumerical quantities whose values are determined by the outcome of the experiment are known as random variables. Hence, we can assign probabilities to their possible values. The set of this probabilities is distribution. In fact, random variables can be discrete or continuous. The possible values of discrete random variables constituted sets of discrete values, whereas continuous random variables whose set of possible values is instead a continuous region can take on any value within some interval. Actually, the distribution differs random variables from general variables in calculus. A random variable must have its own distribution. DistributionFor discrete variables, the distribution is a sequence form. If $X$ is a discrete random variable whose possible values are $x_1, x_2,…,x_n$, then the set of probabilities $P\\{X=x_j\\}$$(j=1,…,n)$ is called the probability distribution of discrete random variable. Since $X$ must assume one of these values, it follows that \\begin{equation*} \\displaystyle{\\sum_{j=1}^{n}}~P\\{X = x_j\\} = 1. \\end{equation*}For continuous variables, the distribution is a function form. Every continuous random variable $X$ has a function $f$ associated with it. This function $f$ is called the probability density function of $X$. For any numbers $a&lt;b$, the area under $f$ between $a$ and $b$ is equal to the probability that $X$ assumes a value between $a$ and $b$. P\\{a \\leq X \\leq b \\} = area ~ under ~ f ~ between ~ a ~ and ~ bDistribution FunctionIf $X$ is a random variable, for any real number x, we define F(x) = P(X \\leq x)as the distribution function of random variable $X$, which is also called $X$ is denoted by $F(x)$, or $X \\sim F(x)$. Sometimes, $F_{X}(x)$ is the same meaning. Sometimes it is also called cumulative distribution function(CDF). Any random variable has its own distribution function, no matter it is discrete or continuous. And here are three fundamental properties. monotonicity $F(x)$ is a monotonic and nondecreasing function on the $(-\\infty, \\infty)$. that is to say, for any $x_1&lt;x_2$, F(x_1) \\leq F(x_2) boundedness For any $x$, $0 \\leq F(x) \\leq 1$, and \\begin{align*} F(-\\infty)=\\lim_{x \\to -\\infty}F(x)=0 \\\\ F(\\infty)=\\lim_{x \\to \\infty}F(x)=1 \\end{align*} right continuity $F(x)$ is the right-continuous function of $x$, that is to say, for any $x_0$, \\lim_{x \\to x_0}F(x)=F(x_0) \\\\ F(x_0+0)=F(x_0) These three fundamental properties are necessary and sufficient conditions whether a function is a distribution function. Mass &amp; Density FunctionFor a discrete random variable $X$, the probability can be values like $x_1, x_2,…,x_n,…$, then the probability of $X$ equals $x_i$: p_i = p_i(x_i)=P(X=x_i),~~i=1,2,...,n,...is called the sequence of probability distribution, or the probability mass function of $X$. The abbreviation is PMF. And the cumulative distribution function of $X​$ is: F(x)=\\sum_{x_i \\leq x}p(x_i)For a continuous random variable $X$, the cumulative distribution function of is $F(x)$, if $\\exists$ a nonnegative integrable function $p(x)$, such that for any real number $x$, F(x)=\\int_{-\\infty}^{x}p(t)dtthen $p(x)$ is called the probability density function of $X$, sometimes the a shorter name is density or PDF. And here are two fundamental properties to determine whether a function is a probability density function or not. non-negativity p(x) \\geq 0 regularity \\int_{-\\infty}^{\\infty}p(x)dx=1Expected ValuesIf X is a random variable whose possible values are $x_1, x_2,…,x_n​$, then the expected value of $X​$, denoted by $E[X]​$, is defined by \\begin{equation*} E[X] = \\displaystyle{\\sum_{j=1}^{n}}~{x_j}P\\{X = x_j\\} \\end{equation*}$E[X]​$ also has alternative names: expectation or the mean of $X​$. It is a kind of weighted average of possible values of $X​$, where the weight given to a value is equal to the probability that $X​$ assumes that value. Actually we can define it more accurately. For an infinite sequence of discrete random variables $p(x_i)=P(X=x_i), i=1,2,…,n,…$, if \\sum_{i=1}^{\\infty}|x_i|p(x_i)","categories":[{"name":"Mathematics","slug":"Mathematics","permalink":"http://yoursite.com/categories/Mathematics/"},{"name":"Probability","slug":"Mathematics/Probability","permalink":"http://yoursite.com/categories/Mathematics/Probability/"},{"name":"Probability Theory","slug":"Mathematics/Probability/Probability-Theory","permalink":"http://yoursite.com/categories/Mathematics/Probability/Probability-Theory/"}],"tags":[{"name":"Probability","slug":"Probability","permalink":"http://yoursite.com/tags/Probability/"},{"name":"Statistics","slug":"Statistics","permalink":"http://yoursite.com/tags/Statistics/"}]},{"title":"NYU Tandon Webinar","slug":"NYU Tandon Webinar","date":"2019-02-11T16:00:00.000Z","updated":"2019-02-12T16:29:34.943Z","comments":true,"path":"2019/02/11/NYU Tandon Webinar/","link":"","permalink":"http://yoursite.com/2019/02/11/NYU Tandon Webinar/","excerpt":"","text":"NYU Tandon Engineering Admitted Student Webinar I attended the NYU Engineering Webinar which introduces some basic information of NYU as well as Tandon Engineering school, life in NYC, future opportunities and the next steps for admitted students. Here are some impressive slides. NYU has 3 portal campuses and 11 global academic centers where NYU students have access to the academic resources. Numbers of NYU speak for themselves. The life in New York city will be fabulous. The value of graduates from NYU Tandon School of Engineering The cost is a relatively tremendous burden for me and my family, which push me a lot. Finally, here is a quote from Andrew Hamilton, NYU President, I want to share with you. Here at NYU, we should remind ourselves who are we as a community: We reject intimidation and discrimination; we strive for diversity and inclusiveness; and we are a community in which each person takes as his or her responsibility the welfare and well-being of others, irrespective of citizenship, faith, race, national origin, gender, sexual orientation, or any of the other identities that might, but surely need not, divide us. Such a varied and inclusive culture in NYU really fascinates me.","categories":[{"name":"Thoughts","slug":"Thoughts","permalink":"http://yoursite.com/categories/Thoughts/"},{"name":"Personal Journals","slug":"Thoughts/Personal-Journals","permalink":"http://yoursite.com/categories/Thoughts/Personal-Journals/"}],"tags":[{"name":"Journal","slug":"Journal","permalink":"http://yoursite.com/tags/Journal/"}]},{"title":"Verbal Advantage Level 2","slug":"Level 2","date":"2019-02-10T16:00:00.000Z","updated":"2019-03-21T10:30:02.693Z","comments":true,"path":"2019/02/10/Level 2/","link":"","permalink":"http://yoursite.com/2019/02/10/Level 2/","excerpt":"","text":"advocate support, plead for, be in favor of, defend by argument synonym: champion, endorse, espouse compare: vocation avocation vocational convoke: convocation: calling together and been summoned evoke: call out, call forth, summon evocative: calling forth a response tips: an advocate to advocate delegate entrust with authority or power, deliver to another’s care or management tips: the executive director delegated various managerial duties to her assistant. our department chief has trouble letting go of the reins and delegating responsibility. unprecedented unheard-of, novel, new, having no precedent pr parallel, having no prior example compare: precedent unprecedented: without a precedent poignant piercing, sharp, biting, penetrating, keen tips: keenly affecting the senses a poignant odor, poignant beauty, a poignant look penetrating to the feelings, emotionally touching, painfully moving a poignant drama, a poignant family reunion biting, cutting, acute, piercingly effective poignant wit, poignant delight, poignant critique compare: puncture: pierce pungent: piercing to the smell or taste expunge: punch out, erase, delete the editor expunged all potentially offensive and derogatory material from the book nebulous unclear, vague, obscure, hazy, indefinite, indistinct tips: nebula: nebulae[pl] nebular: cloudy, misty, vaporous nebulous: vague, indefinite, unclear nebulous writing, nebulous idea, nebulous purpose or goal clandestine kept secret, done in secrecy, especially for an evil, immoral, or illegal purpose synonyms: private, concealed, covert, underhand, sly, stealthy, furtive, surreptitious tips: a clandestine affair a clandestine business deal a clandestine intelligence operation tirade a long-drawn-out speech, especially a vehement and abusive one (protracted, vituperative, censorious) tips: after suffering through yet another one of his boss’s frequent tirades, Joe decided it was time to quit and move on. recur happen again, occur again, especially at intervals or after some lapse of time. compare: reoccur: suggests a one-time repetition recur: suggests repetition more than once tacit unspoken, silent, implied, understood without words tips: a tacit consent: approval given without words a tacit agreement: unspoken understanding taciturn, reserved, uncommunicative, inclined to hold one’s tongue allegation an assertion or declaration, especially one made without proof tips: law: an assertion of what one intends to prove The judge dismissed the allegations. a spokesperson for the company today denied the allegations of wrongdoing regarding the firm’s hiring practices. gullible easily deceived, fooled, or cheated compare: credulous: willing to accept something as true without questioning gull: take advantage of someone who is foolish, unwary or inexperienced dupe: unwariness on the part of the victim benign kindly, good-natured, gracious, mild, having or showing a gentle disposition tips: a benign old man, benign smile, benign intention, a benign government favorable, positive, propitious a benign omen, benign view a benign weather/climate a benign tumor, a benign disease peripheral external, outer, lying at or forming the outside or boundary of something -&gt; not essential, irrelevant tips: periphery: boundary, external surface or area literally: exploring the periphery of the polar icecap figuratively: the periphery of consciousness, the periphery of one’s sphere of influence peripheral: in the literal sense: lying at the edge, on the boundary in the figurative sense: peripheral issues, peripheral points, peripheral considerations rebuff refuse bluntly, reject sharply, turn down abruptly, snub, spurn tips: in colloquial terms: rebuff means to give the cold shoulder to, slam the door on animosity ill will, hostility, antagonism, strong dislike or hatred tips: There was long-standing animosity between the two families after her coworker apologized for his rude remarks, she resolved not to harbor any animosity toward him. synonyms: malice, aversion, malevolence, antipathy, rancor, enmity tenuous thin, slender, slight, flimsy, weak, not dese or substantial, lacking a strong basis. tips: scientific: air is tenuous/thin. Certain fluids or compounds are said to be tenuous a tenuous grip, a tenuous proposal, a tenuous argument, tenuous construction complacent self-satisfied, smug, overly pleased with oneself tips: A complacent smile is a smug, self-satisfied smile. A complacent behavior is self-centered and disregards others’ concerns. A complacent ignorant person is completely satisfied with his ignorance. compare: complaisant: inclined to please, gracious, obliging, courteous, affable, urbane.(positive connotation) complacent:(negative connotation) acme peak, highest point, summit, zenith, especially the point of culmination, the highest possible point in the development or progress of something. tips: figuratively: the acme of his career a company at the acme of the industry acmatic acmatic scientific breakthrough antonym: nadir defunct dead, extinct, obsolete, no longer in existence, effect, operation, use tips: defunct law defunct organization defunct factory/procedure defunct species/person defunct expression/idea abet encourage, support, help, aid, promote, assist in achieving a purpose tips: especially to encourage or assist in wrongdoing to aid and abet: assist a criminal in the commission of a crime favorably: to abet the cause of justice to abet the committee’s efforts to get the plan approved haggard worn out, tired, gaunt, drawn, emaciated tips: a person who is haggard has a wild-eyed and wasted look, as from exhaustion, illness, or grief. long hours at work, lack of sleep, or inadequate nutrition can easily make you haggard, worn out, tired and gaunt. waive relinquish voluntarily, give up, forgo compare: relinquish: giving up something one doesn’t want to part with, either out of necessity or because one has been compelled or forced relinquish possession relinquish command waive: voluntary refusal to insist on one’s right or claim to something waive one’s right to a trial by jury waive one’s claim on a title or property tips: also meaning: postpone, defer, dispense with waive discussion, to waive formalities and get on with business carnal bodily, pertaining to the flesh as opposed to the spirit, sensual, corporeal tips: not used to mean bodily in neutral sense. Wrong using: carnal functions, carnal aches, pains refer to basic physical appetites of the body, especially the sexual appetite carnal desires, carnal lust, carnal knowledge sanction approve, allow, permit, authorize, certify, ratify compare: ratify: officially approve something done by a representative ratify a treaty certify: officially approve compliance with requirements or standards a certified public accountant sanction: give authoritative approval: the company’s board of directors sanctioned the merger. many religions do not sanction unmarried sexual relations. law sanctions free speech but not antisocial behavior. ambiguous uncertain, unclear, doubtful, dubious, questionable, puzzling, having an obscure or indefinite meaning tips: ambiguous intention ambiguous statement synonyms: enigmatic, cryptic, equivocal antonyms: distinct, apparent, evident, conspicuous, manifest spendthrift wasteful, spending extravagantly or foolishly, squandering one’s resources tips: adjective: His spendthrift habits noun: a wasteful person, someone who foolishly squanders money or resources compare: improvident: literally not provident, not providing for the future improvident person does not save money for retirement prodigal: spending money in a reckless or extravagant way, to support a lavish or luxurious lifestyle profligate: extremely prodigal or spendthrift, a person who spends money with reckless abandon and lives a life shamelessly devoted to pleasure. a profligate Hollywood movie star mollify calm, soothe, pacify, appease, soften in feeling or tone, make less harsh or severe tips: emollient adj: softening, soothing, mollifying n: softening or soothing agent literally: make soft or tender mollify meat, tenderize it soften in feeling or tone mollify their demands, mollify conflicts, mollify Jack who is furious unequivocal clear and direct, definite, straightforward, certain, a single obvious meaning tip: reporters are so accustomed to equivocal answers from government officials that they are often surprised and suspicious when they get an unequivocal response. malleable capable of being shaped, molded or manipulated, adaptable impressionable tips: literally: certain metals are malleable. figuratively: person or abstract thing that can be molded or shaped malleable, impressionable, capable of being shaped an idea my be malleable, adaptable, capable of being shaped to fit various purposed. compare: tractable: can be pulled or hauled a tractable person is manageable, easily handled. malleable: can be hammered into shape a malleable person is adaptable, impressionable. antonyms: inflexible, unyielding, stubborn, obstinate, intransigent verbose wordy, having too many words, long-winded, full of verbiage synonyms: garrulous, loquacious, voluble, prolix tips: speech or writing that uses more words than necessary. compare: verbiage: n full of verbiage verbal: expressed in words, either orally or in writing verbal agreement, verbal understanding verbose: adj transient temporary, passing away with time, lasting only a short while, momentary, fleeting, short-lived compare: transitory: by its nature is bound to pass away or come to an end. All life must by nature end: life is transitory transitory nature of fame evanescent: fades away like vapor or vanishes as if into thin air evanescent beauty of springtime flowers an evanescent trail of light evanescent experience can become a lifelong memory ephemeral: living or lasting for only a day ephemeral literature: newspaper writing ephemeral memory for names fugitive: flee, run or fly away a fugitive smile; the fugitive colors of the sunset fugacious: fleeting, things that are elusive our fugacious memories of childhood permanent, timeless, eternal, and everlasting nettle irritate, annoy, vex, harass, pester, provoke supervisor constantly nettled them about trivial or irrelevant detail tips: plant: tiny hairs that sting and irritate the skin verb: sting like a nettle someone who is nettled to the point of silent anger or resentment repudiate reject, cast off, disown, renounce, refuse to accept as one’s own, reject as false, deny the authority, refuse to accept as true tips: repudiate a child, reject or disown the child repudiate a belief, cast it off or renounce it repudiate a claim, deny its authority repudiate a charge, reject it as untrue impetuous hasty, rash, overeager, acting in a sudden, vigorous, emotional way, with little thought The impetuous shopper buys on impulse a prudent investor is not likely to make impetuous decision compare: rash: reckless haste and foolish daring rash statements can lead to war impulsive: ungovernable inner force that drives one to act without thinking he is an impulsive talker who often puts his foot in his mouth impetuous: great energy eagerness or impatience children are often impetuous antonyms: prudent, circumspect frugal spending carefully and wisely, thrifty, economical frugal people are cautious and sparing with the fruit of their labors. compare: thrifty: hard work, good management as a means to prosperity The thrifty person spends only what is necessary and diligently saves the rest. economical: the use of money or resources in the most advantageous way. economical car uses fuel efficiently economical investment is one that generates a higher return provident: providing for the future. provident person spends carefully with a mind toward what may be needed later parsimonious: extremely frugal, stingy, miserly the parsimonious person keeps a wary eye on every nickel and dime. frugal: spending carefully, involving little expense, not wasteful or lavish a frugal meal is an economical, no-frills meal. flying coach rather than first-class is a more frugal way to travel incongruous out of place, inappropriate, inconsistent, unsuitable, lacking harmony of parts or agreement in character incongruous remark: inappropriate or not in keeping with the conversation incongruous element is out of place, not consistent with the elements around it incongruous action, incongruous mixture assuage relieve, ease, allay, mitigate, make less severe or intense; to satisfy, appease, make content assuage someone’s anger/pain/fears: relieve those conditions, allay them, make them less severe or intense. assuage one’s hunger or thirst assuage one’s need or desire corroborate to confirm, support, make more certain or believable compare: authenticate: establish sth. as authentic or genuine authenticate a document, a signature, or a work of art verify: establish as true, confirm the accuracy of reporters have responsibility to verify facts and quotations. substantiate: support by supplying reliable evidence or proof scholars and scientist must substantiate their theories. investigation uncovered several key facts that substantiated the case against the company. corroborate: substantiate what someone else has said by supplying additional evidence or proof corroborate one’s statement embellish decorate, dress up, adorn, enhance with ornamentation, make more beautiful, elegant or interesting embellish one’s home, an outfit, one’s speech, a story tips: embellishment avaricious greedy, money-grubbing, miserly, consumed with a selfish desire to accumulate money or property compare:(acquire more than they have or are entitled to have) greedy: general term for an excessive dire for anything be greedy for approval/success a greedy eater covetous: an excessive and sometimes immoral desire for what another person has be covetous of one’s new car / attractive wife / spacious office and impressive salary. avaricious: an excessive and selfish drive to accumulate wealth and valuable possessions, with an accompanying desire to hoard them avaricious developers and bankers tips: avarice, greed, and inordinate desire for wealth cursory quick, hasty, not methodical, done rapidly with little attention to detail, passing quickly over or through something that deserves closer examination synonyms: hurried, haphazard, slapdash, superficial antonyms: thorough, careful, exhaustive, prolonged, protracted tips: a cursory glance, a cursory reading, a cursory explanation, a cursory investigation vacillate waver, fluctuate, be indecisive, show uncertainly, hesitate in making up one’s mind the strong leader is decisive; the weak leader vacillates when you vacillate, you go back and forth mentally on an issue or question clement mild, calm, tranquil, moderate, temperate, not severe or extreme; merciful, lenient, inclined to pardon or forgive weather is clement when it’s mild or temperate.(when rough or stormy it’s inclement) mild state of mind: inclined to be lenient or forgiving tips: noun: clemency, mildness, leniency, compassion lucrative profitable, producing wealth, money-making, financially productive, remunerative lucrative job pays well. lucrative business deal is profitable. lucrative enterprise is a money-making enterprise. allocate assign, designate, earmark, set aside for a specific purpose allocate a bedroom in the house as a home office allocate time to spend with children allocate funds for education, parks or libraries reconcile make friendly again, restore friendly relations between, settle, resolve, bring into harmony or agreement reconcile their differences reconciliation, a settlement, resolution, act of restoring harmony or agreement tips: bring into agreement, make consistent reconcile the confession of guilt with his profession of innocence resign oneself to accept something undesirable reconcile herself to live her mother-in-law paragon a model of excellence, perfect example the Gettysburg Address is a paragon of forceful, eloquent speechwriting. analogous similar, akin, comparable, corresponding partially, sharing some aspects of form, function or content. tips: analogy, not apply to things that are identical, just similar, alike in certain ways diurnal daily, recurring each day, performed or happening in the course of a day tips: the ocean’s tides and the rotation of the earth are diurnal diurnal duties are the tasks you perform every day diurnal complaint/ make doing sth. part of one’s diurnal routine pretext an excuse, ostensible reason or motive, professed purpose tips: tyrannical leaders often invent pretexts for invading or declaring war on other countries irresponsible employees will invent pretexts for not coming to work supervisor who hates an employee’s guts may try to come up with a pretext for firing the person","categories":[{"name":"Languages","slug":"Languages","permalink":"http://yoursite.com/categories/Languages/"},{"name":"English","slug":"Languages/English","permalink":"http://yoursite.com/categories/Languages/English/"},{"name":"Verbal Advantage","slug":"Languages/English/Verbal-Advantage","permalink":"http://yoursite.com/categories/Languages/English/Verbal-Advantage/"}],"tags":[{"name":"English","slug":"English","permalink":"http://yoursite.com/tags/English/"},{"name":"Vocabularies","slug":"Vocabularies","permalink":"http://yoursite.com/tags/Vocabularies/"}]},{"title":"C++ Class","slug":"C++ Class","date":"2019-01-31T16:00:00.000Z","updated":"2019-02-01T09:33:51.328Z","comments":true,"path":"2019/01/31/C++ Class/","link":"","permalink":"http://yoursite.com/2019/01/31/C++ Class/","excerpt":"","text":"This note contains basic knowledge of class and objects in C++ including characteristics, definition, constructor, destructor, sturcture, union and enumeration class. characteristics of object-oriented programming1. abstract2. encapsulation3. inheritance4. polymorphismdefinition of class and object1. classsyntax: class Name{ public: public member (which is also external interface) private: private member protected: protected member} tips: Members can be provided with default values when defined. The members without default values will be initialized. 2. objectsyntax: 1. definition class Name object Name; 2. access public members object Name.member Name 3. member function in classsyntax: class Name::Name{ tips: declare the function prototype in the class definition the function body can be defined outside the class with class name to qualify. the function can be defined in the class as an inline function. define a class of clock. #include &lt;iostream&gt; using namespace std; class Clock { public: void setTime(int newH = 0, int newM = 0, int newS = 0); void showTime(); private: int hour, minute, second; }; void Clock::setTime(int newH, int newM, int newS) { hour = newH; minute = newM; second = newS; } inline void Clock::showTime() { cout &lt;&lt; hour &lt;&lt; &quot;:&quot; &lt;&lt; minute &lt;&lt; &quot;:&quot; &lt;&lt; second &lt;&lt; endl; } int main() { Clock myClock; cout &lt;&lt; &quot;First time set and output:&quot; &lt;&lt; endl; myClock.setTime(); myClock.showTime(); cout &lt;&lt; &quot;Second time set and output:&quot; &lt;&lt; endl; myClock.setTime(8, 30, 30); myClock.showTime(); return 0; } constructorsyntax: tips: class Clock { public: Clock() =default; //default constructor Clock(int newH, int newM, int newS); //constructor private: int hour, minute, second; }; define a class of clock with a constructor. #include &lt;iostream&gt; using namespace std; class Clock { public: Clock(int newH, int newM, int newS); void setTime(int newH, int newM, int newS); void showTime(); private: int hour, minute, second; }; Clock::Clock(int newH, int newM, int newS): hour(newH), minute(newM), second(newS){ } void Clock::setTime(int newH, int newM, int newS) { hour = newH; minute = newM; second = newS; } inline void Clock::showTime() { cout &lt;&lt; hour &lt;&lt; &quot;:&quot; &lt;&lt; minute &lt;&lt; &quot;:&quot; &lt;&lt; second &lt;&lt; endl; } int main() { Clock c(0,0,0); c.showTime(); return 0; } define a class of clock with a constructor and a default constructor. #include &lt;iostream&gt; using namespace std; class Clock { public: Clock(int newH, int newM, int newS); Clock(); void setTime(int newH, int newM, int newS); void showTime(); private: int hour, minute, second; }; Clock::Clock():hour(0), minute(0), second(0){ } Clock::Clock(int newH, int newM, int newS): hour(newH), minute(newM), second(newS){ } void Clock::setTime(int newH, int newM, int newS) { hour = newH; minute = newM; second = newS; } inline void Clock::showTime() { cout &lt;&lt; hour &lt;&lt; &quot;:&quot; &lt;&lt; minute &lt;&lt; &quot;:&quot; &lt;&lt; second &lt;&lt; endl; } int main() { Clock c(8,10,0); Clock c2; c.showTime(); c2.showTime(); return 0; } delegating constructorssyntax: tips: delegating constructors help to maintain the constancy of codes. // 2 constructors Clock(int newH, int newM, int newS): hour(newH), minute(newM), second(newS){ } Clock::Clock(): hour(0),minute(0),second(0) { } // delegating constructors Clock(int newH, int newM, int newS): hour(newH),minute(newM), second(newS){ } Clock(): Clock(0, 0, 0) { } copy constructorsyntax: 1. create class class Name{ public: class Name(parameter); class Name(const class Name &amp; object Name);} class Name::class Name(const class Name &amp; object Name){} 2. delete class Name(const class Name &amp; object Name) = delete class Point { public: Point(int xx=0, int yy=0) { x = xx; y = yy; } //constructor, inline Point(const Point&amp; p) =delete; //don&#39;t create default copy constructor private: int x, y; }; tips: 3 conditions that copy constructors will be invoked: 1 2 3 destructorsyntax: ~class Name #include &lt;iostream&gt; using namespace std; class Point{ public: Point(int xx, int yy); ~Point(); private: int x, y; }; Point::Point(int xx, int yy){ x = xx; y = yy; } Point::~Point(){ } tips: The destructor will be invoked when the object disappears. combination of classsyntax: class Name::class Name(parameters of members in the object, parameters of members in this class) : object1(parameter), object2(parameter),…{ function body} tips: the order of initialization: the member which is declared first will be constructed first. create a line class using point class #include &lt;iostream&gt; #include &lt;cmath&gt; using namespace std; class Point { public: Point(int xx = 0, int yy = 0) { x = xx; y = yy; } Point(Point &amp;p); int getX() { return x; } int getY() { return y; } private: int x, y; }; Point::Point(Point &amp;p) { x = p.x; y = p.y; cout &lt;&lt; &quot;Calling the copy constructor of Point&quot; &lt;&lt; endl; } //combination of class class Line { public: Line(Point xp1, Point xp2); Line(Line &amp;l); double getLen() { return len; } private: Point p1, p2; double len; }; //constructor of the combination class Line::Line(Point xp1, Point xp2) : p1(xp1), p2(xp2) { cout &lt;&lt; &quot;Calling constructor of Line&quot; &lt;&lt; endl; double x = static_cast&lt;double&gt;(p1.getX() - p2.getX()); double y = static_cast&lt;double&gt;(p1.getY() - p2.getY()); len = sqrt(x * x + y * y); } //copy constructor of the combination class Line::Line (Line &amp;l): p1(l.p1), p2(l.p2) { cout &lt;&lt; &quot;Calling the copy constructor of Line&quot; &lt;&lt; endl; len = l.len; } int main() { Point myp1(1, 1), myp2(4, 5); //build Point objects Line line(myp1, myp2); //build Line objects Line line2(line); //use copy constructor of the combination class to build a new object cout &lt;&lt; &quot;The length of the line is: &quot;; cout &lt;&lt; line.getLen() &lt;&lt; endl; cout &lt;&lt; &quot;The length of the line2 is: &quot;; cout &lt;&lt; line2.getLen() &lt;&lt; endl; return 0; } preceding reference declarationtips: declare a class name before define another class. class B; class A { public: void f(B b); }; class B { public: void g(A a); }; cannot be involved with details of this declared class: class Fred; class Barney { Fred x; }; class Fred { Barney y; }; UML introductionbasic elements Things Relationships Diagrams Structuressyntax: struct Name{ public membersprotected: protected membersprivate: private members}; tips: default members in structures is public, and can be data members or function members. Students’ basic information #include &lt;iostream&gt; #include &lt;iomanip&gt; #include &lt;string&gt; using namespace std; struct Student { int num; string name; char sex; int age; }; int main() { Student stu = { 97001, &quot;Lin Lin&quot;, &#39;F&#39;, 19 }; cout &lt;&lt; &quot;Num: &quot; &lt;&lt; stu.num &lt;&lt; endl; cout &lt;&lt; &quot;Name: &quot; &lt;&lt; stu.name &lt;&lt; endl; cout &lt;&lt; &quot;Sex: &quot; &lt;&lt; stu.sex &lt;&lt; endl; cout &lt;&lt; &quot;Age: &quot; &lt;&lt; stu.age &lt;&lt; endl; return 0; } unionssyntax: union Name{ public membersprotected: protected membersprivate: private members}; tips: members in unions share the storage space, therefore there is only one effective member at the same time. The storage space is determined by the largest space demand members. Student’s mark union Mark{ char grade; //class grade: A, B, C, D, F bool pass; //pass or fail int percent; //hundred mark }; anonymous unionsunion { int i; float f; } tips: i and f will share the storage space. Student’s mark information #include &lt;string&gt; #include &lt;iostream&gt; using namespace std; class ExamInfo { public: ExamInfo(string name, char grade) : name(name), mode(GRADE), grade(grade) { } ExamInfo(string name, bool pass) : name(name), mode(PASS), pass(pass) { } ExamInfo(string name, int percent) : name(name), mode(PERCENTAGE), percent(percent) { } void show(); private: string name; enum { GRADE, PASS, PERCENTAGE } mode; union { char grade; bool pass; int percent; }; }; void ExamInfo::show() { cout &lt;&lt; name &lt;&lt; &quot;: &quot;; switch (mode) { case GRADE: cout &lt;&lt; grade; break; case PASS: cout &lt;&lt; (pass ? &quot;PASS&quot; : &quot;FAIL&quot;); break; case PERCENTAGE: cout &lt;&lt; percent; break; } cout &lt;&lt; endl; } int main() { ExamInfo course1(&quot;English&quot;, &#39;B&#39;); ExamInfo course2(&quot;Calculus&quot;, true); ExamInfo course3(&quot;C++ Programming&quot;, 85); course1.show(); course2.show(); course3.show(); return 0; } enumeration classsyntax: enum class Name: Type name{ enumeration list }; enum class Type {General, Light, Medium, Heavy}; enum class Type: char {General, Light, Medium, Heavy}; enum class Category {General=1, Pistol, MachineGun, Cannon}; Name::enumeration element Type::General tips: the Type name can be defined as int, char, double etc. The default is int. Strong scope Strict #include&lt;iostream&gt; using namespace std; enum class Side{ Right, Left }; enum class Thing{ Wrong, Right }; int main(){ Side s = Side::Right; Thing w = Thing::Wrong; cout &lt;&lt; (s == w) &lt;&lt; endl; return 0; }","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Programming","slug":"Computer-Science/Programming","permalink":"http://yoursite.com/categories/Computer-Science/Programming/"},{"name":"C++","slug":"Computer-Science/Programming/C","permalink":"http://yoursite.com/categories/Computer-Science/Programming/C/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"},{"name":"MOOC","slug":"MOOC","permalink":"http://yoursite.com/tags/MOOC/"}]},{"title":"C++ Data Share & Protection","slug":"C++ Data Share & Protection","date":"2019-01-31T16:00:00.000Z","updated":"2019-02-27T02:59:52.323Z","comments":true,"path":"2019/01/31/C++ Data Share & Protection/","link":"","permalink":"http://yoursite.com/2019/01/31/C++ Data Share & Protection/","excerpt":"","text":"This note contains basic knowledge of data share and protection in C++ including. Scope classification function prototype scope 1double area(double radius) local scope 12345678void fun(int a) &#123; int b = a; cin &gt;&gt; b; if (b &gt; 0) &#123; int c; ...... &#125;&#125; global scope file scope visibility 1234567891011121314#include using namespace std; int i; //global variable，file scopeint main() &#123; i = 5; //i is a global variable (external) &#123; int i; //local scope (inner) i = 7; cout &lt;&lt; \"i = \" &lt;&lt; i &lt;&lt; endl;//output 7 &#125; cout &lt;&lt; “i = ” &lt;&lt; i &lt;&lt; endl;//output 5 return 0;&#125; Lifetime static lifetime local lifetime 123456789101112131415161718192021222324252627282930#include&lt;iostream&gt;using namespace std;int i = 1; // i is global variable with static lifetime and global visibility.void other() &#123; static int a = 2; static int b; // a,b are static local variables, with static lifetime and local visibility // a,b will be initialized only at the first time int c = 10; // c is a local variable with local lifetime and local visibility //c will be initialized every time the \"other function\" is about to run. a += 2; i += 32; c += 5; cout&lt;&lt;\"---OTHER---\\n\"; cout&lt;&lt;\" i: \"&lt;&lt;i&lt;&lt;\" a: \"&lt;&lt;a&lt;&lt;\" b: \"&lt;&lt;b&lt;&lt;\" c: \"&lt;&lt;c&lt;&lt;endl; b = a;&#125;int main() &#123; static int a;//a is static local variable with static lifetime and local visibility int b = -10; // b, c are local variables with local lifetime int c = 0; cout &lt;&lt; \"---MAIN---\\n\"; cout&lt;&lt;\" i: \"&lt;&lt;i&lt;&lt;\" a: \"&lt;&lt;a&lt;&lt;\" b: \"&lt;&lt;b&lt;&lt;\" c: \"&lt;&lt;c&lt;&lt;endl; c += 8; other(); cout&lt;&lt;\"---MAIN---\\n\"; cout&lt;&lt;\" i: \"&lt;&lt;i&lt;&lt;\" a: \"&lt;&lt;a&lt;&lt;\" b: \"&lt;&lt;b&lt;&lt;\" c: \"&lt;&lt;c&lt;&lt;endl; i += 10; other(); return 0;&#125; The result is below: 12345678---MAIN---i: 1 a: 0 b: -10 c: 0---OTHER---i: 33 a: 4 b: 0 c: 15---MAIN---i: 33 a: 0 b: -10 c: 8---OTHER---i: 75 a: 6 b: 4 c: 15 Friend Function &amp; Classfriend function 123456789101112131415161718192021222324#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;class Point &#123; //Point类声明public: //外部接口 Point(int x=0, int y=0) : x(x), y(y) &#123; &#125; int getX() &#123; return x; &#125; int getY() &#123; return y; &#125; friend float dist(Point &amp;a, Point &amp;b);private: //私有数据成员 int x, y;&#125;;float dist(Point&amp; a, Point&amp; b) &#123; double x = a.x - b.x; double y = a.y - b.y; return static_cast&lt;float&gt;(sqrt(x * x + y * y));&#125;int main() &#123; Point p1(1, 1), p2(4, 5); cout &lt;&lt;\"The distance is: \"; cout &lt;&lt; dist(p1, p2) &lt;&lt; endl; return 0;&#125; friend class12345678910111213141516171819202122232425class A &#123; friend class B;public: void display() &#123; cout &lt;&lt; x &lt;&lt; endl;&#125;private: int x;&#125;class B &#123;public: void set(int i); void display();private: A a;&#125;;void B::set(int i) &#123; a.x=i;&#125;void B::display() &#123; a.display();&#125;; tips: The friend function and class is a one-direction relationship. Shared Data Protectionconst object12345678class A&#123;public: A(int i,int j) &#123;x=i; y=j;&#125; ...private: int x,y;&#125;;A const a(3,4); const function123456789101112131415161718192021222324252627#include&lt;iostream&gt;using namespace std;class R &#123;public: R(int r1, int r2) : r1(r1), r2(r2) &#123; &#125; void print(); void print() const;private: int r1, r2;&#125;;void R::print() &#123; cout &lt;&lt; r1 &lt;&lt; \":\" &lt;&lt; r2 &lt;&lt; endl;&#125;void R::print() const &#123; cout &lt;&lt; r1 &lt;&lt; \";\" &lt;&lt; r2 &lt;&lt; endl;&#125;int main() &#123; R a(5,4); a.print(); //调用void print() const R b(20,52); b.print(); //调用void print() const return 0;&#125; const member123456789101112131415161718192021222324#include &lt;iostream&gt;using namespace std;class A &#123;public: A(int i); void print();private: const int a; static const int b;&#125;;const int A::b=10;A::A(int i) : a(i) &#123; &#125;void A::print() &#123; cout &lt;&lt; a &lt;&lt; \":\" &lt;&lt; b &lt;&lt;endl;&#125;int main() &#123;//建立对象a和b，并以100和0作为初值，分别调用构造函数，//通过构造函数的初始化列表给对象的常数据成员赋初值 A a1(100), a2(0); a1.print(); a2.print(); return 0;&#125; const reference123456789101112131415161718192021222324#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;class Point&#123;public: Point(int x = 0, int y = 0) : x(x), y(y) &#123; &#125; int getX() &#123; return x; &#125; int getY() &#123; return y; &#125; friend float dist(const Point &amp;p1,const Point &amp;p2);private: int x, y;&#125;;float dist(const Point &amp;p1, const Point &amp;p2) &#123; double x = p1.x - p2.x; double y = p1.y - p2.y; return static_cast&lt;float&gt;(sqrt(x*x+y*y));&#125;int main()&#123; const Point myp1(1, 1), myp2(4, 5); cout &lt;&lt; \"The distance is: \"; cout &lt;&lt; dist(myp1, myp2) &lt;&lt; endl; return 0;&#125;","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Programming","slug":"Computer-Science/Programming","permalink":"http://yoursite.com/categories/Computer-Science/Programming/"},{"name":"C++","slug":"Computer-Science/Programming/C","permalink":"http://yoursite.com/categories/Computer-Science/Programming/C/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"},{"name":"MOOC","slug":"MOOC","permalink":"http://yoursite.com/tags/MOOC/"}]},{"title":"Probability Basics","slug":"Probability Basics","date":"2019-01-31T05:00:00.000Z","updated":"2019-08-13T02:35:18.903Z","comments":true,"path":"2019/01/31/Probability Basics/","link":"","permalink":"http://yoursite.com/2019/01/31/Probability Basics/","excerpt":"","text":"This note contains basic knowledge of probability, including events, probability, conditional probability, multiplication theorem of probability, formula of total probability and Bayes’ theorem. Probability SpaceFinite Sample SpaceGenerally, a set of all the possible results of a certain experiment $S$ is call the sample space, which is denoted as $\\Omega$. All the results of the experiment, which are also in the $\\Omega$ are called the sample point, denoted as $\\omega$. \\Omega = \\{\\omega|\\omega ~ \\text{are sample points of the experiment S} \\}Classical Model of ProbabilityConsider an experiment with a finite sample space $\\Omega = \\{\\omega_1,\\omega_2,…,\\omega_m\\}$. Suppose that there are numbers $p_1, p_2, …, p_m​$ with p_i \\geq 0, ~ i = 1, 2,..., m, ~~ and ~~ \\displaystyle{\\sum\\limits_{i=1}^m}p_i = 1 ​and such that $p_i​$ is the probability that $i​$ is the outcome of the experiment $S​$. Any set of possible outcomes of the experiment is called an event. If $P(A)​$ denote the probability that event A occurs, then \\begin{equation*} P(A) = \\sum_{i \\in A} ~ p_i = \\frac{\\text{number of elements in event A}}{\\text{total number of elements in sample space $\\Omega$}} \\end{equation*}If these $p_1,p_2,…,p_m$ all exist with each other, this situation is called the classical model of probability. And we can easily deduce that \\begin{equation*} P(S) = \\sum_{i} ~ p_i = 1 \\end{equation*}For any event $A$, let $A^c$, called the complement of $A$, be the event containing all those outcomes in $S$ that are not in $A$. That is, $A^c$ occurs if and only if $A$ does not. Since \\begin{align*} 1 &= \\displaystyle{\\sum_{i}} ~ p_i \\\\ &= \\displaystyle{\\sum_{i \\in A}} ~ p_i + \\displaystyle{\\sum_{i \\in A^c}} ~ p_i \\\\ &= P(A) + P(A^c) \\\\ \\end{align*}So it implies that \\begin{equation*} P(A^c) = 1 - P(A) \\end{equation*}For $ \\varnothing = S^c $, we can obtain that \\begin{equation*} P(\\varnothing) = 0 \\end{equation*}Based on simple principle of set theory, \\begin{align*} A \\cup B &= A + B\\bar{A} \\\\ A &= AB+A\\bar{B} \\\\ &= A(B+\\bar{B}) \\end{align*}for any events $A$ and $B$, we can write \\begin{align*} P(A \\cup B) &= \\displaystyle{\\sum_{i \\in A \\cup B}} ~ p_i \\\\ P(A) &= \\displaystyle{\\sum_{i \\in A}} ~ p_i \\\\ P(B) &= \\displaystyle{\\sum_{i \\in B}} ~ p_i \\\\ \\end{align*}And the addition theorem of probability for two events can be written that \\begin{align*} P(A \\cup B) &= P(A) + P(B) - P(A \\cap B) \\\\ P(E_1 \\cup E_2 \\cup E_N) &= \\sum_{i=1}^{N}P(E_i)-\\sum_{i_1","categories":[{"name":"Mathematics","slug":"Mathematics","permalink":"http://yoursite.com/categories/Mathematics/"},{"name":"Probability","slug":"Mathematics/Probability","permalink":"http://yoursite.com/categories/Mathematics/Probability/"},{"name":"Probability Theory","slug":"Mathematics/Probability/Probability-Theory","permalink":"http://yoursite.com/categories/Mathematics/Probability/Probability-Theory/"}],"tags":[{"name":"Probability","slug":"Probability","permalink":"http://yoursite.com/tags/Probability/"}]},{"title":"Real Number Theory","slug":"Real Number Theory","date":"2019-01-31T05:00:00.000Z","updated":"2020-01-10T16:42:51.303Z","comments":true,"path":"2019/01/31/Real Number Theory/","link":"","permalink":"http://yoursite.com/2019/01/31/Real Number Theory/","excerpt":"","text":"This note contains basic knowledge of Set, Some basic principles of the real number. Completeness of the Real NumbersExistence of supremum and infimumUpper Bound &amp; Lower Bound Upper Bound Let $S$ be a nonempty set of real numbers. If $ \\exists ~ M \\in R$, such that $ \\forall ~ x \\in S$, $x \\leq M $, then $M$ is called an upper bound for $S$, or $S$ has an upper bound. And $S$ is said to be bounded above. A set may have many upper bounds. Lower Bound Similarly, if $ \\exists ~ m \\in R$, such that $ \\forall ~ x \\in S$, $x \\geq m $, then $m$ is called an lower bound for $S$, or $S$ has an lower bound. And $S$ is said to be bounded below. A set may have many upper bounds and lower bounds. If a set $S$ has both upper bounds and lower bounds, then $S$ is called the bounded set. Evidently, it is equivalent to: \\exists ~ X > 0, such ~ that ~ \\forall ~ x \\in S, |x| \\leq XSupremum &amp; Infimum Supremum Let $U$ be a set of upper bounds of $S$. Obviously it has no maximum element. And let the minimum of $U$ be $\\beta$, then $\\beta$ is called the least upper bound of $S$, which is also called the supremum of $S$. It is denoted as \\beta = sup ~ SThere are two properties of supremum $\\beta$ $\\beta$ is an upper bound of $S$: $\\forall ~ x \\in S$, $x \\leq \\beta$. Any number that is less than $\\beta$ is not the upper bound of $S$: $\\forall ~ \\varepsilon &gt; 0$, $\\exists ~ x \\in S$, such that $x &gt; \\beta - \\varepsilon$. Infimum Similarly, let $L$ be a set of upper bounds of $S$. Obviously it has no minimum element. And let the maximum of $L$ be $\\alpha$, then $\\alpha$ is called the greatest lower bound of $S$, which is also called the infimum of $S$. It is denoted as \\alpha = inf ~ SThere are also two properties of infimum $\\alpha$ $\\alpha$ is an lower bound of $S$: $\\forall ~ x \\in S$, $x \\geq \\alpha$. Any number that is greater than $\\alpha$ is not the lower bound of $S$: $\\forall ~ \\varepsilon &gt; 0$, $\\exists ~ x \\in S$, such that $x &lt; \\alpha + \\varepsilon$. Supremum and Infimum Theorem A nonempty set of real numbers that’s bounded above has supremum. A nonempty set of real numbers that’s bounded below has infimum. This theorem, which is crucial for establishing many of the important theorems of calculus and real analysis, is one of the basic theorems of the real number system.","categories":[{"name":"Mathematics","slug":"Mathematics","permalink":"http://yoursite.com/categories/Mathematics/"},{"name":"Analysis","slug":"Mathematics/Analysis","permalink":"http://yoursite.com/categories/Mathematics/Analysis/"}],"tags":[{"name":"Calculus","slug":"Calculus","permalink":"http://yoursite.com/tags/Calculus/"},{"name":"Real Analysis","slug":"Real-Analysis","permalink":"http://yoursite.com/tags/Real-Analysis/"}]},{"title":"Limit and Continuity","slug":"Limit and Continuity","date":"2019-01-31T05:00:00.000Z","updated":"2020-01-10T16:43:17.317Z","comments":true,"path":"2019/01/31/Limit and Continuity/","link":"","permalink":"http://yoursite.com/2019/01/31/Limit and Continuity/","excerpt":"","text":"This note contains basic knowledge of Limit and Continuity. Limits of SequencesDefinitionA sequence is an infinite or finite ordered list of terms base on the positive number index: x_1, x_2,...,x_n,...It is usually denoted as $\\{x_n\\}$, and $x_n$ is called the general term. And the limits of sequences can be rigorously defined as this: Let $\\{ x_n \\}$ is a given sequence, $a$ is a constant. If $\\forall $ given $\\varepsilon &gt; 0$, $\\exists$ a positive integer $N$, such that when $n &gt; N$ there is |x_n - a|","categories":[{"name":"Mathematics","slug":"Mathematics","permalink":"http://yoursite.com/categories/Mathematics/"},{"name":"Analysis","slug":"Mathematics/Analysis","permalink":"http://yoursite.com/categories/Mathematics/Analysis/"}],"tags":[{"name":"Calculus","slug":"Calculus","permalink":"http://yoursite.com/tags/Calculus/"},{"name":"Real Analysis","slug":"Real-Analysis","permalink":"http://yoursite.com/tags/Real-Analysis/"}]},{"title":"C++ Functions","slug":"C++ Functions","date":"2019-01-27T16:00:00.000Z","updated":"2019-02-01T02:25:03.660Z","comments":true,"path":"2019/01/27/C++ Functions/","link":"","permalink":"http://yoursite.com/2019/01/27/C++ Functions/","excerpt":"","text":"This note contains basic knowledge of functions in C++ including definition, invocation, overloading and so on. definition of functionssyntax: type identifier Name(formal parameter){ statements return} tips: If the type identifier is void, there is no need to include a return statement in the function body. invocation of functions1. declaration prototypesyntax: function prototype: type identifier Name(formal parameter with type notifications) tips: if a function is defined after the invocation point, its prototype must be declared before invocation. if a function is defined before the invocation point, there is no need to declare the prototype. 2. invocationsyntax: Name(argument) 3.1. write a function to compute the n power of x #include &lt;iostream&gt; using namespace std double power(double x, int n){ dowble val = 1.0; while(n--) val *= x; return val; } int main(){ double pow; pow = power(5, 2): cout &lt;&lt; &quot;5 to the power 2 is &quot; &lt;&lt; pow &lt;&lt; endl; return 0; } 3.2. write a function to converse an input number from binary to decimal #include &lt;iostream&gt; using namespace std; double power(double x, int n); int main() { int value = 0; cout &lt;&lt; &quot;Enter an 8 bit binary number: &quot;; for (int i = 7; i &gt;= 0; i--) { char ch; cin &gt;&gt; ch; if (ch == &#39;1&#39;) value += static_cast&lt;int&gt;(power(2, i)); } cout &lt;&lt; &quot;Decimal value is &quot; &lt;&lt; value &lt;&lt; endl; return 0; } //compute the n power of x double power (double x, int n) { double val = 1.0; while (n--) val *= x; return val; } 3.3. write a function to compute the value of Pi #include &lt;iostream&gt; using namespace std; double arctan(double x) { double sqr = x * x; double e = x; double r = 0; int i = 1; while (e / i &gt; 1e-15) { double f = e / i; r = (i % 4 == 1) ? r + f : r - f; e = e * sqr; i += 2; } return r; } int main(){ double a = 16.0 * arctan(1/5.0); double b = 4.0 * arctan(1/239.0); cout &lt;&lt; &quot;Pi = &quot; &lt;&lt; a - b &lt;&lt; endl; return 0; } 3.4. find all the number from 11 to 999 of which the 1, 2 and 3 power are all palindrome numbers #include &lt;iostream&gt; using namespace std; //determin whether n is a palindrome number bool symm(unsigned n) { unsigned i = n; unsigned m = 0; while (i &gt; 0) { m = m * 10 + i % 10; i /= 10; } return m == n; } int main() { for (unsigned m = 11; m &lt; 1000; m++) if (symm(m) &amp;&amp; symm(m * m) &amp;&amp; symm(m * m * m)) { cout &lt;&lt; &quot;m = &quot; &lt;&lt; m; cout &lt;&lt; &quot;m * m = &quot; &lt;&lt; m * m; cout &lt;&lt; &quot;m * m * m = &quot; &lt;&lt; m * m * m &lt;&lt; endl; } return 0; } 3.5. write a function to compute a piecewise function #include &lt;iostream&gt; #include &lt;cmath&gt; using namespace std; const double TINY_VALUE = 1e-10; double tsin(double x) { double g = 0; double t = x; int n = 1; do { g += t; n++; t = -t * x * x / (2 * n - 1) / (2 * n - 2); } while (fabs(t) &gt;= TINY_VALUE); return g; } int main() { double k, r, s; cout &lt;&lt; &quot;r = &quot;; cin &gt;&gt; r; cout &lt;&lt; &quot;s = &quot;; cin &gt;&gt; s; if (r * r &lt;= s * s) k = sqrt(tsin(r) * tsin(r) + tsin(s) * tsin(s)); else k = tsin(r * s) / 2; cout &lt;&lt; k &lt;&lt; endl; return 0; } Random Function nesting invocation of functionsnesting: invoke another function in a function. 3.7. compute the sum of square of the two input integer #include &lt;iostream&gt; using namespace std; int fun2(int m) { return m * m; } int fun1(int x,int y) { return fun2(x) + fun2(y); } int main() { int a, b; cout &lt;&lt; &quot;Please enter two integers(a and b): &quot;; cin &gt;&gt; a &gt;&gt; b; cout &lt;&lt; &quot;The sum of square of a and b: &quot; &lt;&lt; fun1(a, b) &lt;&lt; endl; return 0; } recursive invocation of functionsrecursive: invoke itself in a function 3.8. compute the factorial of n #include &lt;iostream&gt; using namespace std; unsigned fac(unsigned n) { unsigned f; if (n == 0) f = 1; else f = fac(n - 1) * n; return f; } int main() { unsigned n; cout &lt;&lt; &quot;Enter a positive integer: &quot;; cin &gt;&gt; n; unsigned y = fac(n); cout &lt;&lt; n &lt;&lt; &quot;! = &quot; &lt;&lt; y &lt;&lt; endl; return 0; } &gt;3.9. compute the number of combinations of k individuals selected from n individuals&gt; #include &lt;iostream&gt; using namespace std; &gt; int comm(int n, int k) { if (k &gt; n) return 0; else if (n == k || k == 0) return 1; else return comm(n - 1, k) + comm(n - 1, k - 1); } int main() { int n, k; cout &lt;&lt; &quot;Please enter two integers n and k: &quot;; cin &gt;&gt; n &gt;&gt; k; cout &lt;&lt; &quot;C(n, k) = &quot; &lt;&lt; comm(n, k) &lt;&lt; endl; return 0; } 3.10. Solution of Hanoi Tower&gt; #include &lt;iostream&gt; using namespace std; //move the top plate which is on the src to the dest void move(char src, char dest) { cout &lt;&lt; src &lt;&lt; &quot; --&gt; &quot; &lt;&lt; dest &lt;&lt; endl; } //move n plates which is on the src to the dest via medium void hanoi(int n, char src, char medium, char dest) { if (n == 1) move(src, dest); else { hanoi(n - 1, src, dest, medium); move(src, dest); hanoi(n - 1, medium, src, dest); } } int main() { int m; cout &lt;&lt; &quot;Enter the number of diskes: &quot;; cin &gt;&gt; m; cout &lt;&lt; &quot;the steps to moving &quot; &lt;&lt; m &lt;&lt; &quot; diskes:&quot; &lt;&lt; endl; hanoi(m,&#39;A&#39;,&#39;B&#39;,&#39;C&#39;); return 0; } parameter passing1. reference passingsyntax: type identifier &amp; Name &gt; int i,j; int &amp;ri = i; j = 10; ri = j swap two different numbers #include &lt;iostream&gt; using namespace std; void swap(int &amp; a, int &amp; b) { int t = a; a = b; b = t; } int main() { int x = 5, y = 10; cout &lt;&lt; &quot;x = &quot; &lt;&lt; x &lt;&lt; &quot; y = &quot; &lt;&lt; y &lt;&lt; endl; swap(x, y); cout &lt;&lt; &quot;x = &quot; &lt;&lt; x &lt;&lt; &quot; y = &quot; &lt;&lt; y &lt;&lt; endl; return 0; } variable parameter functioninitializer_list inline functionsyntax: inline type identifier Name tips: inline function cannot contain the switch and if statement. compute the area of a circle #include &lt;iostream&gt; using namespace std; const double PI = 3.14159265358979; inline double calArea(double radius) { return PI * radius * radius; } int main() { double r = 3.0; //r is the radius //it will be replaced by the statements in calArea function during compiling. double area = calArea(r); cout &lt;&lt; area &lt;&lt; endl; return 0; } constexpr functionsyntax: constexpr type identifier Name tips: There is only one return statement in a constexpr function, in which the return value should be a constant. example: constexpr int get_size(){ return 20; } constexpr int foo = get_size(); functions with default parameter valuessyntax: type identifier Name(parameter1, parameter2 = value, …) tips: The parameter with default values should be ordered by the right side when defined. The default values should be defined in the front one: function definition or publication. compute the volume of some cuboid boxes #include &lt;iostream&gt; #include &lt;iomanip&gt; using namespace std; int getVolume(int length, int width = 2, int height = 3); int main() { const int X = 10, Y = 12, Z = 15; cout &lt;&lt; &quot;Some box data is &quot; ; cout &lt;&lt; getVolume(X, Y, Z) &lt;&lt; endl; cout &lt;&lt; &quot;Some box data is &quot; ; cout &lt;&lt; getVolume(X, Y) &lt;&lt; endl; cout &lt;&lt; &quot;Some box data is &quot; ; cout &lt;&lt; getVolume(X) &lt;&lt; endl; return 0; } int getVolume(int length, int width/* = 2 */, int height/* = 3 */) { cout &lt;&lt; setw(5) &lt;&lt; length &lt;&lt; setw(5) &lt;&lt; width &lt;&lt; setw(5) &lt;&lt; height &lt;&lt; &#39;\\t&#39;; return length * width * height; } overloading of functionssyntax: type identifier1 Name(type identifier1 parameter1…)type identifier2 Name(type identifier2 parameter2, type identifier3 parameter3…) tips: The number of parameters can be different. Overloading of functions is determined by the type identifier, rather than return values or expression in the functions. computer the sum of square of two numbers #include &lt;iostream&gt; using namespace std; int sumOfSquare(int a, int b) { return a * a + b * b; } double sumOfSquare(double a, double b) { return a * a + b * b; } int main() { int m, n; cout &lt;&lt; &quot;Enter two integer: &quot;; cin &gt;&gt; m &gt;&gt; n; cout &lt;&lt; &quot;Their sum of square: &quot; &lt;&lt; sumOfSquare(m, n) &lt;&lt; endl; double x, y; cout &lt;&lt; &quot;Enter two real number: &quot;; cin &gt;&gt; x &gt;&gt; y; cout &lt;&lt; &quot;Their sum of square: &quot; &lt;&lt; sumOfSquare(x, y) &lt;&lt; endl; return 0; } system functionThe system functions are usually defined in the head files: mathematics: &lt;cmath&gt; **compute the sine, cosine and tangent function value of a input angle. #include &lt;iostream&gt; #include &lt;cmath&gt; using namespace std; const double PI = 3.14159265358979; int main() { double angle; cout &lt;&lt; &quot;Please enter an angle: &quot;; cin &gt;&gt; angle; double radian = angle * PI / 180; cout &lt;&lt; &quot;sin(&quot; &lt;&lt; angle &lt;&lt; &quot;) = &quot; &lt;&lt; sin(radian) &lt;&lt;endl; cout &lt;&lt; &quot;cos(&quot; &lt;&lt; angle &lt;&lt; &quot;) = &quot; &lt;&lt; cos(radian) &lt;&lt;endl; cout &lt;&lt; &quot;tan(&quot; &lt;&lt; angle &lt;&lt; &quot;) = &quot; &lt;&lt; tan(radian) &lt;&lt;endl; return 0; }","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Programming","slug":"Computer-Science/Programming","permalink":"http://yoursite.com/categories/Computer-Science/Programming/"},{"name":"C++","slug":"Computer-Science/Programming/C","permalink":"http://yoursite.com/categories/Computer-Science/Programming/C/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"},{"name":"MOOC","slug":"MOOC","permalink":"http://yoursite.com/tags/MOOC/"}]},{"title":"Top 10 TED Talks of 2018","slug":"TED","date":"2019-01-24T16:00:00.000Z","updated":"2019-02-17T10:15:41.136Z","comments":true,"path":"2019/01/24/TED/","link":"","permalink":"http://yoursite.com/2019/01/24/TED/","excerpt":"","text":"This note is a summary of some TED speeches. How we need to remake the Internetby Jaron Lanier At the beginning of the Internet, most things are free. The business model is with advertisement. With the development, advertisement becomes not social network anymore, but “behavior modification empires“. “It’s a global tragic, astoundingly ridiculous mistake rather than a wave of evil.” To remake the decision: some people pay for internet service like subscription fee, “Peak TV”. “Peak social media” “We cannot have a society in which, if two people wish to communicate, the only way that can happen is if it’s financed by a third person who wishes to manipulate them“ Link:How we need to remake the Internet A healthy economy should be designed to thrive, not growby Kate Raworth Growth seems such a obsession that humanity always have, which comes from: GDP was invented in 1930s. W.W. Rostow‘s book: The stages of Economic Growth: A Non-Communist Manifesto in 1960s. traditional society where output is limited by tech, institutions and mindset preconditions for takeoff (compound interest, national dignity), growth become normal. drive to maturity with any production based on any resource final: any consumption financially addicted to growth designed to pursue the highest rate of monetary return politically addicted to growth politicians want to raise tax revenue without taxes, only by GDP. socially addicted to growth consumer propaganda created by Edward Bernays time to choose higher ambition than growth, which need a dashboard of indicators: like a doughnut. dynamic balance today’s challenge regenerative design clean energy: wind, tide, sun circular: turn the waste for the first to the food for the next regenerate once-barren landscapes distributive design distribute wealth, knowledge and empowerment to many harness today’s technology in service of distribution design. thrive a long time ingenious people turn boundary into the source of their creativity: boundary unleash our potential. Link:A healthy economy should be designed to thrive, not grow What are the most important moral problems of our time?by Will MacAskill economic history of human civilization continue ascend resulting from scientific and industrial revolution. We also need ethic revolution. Of all the problems facing humanity, which should we focus on solving first?There is a framework: big solvable neglected Three priority issues: global health: solvable factory farming: neglected category of existential risks: permanently derail civilization nuclear war global pandemic synthetiic biology geoengineering artificial intelligence big: causing extinction neglected: issues influencing the next generation are often neglected. philanthropy funding solvable: volunteer, career and political engagement Link:What are the most important moral problems of our time? Is the world getting better or worse? A look at the numbersby Steven Pinker Everyday news: the worst year ever. But it is not a good understanding in the 21st century Compare the same data between present and 30 years ago rethink progress Intellectual hate progress. However, progress is a testable hypothesis. Life, heath, sustenance, prosperity, peace, freedom, safety, knowledge, leisure, happiness data shows we have made great progress in last several hundred years. The progress is not included in news, which become steadily glummer. Why don’t people appreciate progress a mental shortcut called “availability heuristic“, which means that the easier it is to recall something from memory, the probable we judge it to be. nature of journalism bad things happen quickly, but good things don’t happen in a day. Isn’t it good to be pessimistic? to safeguard against complacency, to rake the muck, to speak truth to power. However, it’s good to be accurate: not only just morbid things, but also how to change them. fatalism radicalism What cause the progress? not mystical force, not a mysterious arc of history bending toward justice. result of human efforts governed by an idea, Enlightenment. Is progress inevitable? progress does not mean good thing for everyone everywhere all the time. progress is a problem-solving, which solve problems but create new problems which should be solved in turn Does Enlightenment go against human nature? in understanding our tribulations and woes, human nature is the problem. But human nature, channeled by Enlightenment norms and institutions, is also the solution. Link: Is the world getting better or worse? A look at the numbers","categories":[{"name":"Languages","slug":"Languages","permalink":"http://yoursite.com/categories/Languages/"},{"name":"English","slug":"Languages/English","permalink":"http://yoursite.com/categories/Languages/English/"},{"name":"TED Collections","slug":"Languages/English/TED-Collections","permalink":"http://yoursite.com/categories/Languages/English/TED-Collections/"}],"tags":[{"name":"English","slug":"English","permalink":"http://yoursite.com/tags/English/"},{"name":"TED","slug":"TED","permalink":"http://yoursite.com/tags/TED/"}]},{"title":"Verbal Advantage Level 1","slug":"Level 1","date":"2019-01-22T16:00:00.000Z","updated":"2019-02-06T00:56:07.671Z","comments":true,"path":"2019/01/22/Level 1/","link":"","permalink":"http://yoursite.com/2019/01/22/Level 1/","excerpt":"","text":"paraphrase restate / restatement compare quote: paraphrase: ostensible apparent or appearing to be true, professed as true without being proved. compare: plausible: specious: (negative) sth. false appears true antonym: real, actual tips: ostensible advantage digress wander, stray from the point, ramble, deviate, go off in another direction (in speaking or writing) compare: ingress egress tips: sb. digress be full of humorous digressions uncanny eerie, strange, weird, mysterious sth. strange in an unnatural or unearthly way collocation: uncanny experience sth. beyond what is expected, strange in a marvelous way collocation: uncanny resemblance/ability candor frankness, openness, sincere expression, (candid) synonym: straightforwardness, outspokenness, forthrightness, ingenuousness compare: forthrightness a forthright person speaks directly, plainly and sometimes bluntly ingenuousness a ingenuous person speaks honestly and sincerely, with no hint of evasiveness or deception. morose gloomy, moody, glum, grumpy, ill-tempered, (moroseness) synonym: dolorous: mournful, full of sadness lugubrious: extremely gloomy or dismal saturnine: having bitter disposition or sour outlook on life antonym: optimistic, jovial, sanguine compare: sullen: refuse to associate with people because of bad mood morose: depressed and silent because of bitter or resentful feeling misanthropy: hatred of humankind spiteful or pessimistic attitude on human race adept skilled synonym: handy, clever, able, deft, expert, adroit, dexterous, proficient tips: adept [n]: a highly skilled person = expert adept [adj]: be adept at managing one’s investments saturated soaked, thoroughly wet, full of moisture (saturation) synonym: drenched, steeped, permeated, impregnated, imbued, sodden compare: sodden: heavy with moisture, soggy dull, stupefied, expressionless as from drinking too much liquor saturate literally: my french fries are saturated with oil figuratively: the company saturated the media with ads for its new product pragmatic practical, concerned with everyday affairs as opposed to theory or speculation tips: businessman lawyer congenial sympathetic, agreeable, compatible, kindred, harmonious, having the same taste, nature, temperament antonym: alien, dissident, incongruous capricious unpredictable, sudden change of mind or emotions (caprice) synonyms: flighty, impulsive, fickle, erratic, whimsical, volatile, mercurial tips: He is so capricious. New England has a capricious climate. The stock market is notoriously capricious. blatant noisy, disagreeably or offensively loud, boisterous, clamorous tips: the blatant sound of horns honking in heavy traffic sticking out in a glaring way, obtrusive, flagrant a blatant lie a blatant error a blatant attempt to impress the boss conspicuous &amp; disagreeable obligatory required, necessary, binding, mandatory tips: obligatory duties doing miscellaneous paperwork is an obligatory function of the clerical worker. negligible unimportant, trifling, of little consequence tips: a negligible concern: warrants little or no attention. adamant unyielding, immovable, inflexible, unshakable, unrelenting, implacable, refusing to give in tips: She was adamant in her opposition to the plan. adamant [adj] adamant [n]: a hard substance or stone, like a diamond sporadic occasional, infrequent, irregular, not constant, occurring in a scattered or random way tips: a business venture may have sporadic success. gambler’s luck may be sporadic. sporadic crimes/sporadic outbreaks of a disease antonyms: constant, incessant, unremitting vanguard the forefront of an action or movement, leading position or persons in a movement concur to agree, be in accord with, unite in opinion tips: act together: combine in having an effect Time and chance concurred in our success. happen together: occur at the same time, coincide His pay raise concurred with his promotion. agree： your story concurs with theirs we concurred on almost every point of negotiation. precociousness early development or maturity, especially in mental ability. (precocious) tips: precocious: children whose intellectual emotional development is advanced. antonyms: retardation aloof apart, at a distance, removed, withdrawn, not wishing to speak or associate with others tips: aloof person: reserved and keeps a cool distance aloofness: reluctance to get involved or take an interest in sth. synonyms: unsympathetic, unapproachable, standoffish, indifferent creed belief, professed faith or opinion, especially a system of religious belief. synonyms: doctrine, dogma compare: credo: more learned word, a formal declaration of belief creed: more generally tips: credo: source of incredible, credible, credulous credulous: inclined to believe without questioning synonym: gullible a credulous person tawdry cheap, showy, gaudy, garish, sleazy tips: literally: tawdry clothing figuratively: have a tawdry reputation peevish irritable, cross, complaining, fretful, ill-humored, impatient, difficult to please tips: peevish moods, peevish remarks, peevish looks peeve: something that irritates or annoys Her pet peeve is a wet towel left on the bed. arduous very difficult, hard to achieve or accomplish, requiring great effort tips: something is an arduous task. raising children is arduous responsibility. synonyms: strenuous, laborious, toilsome. personable attractive pleasing in appearance, handsome, comely, fair, presentable compare: sociable, affable, amiable: friendly, pleasant, approachable awkward or unbecoming person cannot be personable. personable: either attractive in appearance or in personality or in both. resolute firmly determined, settled, resolved, having a set opinion or purpose, steadfast, unwavering, persevering tips: The lawyers tried to resolve the case out of court. He was resolute about earning master’s degree and starting a successful business. antonyms: irresolute, unsteady, vacillating supposition assumption, theory, hypothesis (suppose) compare: hypothesis: a preliminary or incomplete theory based on insufficient evidence. There are conflicting hypotheses about the origin of the universe. conjecture: a assumption based on so little evidence that it is merely an educated guess. Every week we hear different conjectures about trends in the stock market. supposition: based on ample evidence or no evidence, may be either sensible or irrational His suppostion about the company’s financial condition proved consistent with the facts. arbitrary unreasoned, based on personal feelings or preferences rather than on reason, logic, or law tips: An arbitrary price for a product is not necessarily a fair price. determined or arrived at in a random or illogical manner. An arbitrary decisions: in haphazard way exercising, unrestrained or absolute power An arbitrary government has no regard for individual liberty. monotonous lacking variety, tediously uniform, unvarying and dull (monotony) tips: monotonous speaker, monotonous music, monotonous job legacy something handed down from the past, an inheritance tips: a gift of money or property provided by a will, an inheritance, bequest Her wealthy uncle left her a generous legacy anything inherited or passed down through time The cultural legacy of ancient Greece and Rome has shaped Western civilization. manifold numerous, varied, consisting of many kinds, elements, features, characteristics compare: many: much, a lot manifold: emphasize variety, diversity a job with manifold duties means things are both numerous and varied multifarious: variety and diversity human race is multifarious multitudinous: containing a multitude, a great number of persons or things multitudious administrative chorestips:manifold operations and divisions, manifold responsibilities pliant bending easily, flexible, adaptable, workable compare: pliant: bending or moving easily pliable: objects that are easily workable supple: material things or human body that is flexible and limber retort a quick reply, especially one that is cutting or witty compare: retort: a swift pointed response rejoinder: any answer or response, but specifically a counter-reply, an answer to a reply tips: Phil’s clever retorts kept his opponent on the defensive. obstinate stubborn, inflexible, unwilling to give in or compromise, not yielding to argument or persuasion tips: obstinate person stubbornly adheres to a purpose or opinion, often regardless of the consequences First we reasoned with him, then we pleaded with him, but no matter what we said he remained obstinate and determined to have his way. lacerate tear, cut roughly, rend, mangle tips: literally The sharp thorn lacerated his thumb. figuratively: wound, afflict, cause pain Her husband’s vicious retort lacerated her pride and made her burst into tears. omnipotent all-powerful, almighty, having unlimited power or authority compare: omnidirectional: all-directional omnipresent omniscient: all-knowing omnivorous: eating all kinds of food She is an avid reader with an omnivorous mind. unscrupulous untrustworthy, dishonorable, deceitful, corrupt, lacking integrity or moral principles compare: scruple: something that causes hesitation or doubt in determining what is appropriate and proper. scrupulous: having scruples The scruplous person is precise, careful, and honest. unscrupulous unscrupulous business practices renaissance a revival, rebirth, resurgence, renewal of life or vigor tips: a cultural renaissance, moral renaissance, spiritual renaissance, a renaissance in the economy genesis a coming into being, beginning, origin, birth, creation tips: the genesis of an idea/ a work of art/ an important social movement/ distinguished career. warrant justify, give good reason for, authorize, sanction the circumstances do not warrant such extraordinary measures. the evidence warrants further investigation these safety procedures are warranted by company regulations tips: guarantee, promise give formal assurance of the Postal Service will not warrant delivery on a specific day the manufacturer warrants the safety of the product cantankerous difficult to deal with, disagreeable, argumentative, quick to quarrel or to exhibit ill will tips: cantankerous old man, cantankerous relatives synonyms: contentious: quarrelsome, prone to argue or dispute malicious: mean-spirited, nasty, spiteful irascible: quick-tempered, easily angered, extremely irritable flippant disrespectful in a frivolous way, treating something serious in a trivial manner tips: expression causing dismay or offense flippant language, flippant remark humorous flippant comments of talk show host synonyms: cheeky, fresh, thoughtless, impertinent antonyms: solemn, sober, sedate, grave subjugate conquer, defeat, vanquish, overwhelm completely, bring under rigid, control, make submissive, dominate, enslave compare: defeat: winning, beating, or opponent in a single engagement defeat a person in an argument/contest/game/fight conquer: achieving a final victory or gaining complete control over an opponent after a series of contests After a long and arduous campaign, Caesar conquered the Gauls. subjugate: domination, bringing the vanquished opponent under complete and rigid control Hitler brutally subjugated people. subjugation war psychological domination subjugate an addiction, subjugate a impulse / an emotion - yoke it, make it submit to your will, bring it under complete control. wry twisted, crooked, lopsided, askew, distorted in an odd, amusing way tips: twisted twisted in a peculiar and humorous manner a wry simile or grin: crooked, lopsided,comical a wry remark: funny or sarcastic twist to it a person with a wry sense of humor: twisting or distorting things in a laughable way urbane polished, sophisticated, suave, cosmopolitan tips: Mary’s stunning designer dresses and witty, urbane conversation made her a popular guest at all the high-society parties. jargon specialized and pretentious language; speech or writing that is highly technical and difficult to understand tips: a means for members of a particular group to communicate precisely and efficiently medical jargon; computerese; legal jargon any pretentious speech or writing that seems unnecessarily difficult to understand savvy businesspeople know that using a lot of professional jargon will only alienate clients. prudent cautious, careful, planning wisely, exercising sound judgment in practical matters synonyms: discreet, judicious, circumspect spending carefully, using one’s resources wisely thrifty, economical and frugal compare circumspect circumspect person: looks around carefully to make sure that no unforseen circumstance will frustrate a plan of action. prudent prudent people: concerned with protecting their personal interest and providing for a rainy day.(sound, careful judgment in handling practical matters, especially money) inviolable secure, safe from assault, infringement or destruction, sacred, untouchable, unassailable, incorruptible tips: inviolable peace inviolable contract inviolable oath or promise inviolable place commodious spacious, having plenty of room, comfortably convenient synonyms: ample, capacious compare: accommodate, accommodations: sleeping quarters, lodging proximity nearness, closeness, state of being in the vicinity of something tips: the proximity of their houses the proximity of historic events the proximity of two ideas In modern society, marriage between first cousins is forbidden because of their proximity of blood relation. marriage with the girl or boy next door, proximity was the deciding factor.","categories":[{"name":"Languages","slug":"Languages","permalink":"http://yoursite.com/categories/Languages/"},{"name":"English","slug":"Languages/English","permalink":"http://yoursite.com/categories/Languages/English/"},{"name":"Verbal Advantage","slug":"Languages/English/Verbal-Advantage","permalink":"http://yoursite.com/categories/Languages/English/Verbal-Advantage/"}],"tags":[{"name":"English","slug":"English","permalink":"http://yoursite.com/tags/English/"},{"name":"Vocabularies","slug":"Vocabularies","permalink":"http://yoursite.com/tags/Vocabularies/"}]},{"title":"WSJ Collections","slug":"WSJ","date":"2019-01-22T16:00:00.000Z","updated":"2019-02-11T10:40:21.286Z","comments":true,"path":"2019/01/22/WSJ/","link":"","permalink":"http://yoursite.com/2019/01/22/WSJ/","excerpt":"","text":"This note contains some summaries of news from the Wall Street Journal. Stocks Decline as Growth Concerns ResurfaceDate: Jan. 22, 2019; By Michael Wursthorn and Avantika Chilkoti Points: The main index in US market fell down, seemly halting the recoveries. IMF reduced its forecast for global economic growth in 2019. Chinese economy decelerate faster than expected, with growth at the slowest annual pace in 2018 since 1990. FT said Trump administration turned down an offer hold preparatory trade talks with China, which was denied by officials. US economy outlook was muddied by recent housing data, which showed existing-home sales fell in Dec. to the weakest level in more than 3 years. Idiom &amp; Phrase &amp; Sentence: “We are in a positive, but slower, meandering path of growth,” with US-China trade tensions, the continuing government shutdown and the overall impact on corporate profits all acting as wild cards for investors that could drastically alter the investment landscape, He added. Links:Stocks Decline as Growth Concerns Resurface Scamming Grandma: Financial Abuse of Seniors Hits RecordDate: Jan. 24, 2019; By Yuka Hayashi Points: Cases of elder financial abuse was reported more than double the amount five years earlier. New law was enacted to prompt banks to address frauds and scams. Bankers attribute a increase in social media use by the older for a surge in fraud cases targeting seniors. Idiom &amp; Phrase &amp; Sentence: Only later did he find out that there was no DUI and his grandson hadn’t been in an accident. Besides the grandchild scam, there are romance or online dating schemes in which victims are deceived into online relationships before being swindled out of their savings. Links:Scamming Grandma: Financial Abuse of Seniors Hits Record As China Trade Talks Begin, Trump Faces Pressure to Make a DealDate: Jan. 29, 2019; By Vivian Salama Points: Recent: Trump gets pressure. Chinese tariffs imposed to counter U.S. levies have a negative impact on business groups and his staunchest supporters and constituencies. Background: Trump made a pledge. Trump are on a pledge to renegotiate trade deals with the aim of protecting American workers. If optimistic, it is a big victory and create real momentum across the globe. However: risk for Republicans, if it is failure. Another source of pressure: Concerns that the fight drag on indefinitely Next: Talk will begin Wednesday and conclude Thursday. Talk aimed at staving off the plans of raising tariffs. Two sides remain far apart, with Chinese little sign of a change. China hawks and business groups are concerned that Trump seek a quick win. Idiom &amp; Phrase &amp; Sentence: As stocks swooned, Mr. Trump anxiously called advisers both inside and outside the White House, seeking reassurances that his stance on China wasn’t driving the selloff. Links:As China Trade Talks Begin, Trump Faces Pressure to Make a Deal","categories":[{"name":"Languages","slug":"Languages","permalink":"http://yoursite.com/categories/Languages/"},{"name":"English","slug":"Languages/English","permalink":"http://yoursite.com/categories/Languages/English/"},{"name":"Wall Street Journal","slug":"Languages/English/Wall-Street-Journal","permalink":"http://yoursite.com/categories/Languages/English/Wall-Street-Journal/"}],"tags":[{"name":"English","slug":"English","permalink":"http://yoursite.com/tags/English/"},{"name":"WSJ","slug":"WSJ","permalink":"http://yoursite.com/tags/WSJ/"}]},{"title":"Derivatives Basics","slug":"Derivatives Basics","date":"2019-01-21T05:00:00.000Z","updated":"2020-01-10T16:44:37.055Z","comments":true,"path":"2019/01/21/Derivatives Basics/","link":"","permalink":"http://yoursite.com/2019/01/21/Derivatives Basics/","excerpt":"","text":"This note contains basic conceptions of financial instruments and derivatives including stock, bonds, forward contracts, swaps, options. Classification of financial instruments basic securities fixed income bonds bank account loans equities stocks derivatives and contracts options (nonlinear function of a stock) calls &amp; pulls exotic options swaps futures &amp; forwards credit risk derivatives stocksissued by firms to finance operationsrepresent ownership of the firmprice known today, but not in the futuremay or may not pay diviends bondsprice known todayfuture payoffs known at fixed datesotherwise the price movement is randomfinal payoff at maturity: face value/ nominal value/principalintermediate payoffs: couponsexposed to default/credit risk derivatives Sell for a price/value/premium today. Future value derived from the value of theunderlying securities (as a function ofthose). Traded at exchanges – standardizedcontracts, no credit risk; Over-the-counter (OTC) – a network ofdealers and institutions, can be nonstandard, some credit risk. Why derivatives? To hedge risk (primary reason) To speculate To attain “arbitrage” profit To exchange one type of payoff for another To circumvent regulations (flexible) Forward Contract An agreement to buy (long) or sell (short) a given underlying asset S: Underlying asset could be stock or merchandise At a predetermined future date T (maturity). At a predetermined price F (forward price). F is chosen so that the contract has zero value today. a kind of zero sum game Today: gain &amp; loss are 0 (different from options) Delivery takes place at maturity T: Payoff at maturity: Long: S(T) - F Short: F - S(T) Price F set when the contract is established. S(T) = spot (market) price at maturity Long position: obligation to buy Short position: obligation to sell Differences with options: Delivery has to take place. Zero value today. Example On May 13, a firm enters into a longforward contract to buy one million euros insix months at an exchange rate of 1.3. On November 13, the firm pays F=$1,300,000 and receives S(T)= one million euros. How does the payoff look like at time T as afunction of the dollar value of S(T) spotexchange rate? graphs SwapsAgreement between two parties to exchange two series of payments. Classic interest rate swap: One party pays fixed interest rate payments on a notional amount. Counterparty pays floating (random) interest rate payments on the same notional amount. Floating rate is often linked to LIBOR (London Interbank Offer Rate), reset at every payment date. The two parties may be exposed to different interest rates in different markets, or to different institutional restrictions, or to different regulations. a swap example New pension regulations require higher investment in fixed income securities by pension funds, creating a problem: liabilities are long-term while new holdings of fixed income securities may be short-term. Instead of selling assets such as stocks, a pension fund can enter a swap, exchanging returns from stocks for fixed income returns. Or, if it wants to have an option not to exchange, it can buy swaptions instead. Example: Swap Comparative AdvantageUS firm B wants to borrow AUD, Australian firm A wants to borrow USD: Firm B can borrow at 5% in USD, 12.6% AUD Firm A can borrow at 7% USD, 13% AUD Expected gain = (7-5) – (13-12.6) = 1.6% Swaps: Bank gains 1.3% on USD, loses 1.1% on AUD, gain=0.2% Firm B gains (12.6-11.9) = 0.7% Firm A gains (7-6.3) = 0.7% Part of the reason for the gain is credit risk involved","categories":[{"name":"Economics","slug":"Economics","permalink":"http://yoursite.com/categories/Economics/"},{"name":"Finance","slug":"Economics/Finance","permalink":"http://yoursite.com/categories/Economics/Finance/"}],"tags":[{"name":"Derivatives","slug":"Derivatives","permalink":"http://yoursite.com/tags/Derivatives/"},{"name":"Finance","slug":"Finance","permalink":"http://yoursite.com/tags/Finance/"}]},{"title":"C++ Basics","slug":"C++ Basics","date":"2019-01-15T16:00:00.000Z","updated":"2019-03-18T08:05:25.546Z","comments":true,"path":"2019/01/15/C++ Basics/","link":"","permalink":"http://yoursite.com/2019/01/15/C++ Basics/","excerpt":"","text":"This note contains basic structures of C++ including Iostream, if, while, for controlling statements. IOstreamStream class: standard I/O read &amp; write files Standard I/O Input: screen Output: keyboard notations 1.input: &gt;&gt;; output: &lt;&lt; cout &lt;&lt; expression &lt;&lt; expression cin &gt;&gt; expression &gt;&gt; *expression” 12int a, b;cin &gt;&gt; a &gt;&gt; b 2. manipulator dec: decimal hex: hexadecimal oct: octal ws: extract blank character endl: change a line and refresh current ends: insert blank character setsprecision(int): set the number of decimals of floats setw(int): set width cout &lt;&lt; setw(5) &lt;&lt; setprecision(3) &lt;&lt; 3.1415 if statementsyntax: if(expression) statement 1if (x &gt; y) cout &lt;&lt; x; if(expression) statement1else statement2 12if ( x &gt; y) cout &lt;&lt; x;else cout &lt;&lt; y; if(expression1) statement1else if(expression2) statement2else if(expression3) statement3…else statementn determine whether a year is a leap year 1234567891011121314#include &lt;iostream&gt; using namespace stdint main()&#123;int year;bool isLeapYear;cout &lt;&lt; &quot;Enter the year: &quot;;cin &gt;&gt; year;isLeapYear = ((year % 4 == 0 &amp;&amp; year &amp; 100 != 0) || (year % 400 == 0));if (isLeapYear) cout &lt;&lt; year &lt;&lt; &quot;is a leap year&quot; &lt;&lt; endl;else cout &lt;&lt; year &lt;&lt; &quot;is not a leap year&quot; &lt;&lt; endl;return 0;&#125; nesting: if(expression1) if(expression2) statement1 else statement2else if(expression3) statement3 else statement4 tips: match each if and else, or use {} compare 2 input integers 123456789101112131415#include&lt;iostream&gt;using namespace std;int main()&#123; int x, y; cout &lt;&lt; \"Enter x and y: \"; cin &gt;&gt; x &gt;&gt; y; if (x != y) if (x &gt; y) cout &lt;&lt; \"x &gt; y\" &lt;&lt; endl; else cout &lt;&lt; \"x &lt; y\" &lt;&lt; endl; else cout &lt;&lt; \"x = y\" &lt;&lt; endl;return 0;&#125; switch statementsyntax: switch(expression){case expression1 : statement1 calculate the area of a graph while statementsyntax: while (expression) statement tips: The statement must contain what changes the conditions of loop, which can be composite. order: calculate the expression first. If it is true, do the statement calculate the sum of natural number 1 ~ 10 123456789101112&gt; #include &lt;iostream&gt;&gt; using namespace std;&gt; int main()&#123;&gt; int i = 1, sum = 0;&gt; while (i &lt;= 10)&#123;&gt; sum += i; //sum = sum + i;&gt; i++;&gt; &#125;&gt; cout &lt;&lt; \"sum = \" &lt;&lt; sum &lt;&lt; endl;&gt; return 0;&gt; &#125;&gt; do-while statementsyntax: calculate the sum of natural number 1 ~ 1012345678910111213#include &lt;iostream&gt;using namespace std;int main()&#123; int i = 1, sum = 0; do &#123; sum += i; i++; &#125; while (i &lt;= 10); cout &lt;&lt; \"sum = \" &lt;&lt; sum &lt;&lt; endl; return 0;&#125;&gt; for statementsyntax: for(initial statement; expression1; expression2) statement tips: If expression1 is true, do the loop. After the loop, do the expression2. The for statement can replace the while and do-while statement. calculate the sum of natural number 1 ~ 101234567891011#include &lt;iostream&gt;using namespace std;int main()&#123; int i = 1, sum = 0; for(i=1;i&lt;=10;i++) &#123; sum += i; &#125; cout &lt;&lt; \"sum = \" &lt;&lt; sum &lt;&lt; endl; return 0;&#125; find all the factors of an input integer nesting &amp; other statementsyntax: break continue goto input an array of integers, determine whether each is positive or negative and count the number of them respectively definition of type1. definition typedef using 2. enumeration enum TypeName {list of values} 12enum Weekday&#123;SUN, MON, TUE, WED, THU, FRI, SAT&#125; tips: they cannot be evaluated to new values. they can be matched with new values when defined. 12enum Weekday&#123;SUN=7, MON=1,&#125; they can be caluated. 3. initial auto decltype","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Programming","slug":"Computer-Science/Programming","permalink":"http://yoursite.com/categories/Computer-Science/Programming/"},{"name":"C++","slug":"Computer-Science/Programming/C","permalink":"http://yoursite.com/categories/Computer-Science/Programming/C/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"},{"name":"MOOC","slug":"MOOC","permalink":"http://yoursite.com/tags/MOOC/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-12-30T16:00:00.000Z","updated":"2019-01-24T08:14:01.579Z","comments":true,"path":"2018/12/30/hello-world/","link":"","permalink":"http://yoursite.com/2018/12/30/hello-world/","excerpt":"","text":"“Hello World” is a magic sentence for programmers, since it is said that Brian Kernighan first wrote and ran it in a tutorial of language B in 1973, which was referred again in his book The C Programming Language in 1978. Because of the prevalence of this book, other programmers gradually started to write how to print “Hello World” in their books as the very first program. Afterwards it becomes such a tradition that almostall the programming books will follow it. So does the first web-page of my personal blog when generated automatically by github. Personally speaking, I find that “Hello World” is amazing. For every beginner of programming like me, not only does “Hello World” sound like an appropriate greeting to the new code-world, but indicates the curiosity and a spirit of exploration, which fascinates me a lot. Moreover, it is also a kind of encouragement both for my exploration on this online platform and for my educational journey in several years. Therefore, I believe “Hello World” will be a good start for my personal blog and my life at the near end of the age 22. I plan to make this blog an academics and profession oriented place, with some summarization of Mathematics, Computer Science, Finance or Business idea, which is part of the reason why I call it Guangnan’s Notes. Of course, I will post some stories and retrospect of my life, in a relatively formal way, on the blog. If you are interested in and curious about the other sides about me, please feel free to contact me on the social media. So, Let’s start. Welcome to Guangnan’s Notes!","categories":[{"name":"Thoughts","slug":"Thoughts","permalink":"http://yoursite.com/categories/Thoughts/"},{"name":"Other","slug":"Thoughts/Other","permalink":"http://yoursite.com/categories/Thoughts/Other/"}],"tags":[{"name":"Journal","slug":"Journal","permalink":"http://yoursite.com/tags/Journal/"}]}]}