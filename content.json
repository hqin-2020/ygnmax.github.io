{"meta":{"title":"Guangnan's Notes","subtitle":"I rest, I rust","description":"Guangnan","author":"ygnmax","url":"http://yoursite.com","root":"/"},"pages":[{"title":"About Me","date":"2019-01-16T09:37:17.000Z","updated":"2019-02-15T13:29:38.089Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"Hi! My name is Guangnan Yang, but you will mostly meet me as ygnmax on the internet. “Max“ is my English name which is given by my first English teacher. Therefore, you can also call me Max Yang. Now, I have received an offer of Master of Science in Financial Engineering from NYU Tandon School and been preparing for my oversea education. Before that, I was major in Finance with a Bachelor of Economics degree and minor in Jurisprudence with a Bachelor of Laws degree in Xiamen University. Please check my Linkedin to get more information about my profession and Curriculum Vitae. This blog is aimed at honing my skills in Financial Engineering fields and recording my academic notes. Please check “Hello World“ to know the origin of “Guangnan’s Notes”. Feel free to contact me via ygnmax@gmail.com. Alternatively you can find me from the social media listed on catalog."}],"posts":[{"title":"Risk Management of Commodity","slug":"Financial Risk Management Commodity","date":"2020-02-14T05:00:00.000Z","updated":"2020-02-16T19:44:41.368Z","comments":true,"path":"2020/02/14/Financial Risk Management Commodity/","link":"","permalink":"http://yoursite.com/2020/02/14/Financial Risk Management Commodity/","excerpt":"","text":"This notes is based on the class Financial Risk Management of NYU MFE, including basic conceptions. Commodity OverviewCommodity MarketCommodities are basic, standardized goods which are traded and used in commerce, often distinguished between “hard” (natural resources such as metals and energy) and “soft” (crops and livestock) commodities. Commodity producers and consumers (both end users and those who use them in production processes) often manage commodity price risk assisted by banks. Market dynamics for individual commodities are unique and specifically linked to the countries, sectors and/or companies which engage in exploration, extraction, refining or production (referred to as producers) and those who use these goods as inputs in production or are end users (known as consumers) and therefore rely on periodic physical delivery. Producers and consumers often seek to manage exposure to price volatility via standardized future and option contracts traded on commodity exchanges as well as through customized over-the-counter instruments. Investors on the other hand with no direct physical exposure have increased commodity investments due to low (and sometimes negative) correlation with other asset types. Specific commodities such as gold are sought for wealth preservation and inflation protection by investors seeking a safe haven in volatile markets. ParticipantsBanks and Broker-DealersSeveral large global and U.S. money center banks are engaged in commodity markets, largely as exchange members and OTC derivative and derivatives clearing providers, although some leverage specific credit and industry expertise and client relationships to engage in physical market and structuring opportunities involving financing. ExchangesExchanges perform a variety of functions across physical and derivative markets to support producer and consumer activities: Physical markets require a global network of warehouses to store and deliver on contracts. Exchanges neither own nor operate this network, but create an infrastructure to ensure efficient and secure delivery under physical contract terms. Investments in commodities generally embed this ongoing cost of storage (“cost of carry”) for a warehoused commodity. Derivative markets are generally designed to mirror physical trading. Similar to other futures and options exchanges, these offer standardized contracts with pre-specified delivery dates, location and underlying commodity specifications. Unlike trading in a financial asset, futures not offset by an opposite sale or purchase prior to settlement date are physically settled. Example: corn futures This Chicago Board of Trade contract specifies 5,000 bushels (~ 127 metric tons) of #2 yellow corn traded in USD with a minimum tick size of $12.50 with contracts expiring each March, May, July, September and December. PricingBasisBasis is the difference between the cash and futures price for the same commodity: \\text{Basis} = S_0 - F_{0,t}where $S_0$ is the current spot price and $F_{0,t}$ is the current futures price for delivery at time t. The basis may be positive or negative at any given time, and as the time to delivery passes, the futures price will approach the spot price, resulting in a basis of zero (except for minor differences due to transportation and transaction costs). Example: If the current spot price of gold is $\\$1,488.53/t ~ oz$. and the December futures contract is trading at $\\$1,499.50/t ~ oz$., the basis equals $-\\$10.97$, which is $\\$1,488.53 - \\$1,499.50$. SpreadSpread is the price difference between futures on the same commodity for different maturity dates: \\text{Spread} = F_{0,t+k} - F_{0,t}where $F_{0,t}$ is the current futures price for delivery at t (say in 3 months), while $F_{0,t+k}$ is the current futures price for delivery at $t+k$ (say in 6 months). Example: If the wheat futures contract for delivery in 3 months is $\\$3.25$ per bushel, while the 6-month contract is $\\$3.30$ per bushel, the spread is $\\$0.05$. Cost of Carry ModelA simplified way to value a futures contract which assumes futures prices should depend upon the current spot price and the cost of “carrying” or storing (storage, insurance, transportation and financing) the commodity from now until the futures contract matures. In its simplest form, it assumes no transaction costs or margin requirements, no restrictions on short selling and that investors can freely borrow and lend at the same rate of interest*: F_{0,t} = S_0(1+C_{0,t})Where $C_{0,t}$ is the percentage cost required to store (or “carry”) the commodity from now until time t Cash and Carry Arbitrage F_{0,t} > S_0(1+C_{0,t})If the futures contract price exceeds spot plus carry, a trader can borrow, buy the commodity today for cash, sell futures and carry the goods to the futures expiration date. At time t, she delivers the commodity against the futures contract and repays the loan. Reverse Cash and Carry Arbitrage F_{0,t} < S_0(1+C_{0,t})If the spot price plus carry exceeds the futures price, spot plus carry, the trader can sell short a physical asset. The trader purchases a futures contract, which will be used to honor the short sale commitment. Then the trader lends the proceeds at an established rate of interest. At time t, the trader accepts delivery against the futures contract and uses the commodity received to cover the short position. Examples: WTI spot oil is $\\$55$ per barrel, and a trader notes annualized carry is $5\\%$ or $\\$2.75$ for $6$ months. If 6-month WTI futures are $\\$60$, how can the trader earn a riskless profit? Cash and carry arbitrage - futures are overpriced versus spot plus carry ($\\$60 &gt; \\$57.75$) sell $F_{6mo}$ for $\\$60$, buy oil now at $\\$55$ and pay $\\$2.75$ carry earn $\\$2.25$ ($\\$60 - \\$57.75$) If spot gold is $\\$1,450$ /t oz. and the one-year futures contract is at $\\$1,460$ with a $3.5\\%$ carry cost, how can our trader generate an arbitrage return? Reverse cash and carry arbitrage - futures are underpriced versus spot plus carry ($\\$1,460 &lt; \\$1,500.75$), sell gold short in the cash market, lend the proceeds buy the futures contract Take delivery under the futures contract to cover the short gold position and keep $\\$40.75$ or $\\$1,500.75 - \\$1,460$. Spot and Futures relationship Expectations: F_{0,t}=E{[S_{0,t}]}Futures prices are a function of expected spot commodity prices in the future Backwardation: F_{0,t}E[S_{0,t}]Suggests that futures markets are primarily driven by hedgers who hold long positions. For example, grain millers may purchase futures contracts to reduce their price risk. Hedgers pay speculators a premium to assume the price risk. Speculators take short positions to assume this price risk and are rewarded when the futures price declines to match the spot price at maturity.","categories":[{"name":"Economics","slug":"Economics","permalink":"http://yoursite.com/categories/Economics/"},{"name":"Finance","slug":"Economics/Finance","permalink":"http://yoursite.com/categories/Economics/Finance/"},{"name":"Risk Management","slug":"Economics/Finance/Risk-Management","permalink":"http://yoursite.com/categories/Economics/Finance/Risk-Management/"}],"tags":[{"name":"NYU","slug":"NYU","permalink":"http://yoursite.com/tags/NYU/"},{"name":"Risk Management","slug":"Risk-Management","permalink":"http://yoursite.com/tags/Risk-Management/"},{"name":"FRM","slug":"FRM","permalink":"http://yoursite.com/tags/FRM/"}]},{"title":"Risk Management of Foreign Currency","slug":"Financial Risk Management Foreign Exchange","date":"2020-02-14T05:00:00.000Z","updated":"2020-02-16T18:19:04.741Z","comments":true,"path":"2020/02/14/Financial Risk Management Foreign Exchange/","link":"","permalink":"http://yoursite.com/2020/02/14/Financial Risk Management Foreign Exchange/","excerpt":"","text":"This notes is based on the class Financial Risk Management of NYU MFE, including basic conceptions. Foreign Exchange OverviewForeign Exchange MarketThe global foreign exchange (FX) market represents the highest trading volume of any financial asset class (over $5 trillion daily) and has been historically dominated by large international banks trading in a decentralized, over-the-counter manner in what is referred to as the interbank market. history: Modern-day foreign exchange trading was established in the early 1970s following the breakdown of the post-World War II Bretton Woods monetary agreement and subsequent shift from fixed to floating exchange rates among major global economies purpose: The ability to exchange currencies is critical in facilitating the cross-border flow of goods, services and financial assets for transactional and investment purposes. scope: total daily FX trading volume exceeded $5 trillion in 2016, is dominated byUSD, EUR and JPY spot and FX swap transactions originated in the UK and US. trends: FX trading has declined slightly in recent years due to reduced capital and goods flows following the 2008 financial crisis, reduced activity from hedge funds and less appetite among banks to warehouse risk due to increased capital requirements. Emerging fintech-driven non-bank players have increased market share and the proportion of algorithmic trading is rising. Why does the foreign exchange market have such a size and scope Increasing global interdependence amid growing cross-border financial and goods flows Increased wealth and risk appetite drives globalization of investment portfolios Continued emerging market growth attracts cross-border capital and goods flows Three primary foreign exchange risk exposure: transaction risk: the original functional currency value of the transaction will change or be recorded at a different value translation risk: Firms face the translation of foreign currency denominated balance sheet and income statement items (revenues and expenses) from a foreign currency into its functional currency. economic risk: impact long-term investment decisions What drives foreign exchange rates?Currency movements are commonly considered as random events more readily explained after the fact than predicted on an ex-ante basis. This would suggest investors are unable to generate alpha while hedgers should only manage FX-based balance sheet and income statement volatility as needed. Foreign Exchange Rate FrameworkMonetary Approach (Purchasing Power Parity)Implies an exchange rate should reflect the relative price of the same basket of goods across currencies, or alternatively that the difference in the rate of change in domestic and foreign currency prices (the inflation differential) should equal the percentage depreciation or appreciation of the exchange rate. PPP is too narrow a measure to be used in isolation given the existence of non-standard baskets of goods, non-traded goods and other differences. Example: undervalued: A Big Mac costs 130 RUB in Russia and US$5.74 in the U.S. This implies a RUB/USD exchange rate of 22.65. The actual exchange rate of 63.84 RUB/USD suggests the RUB is 64.5% undervalued ($\\frac{63.84 – 22.65}{63.84}$). overvalued: A Big Mac costs SFR 6.50 in Switzerland and US$5.74 in the U.S. The implied SFR/USD exchange rate is 1.13. The difference between this and the actual exchange rate of 0.99 SFR/USD suggests the Swiss franc is 14% overvalued ($\\frac{0.99 – 1.13}{0.99}$). Balance of Payments ApproachAddresses the implications of trade and capital flows for FX rates, focusing on current (goods, services, dividends and interest) versus capital account (investment, portfolio flows or loans) changes which net to zero. Although in theory any current account imbalances are financed via the capital account, in practice changes to certain components are more material than others, for example commodity-led economies (AUD or BRL) respond more to those flows, while emerging Asia is more impacted by business cycles. Flows matter, but do not explain FX volatility. Asset Markets ApproachCurrencies are highly responsive to current and future fundamentals as embodied in asset prices reflecting the present value of future cash flows denominated in different currencies. Under this explanation, FX prices adjust instantaneously to new information about currency fundamentals. This approach is supported by strong empirical evidence and forms the basis for trading. Central bank FX market interventionThis is an additional overlay, particularly in emerging markets driven by an aim to either address an imbalance, offset volatility or accumulate FX reserves. Foreign Exchange ConventionInverse and direct quotingInverse quotesSeveral major (and a few minor) currencies are quoted as the number of U.S. dollars required to purchase one unit of currency. EUR / USD = 1.11 Therefore a stronger EUR will result in a higher EUR/USD, similar to a stock GBP / USD AUD / USD NZD / USD Direct quotesFor all other currencies, prices are quoted as the number of units of foreign currency which buys one US dollar USD / JPY = 107.8 This figure rises as JPY weakens and the USD strengthens Foreign Exchange ToolsSpot and ForwardSpotSpot FX mechanicsSpot transactions are cash transactions usually settled on the second businessday (T+2) after the trade date (CAD, TRY, MXN and RUB settle next day) under an agreement between two parties (one of whom is often a bank) to purchase or sell units of a base currency. Example: A EUR/USD quote of 1.1526 [1.15 representing the ‘big figure’, and the 26 expressed as ‘pips’) means a counterparty purchases one EUR in exchange for $1.1526 dollars. Spot trade exposure is referred to as settlement risk, which arises when one party transfers funds in one currency in anticipation of receiving payment in another currency from another party. Spot comprises less than half of overall FX volume, as market participants usually manage forecasted transaction risks using FX derivatives. ForwardThese involve the exchange of one currency for another at a pre-agreed rate on a pre-determined date ranging from T+3 to several weeks or years. This is the formula: F = S_0 \\frac{(1+y_{US})^T}{(1+y_{FC})^T}In continuous time: F_t = S_0e^{(r-r_f)t} Example: Assume the spot EUR/USD FX rate is 1.10 (i.e., US$ 1.10 buys one euro). If the EUR one year benchmark rate is -0.4% and an equivalent USD one-year benchmark is 2.00%, solve for the one year EUR / USD forward rate. 1.10 \\times\\frac{1+0.02}{1-0.004}=1.1265Note that the higher the interest rate in USD in this case, the more expensive it is to purchase EUR in one year’s time given that the buyer foregoes one year of the higher USD interest. Forward Contract mechanicsForeign exchange forward transactions are quoted in ‘points’, or the (positive or negative) difference in the forward and spot quote scaled to the last decimal in the corresponding spot quote. Example: the one-year forward rate of +265 points would apply to EUR/USD in our above example, the corresponding forward rate being 1.10 + (265/10,000) = 1.1265. Many firms hedge transaction exposure for relatively certain forecasted transactions such as accounts receivable or payable as well as investment exposures using currency forward transactions. Non-deliverable FX forwards, swaps and options Exchange Rate Restrictions Although freely floating currencies are predominant among major industrial nations, only around 30 global currencies are freely floating, with others (mostly emerging markets (EM) currencies) subject to controls such as restrictions on trading or exchanging currencies. Non-Deliverable FX Forwards (NDFs)These are similar to standard forward agreements in that they involve the exchange of one currency’s value for another at a pre-agreed rate on a pre-determined date. However, given onshore currency restrictions, they are settled in a convertible currency (usually USD) offshore without a physical exchange of the hedged currency. Example: A corporation enters into a $1 million NDF to purchase BRL and sell USD for settlement in one month at a forward rate of 3.79 BRL/USD. In one month, the NDF breaks even if USD 1,000,000 = BRL 3,790,000. If BRL strengthens to 3.70 instead, the BRL buyer has a gain of BRL 90,000 on the fixing date. The NDF contract is settled offshore for USD 24,324 (= BRL 90,000 / 3.70). Forward versus NDF pricing While interest rate parity helps explain forward pricing, it is generally less the case for NDFs, which may diverge due to expected FX regime change, speculative positioning, capital flows, local onshore rate markets and the relationship between offshore and onshore currency forward markets. If international investors cannot access onshore rate markets or deposits in local currency, NDF prices for the currency are based primarily on the expected future spot exchange rate. FX SwapsCombines offsetting and simultaneously executed FX spot and forward transactions. In an FX swap, the base currency is purchased (or sold) on a spot basis and sold (or purchased) on a forward basis. These are distinct from cross-currency interest rate swaps which involve intermediate cash flows to transform a fixed-income exposure from one currency to another (addressed later). A primary use for FX swaps is to replace or “roll” forward transactions as they approach maturity. FX OptionsLike options in other asset classes, option transactions involve the purchase or sale of the right, but not the obligation to exchange one currency for another at a pre-determined “strike” price on a pre-determined date in the future. Many firms hedge the exposure they face for uncertain forecasted transactions in other currencies using options. Cross-currency swapscross-currency swapsA series of FX forwards designed to convert recurring or periodic cash flows from one currency to another, or effectively the exchange of a floating rate note in one currency with that of another. Example of a JPY investor buying a USD bond: | Time | Action || —— | —————————————————————————————— || T=0 | Investor must sell JPY, buy USD at spot to pay for USD bond || T=t | Investor receives USD coupons and must convert at unknown future JPY/USD spot rate || T=n | Investor receives final USD coupon and principal and must convert back to JPY at unknown future JPY/USD spot rate | floating-floating cross-currency basis swapinvolve both initial and final exchange of principal upon inception and maturity at the current spot rate, with a periodic exchange of floating benchmark rates. Use of cross-currency swaps common among investors seeking bringing offshore investments back to their home currency and issuers hedging translation risk or foreign currency debt issuance. Pricing and Interest Rate Parity Classical interest rate parity requires that currencies may be invested at risk-free zero-coupon rates, a condition which is not satisfied by instruments based upon swap rates Classical interest rate parity requires that currencies may be invested at risk-free zero-coupon rates, a condition which is not satisfied by instruments based upon swap rates","categories":[{"name":"Economics","slug":"Economics","permalink":"http://yoursite.com/categories/Economics/"},{"name":"Finance","slug":"Economics/Finance","permalink":"http://yoursite.com/categories/Economics/Finance/"},{"name":"Risk Management","slug":"Economics/Finance/Risk-Management","permalink":"http://yoursite.com/categories/Economics/Finance/Risk-Management/"}],"tags":[{"name":"NYU","slug":"NYU","permalink":"http://yoursite.com/tags/NYU/"},{"name":"Risk Management","slug":"Risk-Management","permalink":"http://yoursite.com/tags/Risk-Management/"},{"name":"FRM","slug":"FRM","permalink":"http://yoursite.com/tags/FRM/"}]},{"title":"Economic Inequality Papers","slug":"Summary of Economic Inequality Papers","date":"2020-02-10T05:00:00.000Z","updated":"2020-02-10T15:15:06.782Z","comments":true,"path":"2020/02/10/Summary of Economic Inequality Papers/","link":"","permalink":"http://yoursite.com/2020/02/10/Summary of Economic Inequality Papers/","excerpt":"","text":"Heterogeneity and Persistence in Returns to WealthJuly 2018https://www.imf.org/~/media/Files/Publications/WP/2018/wp18171.ashxWe provide a systematic analysis of the properties of individual returns to wealth using 12 years of population data from Norway’s administrative tax records. We document a number of novel results. First, individuals earn markedly different average returns on their net worth (a standard deviation of 22.1%) and on its components. Second, heterogeneity in returns does not arise merely from differences in the allocation of wealth between safe and risky assets: returns are heterogeneous even within narrow asset classes. Third, returns are positively correlated with wealth: moving from the 10th to the 90th percentile of the net worth distribution increases the return by 18 percentage points (and 10 percentage points if looking at net‐of‐tax returns). Fourth, individual wealth returns exhibit substantial persistence over time. We argue that while this persistence partly arises from stable differences in risk exposure and assets scale, it also reflects heterogeneity in sophistication and financial information, as well as entrepreneurial talent. Finally, wealth returns are correlated across generations. We discuss the implications of these findings for several strands of the wealth inequality debate.","categories":[{"name":"Economics","slug":"Economics","permalink":"http://yoursite.com/categories/Economics/"},{"name":"Literature Review","slug":"Economics/Literature-Review","permalink":"http://yoursite.com/categories/Economics/Literature-Review/"},{"name":"Growth & Inequality","slug":"Economics/Literature-Review/Growth-Inequality","permalink":"http://yoursite.com/categories/Economics/Literature-Review/Growth-Inequality/"}],"tags":[{"name":"Papers","slug":"Papers","permalink":"http://yoursite.com/tags/Papers/"},{"name":"Inequality","slug":"Inequality","permalink":"http://yoursite.com/tags/Inequality/"}]},{"title":"Risk Management of Fixed Income","slug":"Financial Risk Management Fixed Income","date":"2020-02-07T05:00:00.000Z","updated":"2020-02-12T22:05:40.197Z","comments":true,"path":"2020/02/07/Financial Risk Management Fixed Income/","link":"","permalink":"http://yoursite.com/2020/02/07/Financial Risk Management Fixed Income/","excerpt":"","text":"This notes is based on the class Financial Risk Management of NYU MFE, including basic conceptions of Fixed Income. Fixed Income OverviewFixed Income Market identify primary risks classify other risks which are incidental to the business maximize return for a given level of risk Compared to Equity MarketWhy equity is special? equity market is with much more volatility because the residuals take over the leftovers and risks of bankruptcy Why Debt market size is larger than equity market? Indebtedness outside of the Private Sector Cost and Other Benefits of Debt Financing and Leverage loans / debt financing is cheaper than equity Why in emerging market, debt market and equity market is inverse? emerging market is more likely to grow then there is more volatility more currency to rush in Advantage of Fixed Income Time Value of Money Cost of Carry Key Instrument of Monetary Policy Discounting Tool for All Other Asset Classes and Investments Key Factor in the Balance Sheet of Financial Firms for lenders: give your money back Bond PricingValue of BondPrice of a bond is the present value (PV) of the promised cash flows Promised cash flows are coupons and repayment of principal at maturity Coupon payments are on regularly scheduled dates Market discount = yield Valuation basics: PV = \\frac{PMT}{(1+r)^1}+\\frac{PMT}{(1+r)^2}+...+\\frac{PMT+FV}{(1+r)^N}If $PMT &lt; r$, priced at a discount below par. 94.583 = \\frac{2}{(1+3\\%)^1}+\\frac{2}{(1+3\\%)^2}+\\frac{2}{(1+3\\%)^3}+\\frac{2}{(1+3\\%)^4}+\\frac{2}{(1+3\\%)^5}+\\frac{102}{(1+3\\%)^6}If $PMT &gt; r$, priced at a premium above par. 107.26 = \\frac{6}{(1+4\\%)^1}+\\frac{6}{(1+4\\%)^2}+\\frac{6}{(1+4\\%)^3}+\\frac{106}{(1+4\\%)^4}If $PMT = r$, priced at par 100 = \\frac{3}{(1+3\\%)^1}+\\frac{3}{(1+3\\%)^2}+\\frac{3}{(1+3\\%)^3}+\\frac{3}{(1+3\\%)^4}+\\frac{103}{(1+3\\%)^5}Yield to MaturityThree conditions Holds the bond to maturity Receives all coupon and principal payments (no default) May reinvest all coupon payments at the same yield (hard to be realistic) Relationship between bond price and YTM Inverse Effect: Duration Convexity Effect: convexity Coupon Effect Maturity Effect: prices of a bond converge to par Quotes and ConventionsFull Price and Flat PriceRelation: \\text{Full (“Dirty”) Price} = \\text{Flat (“Clean”) Price} + \\text{Accrued Interest} Dealers quote clean prices but settle at the dirty price. accrued interest \\text{Accrued Interest} = \\frac{t}{T} \\times PMTwhere t is days from last coupon date to settlement and T is days in coupon period Days conventions: U.S. Treasury notes, bonds (2 - 30 years): Semiannual, Actual / Actual basis U.S. corporate bonds: Semiannual, 30/360 basis European government and corporate bonds: Annual, Actual/Actual basis Examples: A U.S. T bond with 5/15 and 11/15 coupon dates trades with settlement on 6/27. Calculate accrued interest based upon a 5% coupon: Actual days from 5/15 to 6/27 is 43, Actual days from 5/15 to 11/15 is 184. AI = \\frac{43}{184}\\times\\frac{5.00}{2} = 0.584239 ~~\\text{per \\$100 of par} Discount basis or Add-on basisMoney market instruments are short term $(&lt; 1 ~ \\text{year})$ securities with annualized (not compounded) return measures quoted on a discount or add on basis DR: U S commercial paper, Treasury bills and bankers’ acceptances PV = FV \\times (1-\\frac{Days}{Year}\\times DR) AOR: Bank certificates of deposit (CDs), repurchase agreements and LIBOR / EURIBOR PV = \\frac{FV}{(1+\\frac{Days}{Year}\\times AOR)}Example: DR understates investor return / cost of borrowed funds as it divides by the total return at FV versus PV. For example, for a 90 day, $10 MM instrument: T-bill @ DR of 2.25% \\begin{eqnarray*} PV &=& FV \\times (1-\\frac{Days}{Year}\\times DR) \\\\ &=& 10 \\times (1-\\frac{90}{360}\\times 0.0225) \\\\ &=& 9943750 \\end{eqnarray*} Bank CD @ AOR of 2.25% \\begin{eqnarray*} PV &=& \\frac{FV}{(1+\\frac{Days}{Year}\\times AOR)} \\\\ &=& \\frac{10}{(1+\\frac{90}{360}\\times 0.0225)} \\\\ &=& 9944065 \\end{eqnarray*} Periodicity conversionfrom m to n periods (i.e., from monthly to quarterly): \\left(1 + \\frac{APR_m}{m} \\right)^{m} = \\left(1 + \\frac{APR_n}{n} \\right)^{n}Semiannual Bond Equivalent YieldMost common periodicity for USD denominated bond yields is two. An annual rate having a periodicity of two is known as a semiannual bond basis yield, or semiannual bond equivalent yield.Example: What is the SA bond equivalent for a zero priced at 78 2 maturing in 4 years? 78.2 = \\frac{100}{(1+r)^8} \\\\ r = 0.0167Semiannual yield = 0.0334 Matrix Pricingto price a new issued bond Principle of Matrix PricingSuppose a BBB rated pharmaceutical corporation intends to issue a new five year bond. The firm currently has a four year, 4 annual coupon bond outstanding which is priced at 103.1 (full and flat price with accrued interest of zero) The four year rate of return rate required by investors is 3.16%: 103.1 = \\frac{4}{(1+r\\%)^1}+\\frac{4}{(1+r\\%)^2}+\\frac{4}{(1+r\\%)^3}+\\frac{104}{(1+r\\%)^4}, ~r = 3.16\\%Without a four year government bond to calculate a more precise yield spread, we look to three yearand five year ‘on the run’ government bonds yielding 2.10 and 2.45 respectively. The average ofthe two yields is 2.2750%, which is the estimated four year benchmark yield. The estimated yield spread is 88.5 bps over the implied benchmark rate $(0.0316-0.02275 =0.00885)$. The issuer and underwriter then compare and adjust this four year yield spread based upon recent five year issues for companies with similar ratings and/or in the same industry for a proposed spread for the new issuance. Credit spreads Benchmark spread is the spread over the most recently issued government bond of similar maturity G-spread is the spread over actual or interpolated government bond with matched maturity I-spread is the spread over swap rates that match the credit security’s tenor and currency Z-spread is the zero volatility spread measured across each point along the implied spot yield curve Option adjusted spread (OAS) is a generalized Z spread and often most appropriate for portfolios Current yieldCurrent yield is sometimes called the income or interest yield and is the sum of coupon paymentsreceived over the year divided by the flat price. For example, a 10 year, 2 semiannual coupon payment bond is priced at 95 per 100 of par value Its current yield is $\\frac{2}{95} = 2.105%$. This crude measure neglects coupon payment frequency in the numerator and accrued interest in the denominator Structure of Interest ratesyield curvedefinitionThe yield curve on coupon bonds is a snapshot of rates for non-callable securities with similar risk profile across maturities. Yield curves generally have a positive slope given the higher risk of holding longer-term securities Investors typically demand a higher premium to lend for longer The change in price for a given change in yield is higher for longer duration securities Yield curve shape is dynamic, and the term structure is influenced by various factors Short-term policy rates such as U.S. Federal Funds tend to drive short-term yields Long-term Treasury yields are more affected by long-term inflation and growth expectations U.S. Federal Funds have an impact on long-term yield by adjusting short-term yields Term structure theories are driven by expectations, segmentation and liquidity preference Expectations theories rely solely on investor / issuer expectations of future short-term rates Segmented market theory implies that investors / issuers have limited maturity selection Liquidity preference theory combines risk and return as critical factors for issuers / investors shapes - tool to forecast economic activity A positively sloped curve is generally associated with a future increase in real economic activity Curve flattening or inversion where short term yields exceed long term yields portends a drop in short term rates and an expected decline in GDP Influence Factors: Monetary policy (tightening tends to slow the economy and flatten (or invert) the curve) Investor expectations of future short-term rates as influenced by both credit demand and expected inflation General financial market conditions spot curvesZero curves represent one cash flow on a pre-determined date. One example is for zero-coupon government bonds across maturities. This government bond spot curve (or zero or “strip” curve as individual coupons are “stripped” off of coupon bonds) is a set of yields-to-maturity on zero-coupon bonds. While often referred to as “risk-free” yields, this only refers to relative default risk, not inflation or liquidity risk. par curvesPar curves represent par value bonds maturing on pre-determined dates. In addition to the yield curve on coupon bonds and the spot curve on zero-coupon bonds, maturity structure can be assessed using a par curve. A par curve is a sequence of yields-to-maturity such that each bond is priced at par value. The bonds have the same currency, credit risk, liquidity, tax status, and annual yields stated for the same periodicity forward curvesForward curves are a series of forward (future delivery) rates derived from spot rates. Implied forward rates (also known as forward yields) are calculated from spot rates as a break-even reinvestment rate linking return on investment in a shorter-term zero-coupon bond to that of a longer-term zero-coupon bond. Example: There are two alternative loans: A is for 1 year at 2%; B is for 2 Years at 3%. Then $F_{1,1}$ is the one-year rate a year from now which equates 102 at year 1 to 106 at year 2: r = \\frac{106}{102}-1 = 3.9216\\%which means 102 \\times 1.039216 = 106The implied forward rate may be checked by investing 102 for 1 year at this rate. This is also the basic principle of forward rate agreement(FRA): (1 + Z_A)^A \\times(1+IFR_{A,B-A})^{B-A}=(1+Z_B)^BA is the shorter term bond in A periods. B is longer term bond in B periods. Source of bond riskThe market value sensitivity of a bond (or other rate sensitive instrument) to interest rate changes isbased on the bond valuation formula shown below based upon the full (or “dirty”) price MV = \\frac{PMT}{(1+y)^{1-\\frac{t}{T}}} + \\frac{PMT}{(1+y)^{2-\\frac{t}{T}}}+ ... +\\frac{PMT}{(1+y)^{N-\\frac{t}{T}}}where MV is the full price, PMT is the coupon, FV is principal, y is yield per period and the bond settles t days into the T day period with N periods to maturity. It can be expanded as: dMV = (\\frac{\\partial MV}{\\partial y}\\times dy)+(\\frac{1}{2}\\frac{\\partial^2 MV}{\\partial y^2}\\times dy^2)The first expression is a duration and the second term is a convexity, which are often shown divided by 100 on Bloomberg. DurationMacaulay durationmeasures the sensitivity of the bond’s full price (including accrued interest) to changes in the bond’s yield to maturity or, more generally, to changes in benchmark interest rates. It assumes variables other than yield or benchmark rates (including time to maturity) are unchanged: \\text{Macaulay Duration} = -\\frac{\\partial \\text{MV}}{\\partial y}\\times\\frac{1+y}{MV}=-\\frac{\\frac{\\partial \\text{MV}}{MV}}{\\frac{\\partial y}{1+y}}Duration measures instantaneous (or same day) bond price changes and may be considered aweighted average (the share of full price corresponding to each cash flow) of the time to receipt ofpromised cash flows. Using an annual coupon example on a coupon date, we can simplify \\sum_{t=1}^{n}\\frac{(\\text{PV of CF})\\times t}{PV^{full}}Example: For a 6% annual coupon 5 year bond with 5% yield to maturity, the price is: \\frac{6}{(1+r)^1}+\\frac{6}{(1+r)^2}+\\frac{6}{(1+r)^3}+\\frac{6}{(1+r)^4}+\\frac{106}{(1+r)^5} = 104.329477,~ ~ r=5\\% Period Cash Flow Present Value Weight Period $\\times$ Weight 1 6 $\\frac{6}{(1+5\\%)^1}=5.714$ $\\frac{5.714}{104.329}=0.0548$ 0.055 2 6 $\\frac{6}{(1+5\\%)^2}=5.442$ $\\frac{5.442}{104.329}=0.0522$ 0.104 3 6 $\\frac{6}{(1+5\\%)^3}=5.183$ $\\frac{5.183}{104.329}=0.0497$ 0.149 4 6 $\\frac{6}{(1+5\\%)^4}=4.936$ $\\frac{4.936}{104.329}=0.0473$ 0.189 5 106 $\\frac{106}{(1+5\\%)^5}=83.054$ $\\frac{83.054}{104.329}=0.7961$ 3.981 104.329 Duration 4.478 Modified durationModified duration is a minor adjustment to Macaulay duration (dividing by 1 + yield per period) and isdirectly related to the percentage change in a bond’s market value: \\text{Modified Duration} = -\\frac{\\text{Macaulay Duration}}{(1+\\frac{r}{c})}This is a linear estimate of a fixed-rate bond’s price change for a given yield to maturity change: \\%\\Delta PV = -\\text{Modified Duration} \\times\\Delta\\text{Yield}Example: How does the bond price in the prior example (6% annual 5 yr coupon bond with a 5% yield to maturity) change if yields decline 100 bps? Given a Macaulay Duration of 4.478, the Modified Duration is $\\frac{4.478}{1.05}=4.265$. Therefore, -4.265 \\times (-100bps) \\times \\%= 4.265\\%there will be 4.2645% price appreciation. The error: For original bond price: \\frac{6}{(1+r)^1}+\\frac{6}{(1+r)^2}+\\frac{6}{(1+r)^3}+\\frac{6}{(1+r)^4}+\\frac{106}{(1+r)^5} = 104.329477,~ ~ r=5\\%For the new price estimate: 104.329477 \\times (1 + 4.2645\\%) = 108.77863For the Actual new bond price: \\frac{6}{(1+r)^1}+\\frac{6}{(1+r)^2}+\\frac{6}{(1+r)^3}+\\frac{6}{(1+r)^4}+\\frac{106}{(1+r)^5} = 108.903645,~ ~ r=4\\%There are $108.90365 - 108.77863 = -.125$ difference in price explained by the non-linearity of the price-yield relationship. Effective DurationEffective Duration is the sensitivity of a bond’s price to a change in a benchmark yield curve such as a government par curve, similar to approximate modified duration except it involves a benchmark and also may be used for more complex bonds or portfolios of complex bonds \\text{Effective Duration} = \\frac{PV_{-}-PV_{+}}{2\\times(\\Delta\\text{Curve})(PV_0)}Money Duration (Dollar Duration)Dollar Duration is the price change for a given change in yield in units of the currency in which the bond is denominated (as opposed to a percentage change) stated per 100 of par or based upon an actualportfolio position (known as “dollar duration in the U.S.) \\text{Dollar Duration} = -\\frac{\\part MV}{\\part y}=\\text{Modified Duration}\\times MV \\Delta PV = -\\text{Dollar Duration} \\times\\Delta\\text{Yield}A related statistic is the present value of a basis point: \\text{PV of a Basis Point} = \\frac{PV_{-} - PV_{+}}{2}This is the dollar value (DV01) or present value of a basis point (PV01), which is calculated by increasing and decreasing the yield by 1 bp to get the price change. Portfolio DurationPortfolio duration is the sum of market value weighted durations of component positions. Positive is a long position and negative is a short position Practitioners use duration and DV 01 PVBP statistics to analyze cash and synthetic positions to gauge net exposure, profitability and/or evaluate trade ideas Example: A bond trader holds two 2 year U.S. Treasury notes and one 30 year U S Treasury bond. Each bond has a face value of $1000000 with 2 year duration of 1.94 and the 30 year duration of 19.69. Portfolio duration is $7.86 = \\frac{2}{3} \\times 1.94 + \\frac{1}{3} \\times 19.69$ Portfolio DV01 equals $7.86 \\times \\frac{\\$3000000}{10 000} = \\$2358$ If 2 year and 30 year yields rise 10 bps, her portfolio LOSS $\\$23580 = \\$2358 \\times 10 bps$ Coupon: For zero-coupon bonds, duration = maturity. As Coupons increase, duration decrease. Maturity: increase as maturity increase. Time: As maturity decrease to 0, time goes down Yield: As yields increase, duration decrease. ConvexityWhile modified duration is a linear approximation of price changes for a given change in yield, the true price/yield relationship is a convexity adjusted equation expressed as follows: \\%\\Delta PV = -\\text{Modified Duration} \\times\\Delta\\text{Yield} + \\frac{1}{2}\\times\\text{Convexity}\\times(\\Delta Yield)^2The second convexity term is positive for traditional (option free) fixed rate bond for a yield increase or decrease. Convexity may be calculated with tables, precisely derived or closely approximated: \\text{Convexity} = \\frac{PV_-+PV_+}{(\\Delta \\text{yield})^2\\times PV_0}Example: Calculate the change in full bond price from our prior example (6% annual 5 yr coupon bond with a 5% yield to maturity) given a 100 bp yield decline with the convexity adjustment? Bond PortfolioBond Portfolio Duration and ConvexityOther ProductsRisk free rate: Repurchase agreementInterest Rate Swap","categories":[{"name":"Economics","slug":"Economics","permalink":"http://yoursite.com/categories/Economics/"},{"name":"Finance","slug":"Economics/Finance","permalink":"http://yoursite.com/categories/Economics/Finance/"},{"name":"Risk Management","slug":"Economics/Finance/Risk-Management","permalink":"http://yoursite.com/categories/Economics/Finance/Risk-Management/"}],"tags":[{"name":"NYU","slug":"NYU","permalink":"http://yoursite.com/tags/NYU/"},{"name":"Risk Management","slug":"Risk-Management","permalink":"http://yoursite.com/tags/Risk-Management/"},{"name":"FRM","slug":"FRM","permalink":"http://yoursite.com/tags/FRM/"}]},{"title":"Applied English in Daily Life","slug":"EnglishPod Daily Life","date":"2020-02-03T05:00:00.000Z","updated":"2020-02-10T15:09:33.000Z","comments":true,"path":"2020/02/03/EnglishPod Daily Life/","link":"","permalink":"http://yoursite.com/2020/02/03/EnglishPod Daily Life/","excerpt":"","text":"Restaurant107c -Restaurant- complaining at a restaurant an establishment: _in this kind of establishment_ in a restaurant content: a place of business too runny The soup is too runny (too liquid) a little bit thicker over seasoned too salty inedible disgusting, not physically you cannot eat rubbery swallow over-cooked a liver of duck liver sliver: slice a sliver of cake and no ice-cream cut me a sliver you call this sliver of beef on my plate a meal? shell out I am gonna have to shell out for a present. she shelled out the eight hundred bucks for the tickets. cannot afford to shell out four hundred dollars my hard earned bucks / cash a doggy bag Mobile106c -Shop- mobile phone plan prepaid plan / monthly rate plan activate my cellphone / bank account make the cellphone work handset: the device / cellphone rollover plan to rollover fee service fee cannot be something which can be touched wrong: bottle fee be compatible with applications compatible with the cellphone roommates are compatible with the party what’s the catch catch: condition in luck you are in luck (used by the second person) throw sth. in : include for free voice mail screen your calls Internet Servicec137 - Getting Internet Service broadband internet bandwidth dialup download download something a download kbps: kilobytes per second mbps: megabytes per second lag: delay, slowness there’s too much lag: speed is slow router wireless router get in the way of a connect firewall I have no idea: I don’t know bucks: Dallas throw in for free include it for free I will buy computer if you throw in a pair of headphones, deal? salesman threw in a subscription to the local newspaper for buying his product.","categories":[{"name":"Languages","slug":"Languages","permalink":"http://yoursite.com/categories/Languages/"},{"name":"English","slug":"Languages/English","permalink":"http://yoursite.com/categories/Languages/English/"},{"name":"EnglishPod","slug":"Languages/English/EnglishPod","permalink":"http://yoursite.com/categories/Languages/English/EnglishPod/"}],"tags":[{"name":"English","slug":"English","permalink":"http://yoursite.com/tags/English/"},{"name":"Speaking","slug":"Speaking","permalink":"http://yoursite.com/tags/Speaking/"}]},{"title":"Applied English for Office and Work","slug":"EnglishPod Office","date":"2020-02-03T05:00:00.000Z","updated":"2020-02-09T22:28:15.046Z","comments":true,"path":"2020/02/03/EnglishPod Office/","link":"","permalink":"http://yoursite.com/2020/02/03/EnglishPod Office/","excerpt":"","text":"InterviewLate113c - Sorry I’m late when you arrive late good excuses get tied up I got tied up at the office. I was tied up on the phone all afternoon and didn’t get any work done get tied up in traffic on the way here. a huge traffic jam a huge pileup accident get pied on top of each other / get accident running late I am running late. (The speaker knows it will be late) Jane is running late, she’ll be here. run over a meet ran over 15mins longer than expected be here in a sec very very soon be here in a minute get stuck in a traffic in the traffic jam the traffic is backed up for miles Deadline116c - You missed the deadline tantamount behind schedule procrastinate glitch an error rationalize an psychological word: try to convince sb about sth You cannot rationalize your son’s behavior. rationalize buying such an expensive pair of shoes stop trying to rationalize it phony: false, fake a fairly significant deadline fairly: kind of, sort of very important essentially blame essentially: pretty much I am not trying to pass the buck here I am not trying to pass the blame, put the responsibility on someone else use something as a crutch crutch: wooden or metal sticks to walk with excuses I was using alcohol as a crutch to get through the day. he uses his disability as a crutch. stop using your weight as a crutch. assuming guilt lose face in over your hand Communication108c - Bad News, Boss shoulder the burden go under: bankrupt lay it on me tell me (the bad news) for crying out loud Oh, my God how can I put this … let’s just say that… soften it up a bit Day offc115 - I don’t feel so good a hangover drink fest dizzy / spinning throw up dehydrated","categories":[{"name":"Languages","slug":"Languages","permalink":"http://yoursite.com/categories/Languages/"},{"name":"English","slug":"Languages/English","permalink":"http://yoursite.com/categories/Languages/English/"},{"name":"EnglishPod","slug":"Languages/English/EnglishPod","permalink":"http://yoursite.com/categories/Languages/English/EnglishPod/"}],"tags":[{"name":"English","slug":"English","permalink":"http://yoursite.com/tags/English/"},{"name":"Speaking","slug":"Speaking","permalink":"http://yoursite.com/tags/Speaking/"}]},{"title":"Applied English in Social Activities","slug":"EnglishPod Social","date":"2020-02-03T05:00:00.000Z","updated":"2020-02-09T22:26:35.448Z","comments":true,"path":"2020/02/03/EnglishPod Social/","link":"","permalink":"http://yoursite.com/2020/02/03/EnglishPod Social/","excerpt":"","text":"Social114c - 1980’s English butt ugly air head a major dweeb dweeb : nerd major : big / serious bad to the bone super cool (from a song) get with someone / do the nasty (more rude) have sex with don’t have a cow don’t get really angry / freak out make a big deal psych “just kidding” show a little bit old-fashioned 135c cheer up sad: I am a bit down someone is grouchy anxiety somebody is stressed out you have too much stuff to do nerve wracking being a doctor is one the most nerve wracking jobs in the word on edge easily anger he seems on edge, doesn’t he? lose your temper / lose one’s temper getting angry get brushed off blow your top every one has different remedies cheer you up you are something else I cannot believe you + keep my eye out for that Smokingb125 - no smoking willpower I don’t have the willpower willpower in discipline urge temptation social smoker vs habitual smoker light up cut down quit","categories":[{"name":"Languages","slug":"Languages","permalink":"http://yoursite.com/categories/Languages/"},{"name":"English","slug":"Languages/English","permalink":"http://yoursite.com/categories/Languages/English/"},{"name":"EnglishPod","slug":"Languages/English/EnglishPod","permalink":"http://yoursite.com/categories/Languages/English/EnglishPod/"}],"tags":[{"name":"English","slug":"English","permalink":"http://yoursite.com/tags/English/"},{"name":"Speaking","slug":"Speaking","permalink":"http://yoursite.com/tags/Speaking/"}]},{"title":"Applied English in Home","slug":"EnglishPod Home","date":"2020-02-03T05:00:00.000Z","updated":"2020-02-09T22:18:44.810Z","comments":true,"path":"2020/02/03/EnglishPod Home/","link":"","permalink":"http://yoursite.com/2020/02/03/EnglishPod Home/","excerpt":"","text":"Fix112c - Dr. Plumber clogged faucet flushing the toilet shut off not far from the truth trades person works in a trade Babyc118 - baby talk widdle : little it’s your turn I could just eat it up: it’s so cute","categories":[{"name":"Languages","slug":"Languages","permalink":"http://yoursite.com/categories/Languages/"},{"name":"English","slug":"Languages/English","permalink":"http://yoursite.com/categories/Languages/English/"},{"name":"EnglishPod","slug":"Languages/English/EnglishPod","permalink":"http://yoursite.com/categories/Languages/English/EnglishPod/"}],"tags":[{"name":"English","slug":"English","permalink":"http://yoursite.com/tags/English/"},{"name":"Speaking","slug":"Speaking","permalink":"http://yoursite.com/tags/Speaking/"}]},{"title":"Applied English in Love","slug":"EnglishPod Love","date":"2020-02-03T05:00:00.000Z","updated":"2020-02-09T22:27:00.720Z","comments":true,"path":"2020/02/03/EnglishPod Love/","link":"","permalink":"http://yoursite.com/2020/02/03/EnglishPod Love/","excerpt":"","text":"Love117c - I am sorry I love you IX","categories":[{"name":"Languages","slug":"Languages","permalink":"http://yoursite.com/categories/Languages/"},{"name":"English","slug":"Languages/English","permalink":"http://yoursite.com/categories/Languages/English/"},{"name":"EnglishPod","slug":"Languages/English/EnglishPod","permalink":"http://yoursite.com/categories/Languages/English/EnglishPod/"}],"tags":[{"name":"English","slug":"English","permalink":"http://yoursite.com/tags/English/"},{"name":"Speaking","slug":"Speaking","permalink":"http://yoursite.com/tags/Speaking/"}]},{"title":"Applied English in Emotion","slug":"EnglishPod Emotion","date":"2020-02-03T05:00:00.000Z","updated":"2020-02-09T22:29:01.489Z","comments":true,"path":"2020/02/03/EnglishPod Emotion/","link":"","permalink":"http://yoursite.com/2020/02/03/EnglishPod Emotion/","excerpt":"","text":"Scared119c - being scared haunt coward be a coward be coward goosebumps: chicken skin scaredy cat some body afraid of everything scary looking mansion mansion: a big house looking scary adj + looking creepy looking craziest looking gives me the creeps something make you uncomfortable and scared","categories":[{"name":"Languages","slug":"Languages","permalink":"http://yoursite.com/categories/Languages/"},{"name":"English","slug":"Languages/English","permalink":"http://yoursite.com/categories/Languages/English/"},{"name":"EnglishPod","slug":"Languages/English/EnglishPod","permalink":"http://yoursite.com/categories/Languages/English/EnglishPod/"}],"tags":[{"name":"English","slug":"English","permalink":"http://yoursite.com/tags/English/"},{"name":"Speaking","slug":"Speaking","permalink":"http://yoursite.com/tags/Speaking/"}]},{"title":"Applied English in Formal situation","slug":"EnglishPod Formal","date":"2020-02-03T05:00:00.000Z","updated":"2020-02-09T22:31:37.025Z","comments":true,"path":"2020/02/03/EnglishPod Formal/","link":"","permalink":"http://yoursite.com/2020/02/03/EnglishPod Formal/","excerpt":"","text":"Politics129c - Presidential Speech pre-eminence state of being the leader of something pre-eminent adj pre-eminent expert on nuclear his pre-eminence has never been questioned foster progress a foster child take care of a child, because the parents can’t look after him yearn for sth.(freedom) really want sth. Almost painful scourges of poverty be a scourage eliminate the scourge of cancer wipe out the scourge of terrorism We now stand ten years past the midpoint of the century we now stand before you to declare our love we now stand before this court we now stand before this great challenge despite … carnage: a massacre, many people got hurt or killed","categories":[{"name":"Languages","slug":"Languages","permalink":"http://yoursite.com/categories/Languages/"},{"name":"English","slug":"Languages/English","permalink":"http://yoursite.com/categories/Languages/English/"},{"name":"EnglishPod","slug":"Languages/English/EnglishPod","permalink":"http://yoursite.com/categories/Languages/English/EnglishPod/"}],"tags":[{"name":"English","slug":"English","permalink":"http://yoursite.com/tags/English/"},{"name":"Speaking","slug":"Speaking","permalink":"http://yoursite.com/tags/Speaking/"}]},{"title":"Applied English in Art","slug":"EnglishPod Art","date":"2020-02-03T05:00:00.000Z","updated":"2020-02-09T22:24:27.933Z","comments":true,"path":"2020/02/03/EnglishPod Art/","link":"","permalink":"http://yoursite.com/2020/02/03/EnglishPod Art/","excerpt":"","text":"Music127c - I love that song! tune / genre abbreviation: acronym The pressure is on (you) double or nothing the lyrics were more profound. You just get a lot of temporary music that doesn’t really transcend into the future. They fade into history","categories":[{"name":"Languages","slug":"Languages","permalink":"http://yoursite.com/categories/Languages/"},{"name":"English","slug":"Languages/English","permalink":"http://yoursite.com/categories/Languages/English/"},{"name":"EnglishPod","slug":"Languages/English/EnglishPod","permalink":"http://yoursite.com/categories/Languages/English/EnglishPod/"}],"tags":[{"name":"English","slug":"English","permalink":"http://yoursite.com/tags/English/"},{"name":"Speaking","slug":"Speaking","permalink":"http://yoursite.com/tags/Speaking/"}]},{"title":"Risk Management Basics","slug":"Financial Risk Management Basics","date":"2020-02-02T05:00:00.000Z","updated":"2020-02-04T03:55:10.125Z","comments":true,"path":"2020/02/02/Financial Risk Management Basics/","link":"","permalink":"http://yoursite.com/2020/02/02/Financial Risk Management Basics/","excerpt":"","text":"This notes is based on the class Financial Risk Management of NYU MFE, including basic conceptions of Risk Management. Basic QuestionsWhat is riskrisk is a material adverse financial or non financial outcome for any public or private enterprise, authority or individual address the risk by identify primary risks classify other risks which are incidental to the business maximize return for a given level of risk Whose riskBanks and other financial institutions act as intermediaries between consumers, businesses and public not for profit entities Sources of risk and return directly indirectly derived from financial markets Bank taking deposits and extending loans Non-bank financial institutions: Asset managers Asset owners Insurance companies Hedge funds Non-financial institutions(corporations) Sources of risk and return are conversion of inputs (labor and raw materials) into intermediate or final goods services operating cycle (short) capital investment cycle (long) What is Financial Risk Management Formal treatment based upon Modern Portfolio Theory Mean - variance optimization based upon asset-liability management Financial Instrument Characteristics exchange or over the counter frequently or never, what is cash or liquidation value bow are prices distributed under various market scenarios how assets and liabilities interact in a portfolio difference in risk management among: banks non-bank financial institutions non-financial companies Why and how to manage financial riskWhy Society and the domestic and global economies depend upon a stable financial system Prudent financial risk management in non financial firms can enhance firm value, avoid bankrupt. HowQuantitative Risk Management Introduce a more rigorous mathematical basis in current practice Establish techniques and tools to go beyond current practice and address deficiencies Financial ReturnReturns on Financial AssetsDefinitiontwo forms of return: Periodic cash flows capital gain or loss further adjustment based on fees, taxes, inflation, functional currency or leverage Single Period: \\begin{eqnarray*} R &=& \\frac{P_t-P_{t-1}+D_t}{P_{t-1}} = \\frac{P_t}{P_{t-1}}-1+\\frac{D_t}{P_{t-1}} \\\\ &=& \\text{capital gain} ~ + ~ \\text{dividend or coupon yield} \\end{eqnarray*}Multiple Period: Arithmetic (mean) return for asset $i$ \\begin{eqnarray*} \\bar{R_i} = \\frac{R_{i1}+R_{i2}+...+R_{i,{T-1}}+R_{iT}}{T} = \\frac{1}{T}\\sum_{t=1}^{T}R_{it} \\end{eqnarray*} Geometric mean return: \\begin{eqnarray*} \\overline{R_{Gi}} &=& \\sqrt[T]{(1+R_{i1})*(1+R_{i2})*...*(1+R_{i,T-1})*(1+R_{iT})}-1 \\\\ &=& \\sqrt[T]{\\prod_{t=1}^{T}(1+R_{it})}-1 \\end{eqnarray*} Generalized / Power Mean: for not all equivalent positive number $x_i$, M_p(x_1, x_2, ..., x_n) = \\left(\\frac{1}{n}\\sum\\limits_{i=1}^{n}x_{i}^{p}\\right)^{\\frac{1}{p}}is a monotone increasing function. Then M_{-\\infty}(x) \\leq...\\leq M_{-1}(x) \\leq M_{0}(x) \\leq M_{1}(x) \\leq M_{2}(x) \\leq ...\\leq M_{+\\infty}(x)Here, \\begin{eqnarray*} M_{-\\infty}(x) &=& \\lim_{p \\to -\\infty}M_{p}(x) = \\min(x_1, ..., x_n) \\\\ M_{-1}(x) &=& \\frac{n}{\\frac{1}{x_1}+...+\\frac{1}{x_n}} \\\\ M_{0}(x) &=& \\lim_{p \\to 0}M_{p}(x) = \\sqrt[n]{x_1...x_n} \\\\ M_{1}(x) &=& \\frac{x_1+...+x_n}{n} \\\\ M_{2}(x) &=& \\sqrt{\\frac{x_1^2+...+x_n^2}{n}} \\\\ M_{+\\infty}(x) &=& \\lim_{p \\to \\infty}M_{p}(x) = \\max(x_1, ..., x_n) \\end{eqnarray*}Multiple Periods with intermediate cash flowsMoney-weighted returns (internal rate of return) \\sum_{t=0}^{T}\\frac{CF_t}{(1+IRR)^t}=0Usually, when $t=0$, $CF$ is negative, without discounting. Varying Periods of Return:convert daily, weekly, monthly or quarterly returns to annual: r_{annual} = (1+r_{period})^c-1Return on Multiple Assets:Portfolio returns are a weighted average, for asset $i$ with a return of $R_i$ and a percentage weight of $w_i$: R_p = \\sum_{i=1}^{N}w_iR_i,~ \\sum_{i=1}^{N}w_i = 1Financial Asset Risk:Variance $\\sigma^2$ and standard deviation $\\sigma $ measure: \\sigma^2=\\frac{\\sum\\limits_{t=1}^{T}(R_t-\\mu)^2}{T}Sample variance $S^2$and standard deviation $S$ measure: S^2=\\frac{\\sum\\limits_{t=1}^{T}(R_t-\\overline{R})^2}{T-1}Portfolio Risk and Return Measure: \\sigma_{p}^2=\\left(\\sum_{i=1}^{N}w_i^2\\sigma_{i}^2 + \\sum_{i,j=1,i \\not= j}^{N}w_iw_j\\rho_{ij}\\sigma_i\\sigma_j \\right), ~ \\sum_{i=1}^{N}w_i = 1Value at Risk (VaR)Statistical measurement of expected loss with a given level of confidence over a given time period Basic VaR models rely on historical return and risk and assume normally distributed returns Time period and confidence level for VaR are important. \\begin{eqnarray*} \\text{VaR} &=& \\text{Volatility} \\times \\text{Unit Value} \\times \\text{Position Size} \\times \\text{Time} \\times \\text{Confidence} \\\\ &=& (\\%) \\times (\\$) \\times (\\text{w/o leverage}) \\times (\\sqrt{\\text{time}}) \\times (\\text{standard deviations}) \\end{eqnarray*}Example: 1-month 99% VaR for 20000 S&amp;P 500 equivalents: 1.50\\% \\times 1200 \\times 20000 \\times \\sqrt{30} \\times 2.326 = 4586410which means 1% chance of losing more than $4,586,410 in one month Key Assumptions and Limitations: Assumed Homoskedasticity of Markets Liquidity Risk Danger of Generalized Use Computational Issues Source of Volatility Derivative Based Exposures Risk Management Process identification measurement monitoring reporting Risk CategorizationMarket RiskDefinitionChange in value of securities or derivatives whose value is derived from market prices. Categories of market risk (Market) Liquidity Risk Asset-Liability Management Risk Direct Risk price / market value decrease indirect Implied Volatility Implied Correlation Correlation within Asset Classes Correlation Across Asset Classes Cash versus Derivative Risks Mark to market versus accrual Credit RiskDefinitionFinancial performance under a contractual relationship, repayment of principal, interest or another obligation under a financial agreement (bond or derivative) Performance risk encompasses credit and non credit elements (commercial dispute) Borrower’s non performance affect similar claims to various creditors Lenders and bondholders are compensated via a spread derived from the probability of default and the loss given default Categories of credit risk Lending Risk (loan) Unsecured Lending Risk (credit card with high interest, rely on borrower cash flow) Secured Lending Risk (mortgage with purchasing house, collateral pledged to lender) Default Risk (Bond) Standardized instrument issued by public or private entities Bond credit provisions in an indenture Sovereign Risk (Credit) Liquidity Risk (take money back at the same time) Counterparty Risk (Derivative) Combination of credit and market risk securities: collateral value falls and secured exposure becomes partially secured or unsecured Lender protect themselves in three ways: Prevent increases in debt or diversion of assets elsewhere Avoid favoring another class of creditors Ensure that borrower maintains enough assets to repay interest and principal Operational RiskHow institutions put strategies into practice by employing professionals, developing best practices and establishing infrastructure to achieve strategic objectives people Key person risk employee or trader risk processes Procedural breakdowns Review controls and incentives systems Other RisksStrategic RiskRegulatory RiskLegal, political or environmental RiskKey elements in risk management Compliance Regulatory reporting requirements Controls Ensuring a bank can maintain standards and prevent errors, fraud or data breaches Portfolio Management Properly balancing risk and reward in trading, lending or investments Communication Disclosure to rating agencies, counterparties and other stakeholders (investor day) Planning Understanding specific risk scenarios for contingency planning Failure to: Accurately measure known risks Adequately take risks into account Communicate risks to top management Adequately and consistently monitor of risks Manage risks properly Use appropriate risk metrics","categories":[{"name":"Economics","slug":"Economics","permalink":"http://yoursite.com/categories/Economics/"},{"name":"Finance","slug":"Economics/Finance","permalink":"http://yoursite.com/categories/Economics/Finance/"},{"name":"Risk Management","slug":"Economics/Finance/Risk-Management","permalink":"http://yoursite.com/categories/Economics/Finance/Risk-Management/"}],"tags":[{"name":"NYU","slug":"NYU","permalink":"http://yoursite.com/tags/NYU/"},{"name":"Risk Management","slug":"Risk-Management","permalink":"http://yoursite.com/tags/Risk-Management/"},{"name":"FRM","slug":"FRM","permalink":"http://yoursite.com/tags/FRM/"}]},{"title":"Asset Pricing - Fixed Income","slug":"Summary of Asset Pricing Fixed Income","date":"2020-01-30T05:00:00.000Z","updated":"2020-01-30T15:23:52.000Z","comments":true,"path":"2020/01/30/Summary of Asset Pricing Fixed Income/","link":"","permalink":"http://yoursite.com/2020/01/30/Summary of Asset Pricing Fixed Income/","excerpt":"","text":"TheoryAn incomplete equilibrium with a stochastic annuity29 January 2020 from FShttp://link.springer.com/article/10.1007/s00780-020-00415-6?utm_source=researcher_app&amp;utm_medium=referral&amp;utm_campaign=RESR_MRKT_Researcher_inboundWe prove the global existence of an incomplete, continuous-time finite-agent Radner equilibrium in which exponential agents optimise their expected utility over both running consumption and terminal wealth. The market consists of a traded annuity, and along with unspanned income, the market is incomplete. Set in a Brownian framework, the income is driven by a multidimensional diffusion and in particular includes mean-reverting dynamics. The equilibrium is characterised by a system of fully coupled quadratic backward stochastic differential equations, a solution to which is proved to exist under Markovian assumptions. We also show that the equilibrium allocations lead to Pareto-optimal allocations only in exceptional situations.","categories":[{"name":"Economics","slug":"Economics","permalink":"http://yoursite.com/categories/Economics/"},{"name":"Literature Review","slug":"Economics/Literature-Review","permalink":"http://yoursite.com/categories/Economics/Literature-Review/"},{"name":"Asset pricing","slug":"Economics/Literature-Review/Asset-pricing","permalink":"http://yoursite.com/categories/Economics/Literature-Review/Asset-pricing/"}],"tags":[{"name":"Asset Pricing","slug":"Asset-Pricing","permalink":"http://yoursite.com/tags/Asset-Pricing/"},{"name":"Papers","slug":"Papers","permalink":"http://yoursite.com/tags/Papers/"},{"name":"Fixed Income","slug":"Fixed-Income","permalink":"http://yoursite.com/tags/Fixed-Income/"}]},{"title":"Asset Pricing - Derivatives","slug":"Summary of Asset Pricing Derivatives","date":"2020-01-30T05:00:00.000Z","updated":"2020-02-10T14:20:14.028Z","comments":true,"path":"2020/01/30/Summary of Asset Pricing Derivatives/","link":"","permalink":"http://yoursite.com/2020/01/30/Summary of Asset Pricing Derivatives/","excerpt":"","text":"OptionReal-Option Valuation in Multiple Dimensions Using Poisson Optional Stopping Times28 January 2020 from JFQAhttp://pdfs.semanticscholar.org/94a1/56cdc6359a0c90061bb678fa9ef32ed5be6c.pdfWe provide a new framework for valuing multidimensional real options where opportunities to exercise the option are generated by an exogenous Poisson process, which can be viewed as a liquidity constraint on decision times. This approach, which we call the Poisson optional stopping times (POST) method, finds the value function as a monotone sequence of lower bounds. In a case study, we demonstrate that the frequently used quasi-analytic method yields a suboptimal policy and an inaccurate value function. The proposed method is demonstrably correct, straightforward to implement, reliable in computation, and broadly applicable in analyzing multidimensional option-valuation problems. CreditRuin probabilities for a Lévy-driven generalised Ornstein–Uhlenbeck process04 December 2019 from FShttp://link.springer.com/article/10.1007/s00780-019-00413-3?utm_source=researcher_app&amp;utm_medium=referral&amp;utm_campaign=RESR_MRKT_Researcher_inbound We study the asymptotics of the ruin probability for a process which is the solution of a linear SDE defined by a pair of independent Lévy processes. Our main interest is a model describing the evolution of the capital reserve of an insurance company selling annuities and investing in a risky asset. Let $\\beta &gt; 0$ be the root of the cumulant-generating function ${H}$ of the increment $V_1$ of the log-price process. We show that the ruin probability admits the exact asymptotic $Cu^{-\\beta}$ as the initial capital $u \\to \\infty$, assuming only that the law of $V_{T}$ is non-arithmetic without any further assumptions on the price process.","categories":[{"name":"Economics","slug":"Economics","permalink":"http://yoursite.com/categories/Economics/"},{"name":"Literature Review","slug":"Economics/Literature-Review","permalink":"http://yoursite.com/categories/Economics/Literature-Review/"},{"name":"Asset pricing","slug":"Economics/Literature-Review/Asset-pricing","permalink":"http://yoursite.com/categories/Economics/Literature-Review/Asset-pricing/"}],"tags":[{"name":"Asset Pricing","slug":"Asset-Pricing","permalink":"http://yoursite.com/tags/Asset-Pricing/"},{"name":"Papers","slug":"Papers","permalink":"http://yoursite.com/tags/Papers/"}]},{"title":"Python Regular Expression Basics","slug":"Python Regular Expression Basics","date":"2020-01-29T05:00:00.000Z","updated":"2020-01-29T20:54:47.564Z","comments":true,"path":"2020/01/29/Python Regular Expression Basics/","link":"","permalink":"http://yoursite.com/2020/01/29/Python Regular Expression Basics/","excerpt":"","text":"Regular Expression Quick Link12345678910111213141516^ Matches the beginning of a line$ Matches the end of the line. Matches any character\\s Matches whitespace\\S Matches any non-whitespace character* Repeats a character zero or more times*? Repeats a character zero or more times (non-greedy)+ Repeats a character one or more times+? Repeats a character one or more times (non-greedy)[aeiou] Matches a single character in the listed set[^XYZ] Matches a single character not in the listed set[a-z0-9] The set of characters can include a range( Indicates where string extraction is to start) Indicates where string extraction is to end","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Programming","slug":"Computer-Science/Programming","permalink":"http://yoursite.com/categories/Computer-Science/Programming/"},{"name":"Python","slug":"Computer-Science/Programming/Python","permalink":"http://yoursite.com/categories/Computer-Science/Programming/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"Regular Expression","slug":"Regular-Expression","permalink":"http://yoursite.com/tags/Regular-Expression/"}]},{"title":"Economic Growth Papers","slug":"Summary of Economic Growth Papers","date":"2020-01-28T05:00:00.000Z","updated":"2020-02-10T14:50:21.939Z","comments":true,"path":"2020/01/28/Summary of Economic Growth Papers/","link":"","permalink":"http://yoursite.com/2020/01/28/Summary of Economic Growth Papers/","excerpt":"","text":"Global EconomyThe Global Diffusion of Ideas05 February 2020https://onlinelibrary.wiley.com/doi/abs/10.3982/ECTA14044?af=R&amp;utm_source=researcher_app&amp;utm_medium=referral&amp;utm_campaign=RESR_MRKT_Researcher_inboundWe provide a tractable, quantitatively‐oriented theory of innovation and technology diffusion to explore the role of international trade in the process of development. We model innovation and diffusion as a process involving the combination of new ideas with insights from other industries or countries. We provide conditions under which each country’s equilibrium frontier of knowledge converges to a Fréchet distribution, and derive a system of differential equations describing the evolution of the scale parameters of these distributions, that is, countries’ stocks of knowledge. The model remains tractable with many asymmetric countries and generates a rich set of predictions about how the level and composition of trade affect countries’ frontiers of knowledge. We use the framework to quantify the contribution of bilateral trade costs to long‐run changes in TFP and individual post‐war growth miracles. For our preferred calibration, we find that both gains from trade and the fraction of variation of TFP growth accounted for by changes in trade more than double relative to a model without diffusion.","categories":[{"name":"Economics","slug":"Economics","permalink":"http://yoursite.com/categories/Economics/"},{"name":"Literature Review","slug":"Economics/Literature-Review","permalink":"http://yoursite.com/categories/Economics/Literature-Review/"},{"name":"Growth & Inequality","slug":"Economics/Literature-Review/Growth-Inequality","permalink":"http://yoursite.com/categories/Economics/Literature-Review/Growth-Inequality/"}],"tags":[{"name":"Papers","slug":"Papers","permalink":"http://yoursite.com/tags/Papers/"},{"name":"Economic Growth","slug":"Economic-Growth","permalink":"http://yoursite.com/tags/Economic-Growth/"},{"name":"Inequality","slug":"Inequality","permalink":"http://yoursite.com/tags/Inequality/"}]},{"title":"Behavioral Finance Papers","slug":"Summary of Behavioral Finance Papers","date":"2020-01-28T05:00:00.000Z","updated":"2020-02-09T20:57:01.000Z","comments":true,"path":"2020/01/28/Summary of Behavioral Finance Papers/","link":"","permalink":"http://yoursite.com/2020/01/28/Summary of Behavioral Finance Papers/","excerpt":"","text":"Empirical Behavioral Asset PricingGoogling Investor Sentiment around the World28 January 2020 from JFQAhttp://pdfs.semanticscholar.org/d881/c405d186d0f15c22c258555f024f03401cf7.pdfWe study how investor sentiment affects stock prices around the world. Relying on households’ Google search behavior, we construct a weekly measure of sentiment for 38 countries during 2004–2014. We validate the sentiment index in tests using sports outcomes the sentiment measure is a contrarian predictor of country-level market returns. Furthermore, we document an important role of global sentiment in stock markets. Security analysts and capital market anomalies28 January 2020 from JFEhttps://www.sciencedirect.com/science/article/pii/S0304405X20300192?dgcid=rss_sd_all&amp;utm_source=researcher_app&amp;utm_medium=referral&amp;utm_campaign=RESR_MRKT_Researcher_inboundWe examine the value and efficiency of analyst recommendations through the lens of capital market anomalies. We find that analysts do not fully use the information in anomaly signals when making recommendations. Analysts tend to give more favorable consensus recommendations to stocks classified as overvalued and, more important, these stocks subsequently tend to have particularly negative abnormal returns. Analysts whose recommendations are better aligned with anomaly signals are more skilled and elicit stronger recommendation announcement returns. Our findings suggest that analysts’ biased recommendations could be a source of market friction that impedes the efficient correction of mispricing. Mood Beta and Seasonalities in Stock Returns02 Febuary 2020 from JFhttps://www.sciencedirect.com/science/article/pii/S0304405X20300362?dgcid=rss_sd_all&amp;utm_source=researcher_app&amp;utm_medium=referral&amp;utm_campaign=RESR_MRKT_Researcher_inboundExisting research has found cross-sectional seasonality of stock returns—the periodic outperformance of certain stocks during the same calendar months or weekdays. We hypothesize that assets’ different sensitivities to investor mood explain these effects and imply other seasonalities. Consistent with our hypotheses, relative performance across individual stocks or portfolios during past high or low mood months and weekdays tends to recur in periods with congruent mood and reverse in periods with noncongruent mood. Furthermore, assets with higher sensitivities to aggregate mood—higher mood betas—subsequently earn higher returns during ascending mood periods and earn lower returns during descending mood periods.","categories":[{"name":"Economics","slug":"Economics","permalink":"http://yoursite.com/categories/Economics/"},{"name":"Literature Review","slug":"Economics/Literature-Review","permalink":"http://yoursite.com/categories/Economics/Literature-Review/"},{"name":"Behavioral Finance","slug":"Economics/Literature-Review/Behavioral-Finance","permalink":"http://yoursite.com/categories/Economics/Literature-Review/Behavioral-Finance/"}],"tags":[{"name":"Papers","slug":"Papers","permalink":"http://yoursite.com/tags/Papers/"},{"name":"Behavioral Finance","slug":"Behavioral-Finance","permalink":"http://yoursite.com/tags/Behavioral-Finance/"}]},{"title":"Monetary Papers","slug":"Summary of Macroeconomics and Monetary Papers","date":"2020-01-28T05:00:00.000Z","updated":"2020-02-10T14:35:50.342Z","comments":true,"path":"2020/01/28/Summary of Macroeconomics and Monetary Papers/","link":"","permalink":"http://yoursite.com/2020/01/28/Summary of Macroeconomics and Monetary Papers/","excerpt":"","text":"Monetary PolicyOptimal Monetary Policy with Informational Frictions28 January 2020 from JPEhttps://dspace.mit.edu/bitstream/1721.1/66950/1/Marios1122.pdfWe study optimal policy in a business-cycle setting in which firms hold dispersed private information about, or are rationally inattentive to, the state of the economy. The informational friction is the source of both nominal and real rigidity. Because of the latter, the optimal monetary policy does not target price stability. Instead, it targets a negative relation between the nominal price level and real economic activity. Such leaning against the wind helps maximize production efficiency. An additional contribution is the adaptation of the primal approach of the Ramsey literature to a flexible form of informational friction. Banks’ Balance Sheets and Liquidation Values: Evidence from Real Estate Collateral17 June 2019 from RFShttps://academic.oup.com/rfs/article/33/2/504/5512487?rss=1&amp;utm_source=researcher_app&amp;utm_medium=referral&amp;utm_campaign=RESR_MRKT_Researcher_inboundThis paper finds that declining bank equity or liquidity reduces liquidation values of bank-owned real estate and accelerates the pace of asset sales. Buyers of these assets earn significant returns for providing liquidity to banks, as prices tend to rebound sharply after sales by illiquid banks. Lower liquidation values also depress the prices of nearby real estate transactions. Policy interventions, such as equity injections and central bank asset purchases, increase liquidation values by providing institutions with the balance sheet capacity to slow asset sales. This evidence suggests that balance sheet adjustments at financial institutions can explain real asset price dynamics.","categories":[{"name":"Economics","slug":"Economics","permalink":"http://yoursite.com/categories/Economics/"},{"name":"Literature Review","slug":"Economics/Literature-Review","permalink":"http://yoursite.com/categories/Economics/Literature-Review/"},{"name":"Macroeconomics","slug":"Economics/Literature-Review/Macroeconomics","permalink":"http://yoursite.com/categories/Economics/Literature-Review/Macroeconomics/"}],"tags":[{"name":"Macroeconomics","slug":"Macroeconomics","permalink":"http://yoursite.com/tags/Macroeconomics/"},{"name":"Papers","slug":"Papers","permalink":"http://yoursite.com/tags/Papers/"},{"name":"Monetary","slug":"Monetary","permalink":"http://yoursite.com/tags/Monetary/"}]},{"title":"Asset Pricing - Equity","slug":"Summary of Asset Pricing Equities","date":"2020-01-27T05:00:00.000Z","updated":"2020-02-09T20:57:17.000Z","comments":true,"path":"2020/01/27/Summary of Asset Pricing Equities/","link":"","permalink":"http://yoursite.com/2020/01/27/Summary of Asset Pricing Equities/","excerpt":"","text":"TheoryLeft Behind: Creative Destruction, Inequality, and the Stock Market25 January 2020 from JPEhttp://pdfs.semanticscholar.org/be07/eb9c6ff27f8fee51f98f44d82e29164d6ab2.pdfWe develop a general equilibrium model of asset prices in which benefits of technological innovation are distributed asymmetrically. Financial market participants do not capture all economic gains from innovation even when they own shares in innovating firms. Such gains accrue partly to the innovators, who cannot sell claims on proceeds from their future ideas. We show how the resulting inequality among agents can give rise to a high risk premium on the aggregate stock market, return co-movement and average return differences among firms, and the failure of traditional representative agent asset pricing models to account for cross-sectional differences in risk premia. Consumption Fluctuations and Expected Returns12 December 2019 From JFhttps://onlinelibrary.wiley.com/doi/abs/10.1111/jofi.12870?af=R&amp;utm_source=researcher_app&amp;utm_medium=referral&amp;utm_campaign=RESR_MRKT_Researcher_inboundThis paper introduces a novel consumption‐based variable, cyclical consumption, and examines its predictive properties for stock returns. Future expected stock returns are high (low) when aggregate consumption falls (rises) relative to its trend and marginal utility from current consumption is high (low). We show that the empirical evidence ties consumption decisions of agents to time‐variation in returns in a manner consistent with asset pricing models based on external habit formation. The predictive power of cyclical consumption is not confined to bad times and subsumes the predictability of many popular forecasting variables. Dynamically consistent alpha‐maxmin expected utility17 November 2019 From MFhttps://www.econstor.eu/bitstream/10419/201618/1/IMW_working_paper_593.pdfThe alpha‐maxmin model is a prominent example of preferences under Knightian uncertainty as it allows to distinguish ambiguity and ambiguity attitude. These preferences are dynamically inconsistent for nontrivial versions of alpha.In this paper, we derive a recursive, dynamically consistent version of the alpha‐maxmin model. In the continuous‐time limit, the resulting dynamic utility function can be represented as a convex mixture between worst and best case, but now at the local, infinitesimal level. We study the properties of the utility function and provide an Arrow–Pratt approximation of the static and dynamic certainty equivalent. We then derive a consumption‐based capital asset pricing formula and study the implications for derivative valuation under indifference pricing. MethodStock Return Asymmetry: Beyond Skewness28 January 2020 form JFQAhttps://dx.doi.org/10.1017/S0022109019000206?urlappend=%3Fsource%3Drss&amp;utm_source=researcher_app&amp;utm_medium=referral&amp;utm_campaign=RESR_MRKT_Researcher_inboundWe propose two asymmetry measures for stock returns. Unlike the popular skewness measure, our measures are based on the distribution function of the data rather than just the third central moment. We present empirical evidence that the greater upside asymmetries calculated using our new measures imply lower average returns in the cross section of stocks. In contrast, when using the skewness measure, the relationship between asymmetry and returns is inconclusive. FactorTaming the Factor Zoo: A Test of New Factors24 January 2020 from JFhttps://onlinelibrary.wiley.com/doi/pdfdirect/10.1111/jofi.12883We propose a model selection method to systematically evaluate the contribution to asset pricing of any new factor, above and beyond what a high‐dimensional set of existing factors explains. Our methodology accounts for model selection mistakes that produce a bias due to omitted variables, unlike standard approaches that assume perfect variable selection. We apply our procedure to a set of factors recently discovered in the literature. While most of these new factors are shown to be redundant relative to the existing factors, a few have statistically significant explanatory power beyond the hundreds of factors proposed in the past. Lazy Prices29 January 2020 from JFhttps://onlinelibrary.wiley.com/doi/pdfdirect/10.1111/jofi.12885Using the complete history of regular quarterly and annual filings by U.S. corporations, we show that changes to the language and construction of financial reports have strong implications for firms’ future returns and operations. A portfolio that shorts “changers” and buys “nonchangers” earns up to 188 basis points per month in alpha (over 22% per year) in the future. Moreover, changes to 10‐Ks predict future earnings, profitability, future news announcements, and even future firm‐level bankruptcies. Unlike typical underreaction patterns, we find no announcement effect, suggesting that investors are inattentive to these simple changes across the universe of public firms.","categories":[{"name":"Economics","slug":"Economics","permalink":"http://yoursite.com/categories/Economics/"},{"name":"Literature Review","slug":"Economics/Literature-Review","permalink":"http://yoursite.com/categories/Economics/Literature-Review/"},{"name":"Asset pricing","slug":"Economics/Literature-Review/Asset-pricing","permalink":"http://yoursite.com/categories/Economics/Literature-Review/Asset-pricing/"}],"tags":[{"name":"Asset Pricing","slug":"Asset-Pricing","permalink":"http://yoursite.com/tags/Asset-Pricing/"},{"name":"Papers","slug":"Papers","permalink":"http://yoursite.com/tags/Papers/"}]},{"title":"Vim Basics","slug":"Vim Basics","date":"2020-01-27T05:00:00.000Z","updated":"2020-01-27T15:44:46.758Z","comments":true,"path":"2020/01/27/Vim Basics/","link":"","permalink":"http://yoursite.com/2020/01/27/Vim Basics/","excerpt":"","text":"Introduction to vim3 modes for vim insert 1+ normal ```esc visual 12345678910#### SearchIn the normal mode, type ```/```, then type what you want to search## Replace+ replace one character / word: + in the normal mode, type ```:s```, then type ```/x```, “x” is what you want to replace, then type ```/y```, “y” is what you want to be replaced with. Then type ```enter eg: then hello will be replaced with hi.12+ replace all the target characters / words in one line: + in the normal mode, type ```:s```, then type ```/x```, “x” is what you want to replace, then type ```/y```, “y” is what you want to be replaced with, then type ```/g```. Then type ```enter eg: then all the hello in one line will be replaced with hi.12+ replace all the target characters / words in the whole file: + in the normal mode, type ```:%s```, then type ```/x```, “x” is what you want to replace, then type ```/y```, “y” is what you want to be replaced with, then type ```/g```. Then type ```enter eg: then all the hello in the whole file will be replaced with hi.12345678910## Copy and Paste+ copy one line: + in the normal mode, type ```yy``` + start a new line, type ```o``` or ```O``` (here you will enter the insert mode) + type ```esc``` and back to normal mode + type ```p``` to paste## Delete+ delete one line: + in the normal mode, delete the line you are in, type ```dd delete multiple lines: in the normal mode, type numbers, like 1+ then type ```dd Revoke backward: return to the stage before some commands in the normal mode, type: 12+ forward: return to the stage before revoking + in the normal mode, control: ```control + R Loop insert a great number of an indentical word eg: insert 100 “hello”s in the normal mode, type: 1+ then enter the insert mode, type: ```hello```, and then press ```enter then back to normal mode by pressing 123## comment + comment one line: + type ```# comment multiple line block```, ```space```, ```#``` 12## help+ in the normal mode, type ```:help in the normal mode, type :usr_01.txt","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Programming","slug":"Computer-Science/Programming","permalink":"http://yoursite.com/categories/Computer-Science/Programming/"},{"name":"Vim","slug":"Computer-Science/Programming/Vim","permalink":"http://yoursite.com/categories/Computer-Science/Programming/Vim/"}],"tags":[{"name":"Vim","slug":"Vim","permalink":"http://yoursite.com/tags/Vim/"},{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"}]},{"title":"Financial Market Papers","slug":"Summary of Financial Market Papers","date":"2020-01-27T05:00:00.000Z","updated":"2020-02-09T21:24:32.000Z","comments":true,"path":"2020/01/27/Summary of Financial Market Papers/","link":"","permalink":"http://yoursite.com/2020/01/27/Summary of Financial Market Papers/","excerpt":"","text":"High-Frequency TradingHigh‐Frequency Trading and Market Performance23 January 2020 from JFhttps://onlinelibrary.wiley.com/doi/pdfdirect/10.1111/jofi.12882We study the consequences of, and potential policy responses to, high‐frequency trading (HFT) via the tradeoff between liquidity and information production. Faster speeds facilitate HFT, with consequences for this tradeoff: information production decreases because informed traders have less time to trade before HFTs react, but liquidity (measured by the bid‐ask spread) improves because informational asymmetries decline. HFT also pushes outcomes inside the frontier of this tradeoff. However, outcomes can be restored to the frontier by replacing the limit order book with one of two alternative mechanisms: delaying all orders except cancellations or implementing frequent batch auctions. Market StructureThickness and Information in Dynamic Matching Markets01 Feb 2020 from JPEhttps://www.journals.uchicago.edu/doi/abs/10.1086/704761?af=R&amp;utm_source=researcher_app&amp;utm_medium=referral&amp;utm_campaign=RESR_MRKT_Researcher_inboundWe introduce a simple model of dynamic matching in networked markets, where agents arrive and depart stochastically and the composition of the trade network depends endogenously on the matching algorithm. If the planner can identify agents who are about to depart, then waiting to thicken the market substantially reduces the fraction of unmatched agents. If not, then matching agents greedily is close to optimal. We specify conditions under which local algorithms that choose the right time to match agents, but do not exploit the global network structure, are close to optimal. Finally, we consider a setting where agents have private information about their departure times and design a mechanism to elicit this information. Investor Experiences and Financial Market Dynamics15 November 2019https://www.sciencedirect.com/science/article/pii/S0304405X19302703?dgcid=rss_sd_all&amp;utm_source=researcher_app&amp;utm_medium=referral&amp;utm_campaign=RESR_MRKT_Researcher_inboundHow do macrofinancial shocks affect investor behavior and market dynamics? Recent evidence on experience effects suggests a long-lasting influence of personally experienced outcomes on investor beliefs and investment but also significant differences across older and younger generations. We formalize experience-based learning in an overlapping generations (OLG) model, where different cross-cohort experiences generate persistent heterogeneity in beliefs, portfolio choices, and trade. The model allows us to characterize a novel link between investor demographics and the dependence of prices on past dividends while also generating known features of asset prices, such as excess volatility and return predictability. The model produces new implications for the cross-section of asset holdings, trade volume, and investors’ heterogeneous responses to recent financial crises, which we show to be in line with the data. Mutual FundStar Ratings and the Incentives of Mutual Funds01 Feb 2020 from JFhttps://onlinelibrary.wiley.com/doi/abs/10.1111/jofi.12888?af=R&amp;utm_source=researcher_app&amp;utm_medium=referral&amp;utm_campaign=RESR_MRKT_Researcher_inboundWe propose a theory of reputation to explain how investors rationally respond to mutual fund star ratings. A fund’s performance is determined by its information advantage, which can be acquired but decays stochastically. Investors form beliefs about whether the fund is informed based on its past performance. We refer to such beliefs as fund reputation, which determines fund flows. As performance changes continuously, equilibrium fund reputation may take discrete values only and thus can be labeled with stars. Star upgrades thus imply reputation jumps, leading to discrete increases in flows and expected performance, although stars do not provide new information. OTCDynamic Asset Sales with a Feedback Effect10 June 2019 from RFShttps://academic.oup.com/rfs/article/33/2/829/5513178?rss=1&amp;utm_source=researcher_app&amp;utm_medium=referral&amp;utm_campaign=RESR_MRKT_Researcher_inbound I analyze a dynamic model of over-the-counter asset sales in which the seller receives stock-sensitive compensation, and the transaction conveys information about the firm’s value. I examine how the market’s response to an asset sale feeds back to the seller’s decision on the timing and the sale price and analyze the unique pattern of stock prices before and after the sale. The implications of bargaining power, inventories, gains from synergy, and the introduction of a vesting period are discussed. The model sheds light on observed properties of corporate sell-offs and explains market dry-ups during downturn periods. Pricing and Liquidity in Decentralized Asset Markets02 December 2019 from Econometricahttps://mpra.ub.uni-muenchen.de/73901/1/MPRA_paper_73901.pdfI develop a search‐and‐bargaining model of endogenous intermediation in over‐the‐counter markets. Unlike the existing work, my model allows for rich investor heterogeneity in three simultaneous dimensions: preferences, inventories, and meeting rates. By comparing trading‐volume patterns that arise in my model and are observed in practice, I argue that the heterogeneity in meeting rates is the main driver of intermediation patterns. I find that investors with higher meeting rates (i.e., fast investors) are less averse to holding inventories and more attracted to cash earnings, which makes the model corroborate a number of stylized facts that do not emerge from existing models: (i) fast investors provide intermediation by charging a speed premium, and (ii) fast investors hold more extreme inventories. Then, I use the model to study the effect of trading frictions on the supply and price of liquidity. On social welfare, I show that the interaction of meeting rate heterogeneity with optimal inventory management makes the equilibrium inefficient. I provide a financial transaction tax/subsidy scheme that corrects this inefficiency, in which fast investors cross‐subsidize slow investors. Global FinanceInformational Channels of Financial Contagion05 February 2020 from Econometricahttps://onlinelibrary.wiley.com/doi/abs/10.3982/ECTA15604?af=R&amp;utm_source=researcher_app&amp;utm_medium=referral&amp;utm_campaign=RESR_MRKT_Researcher_inbound Two main classes of channels are studied as informational sources of financial contagion. One is a fundamental channel that is based on real and financial links between economies, and the second is a social learning channel that arises when agents base their decisions on noisy observations about the actions of others in foreign markets. Using global games, I present a two‐country model of financial contagion in which both channels can operate and I test its predictions experimentally. The experimental results show that subjects do not extract information optimally, which leads to two systematic biases that affect these channels directly. Base‐rate neglect leads subjects to underweight their prior, and thus weakens the fundamental channel. An overreaction bias strengthens the social learning channel, since subjects rely on information about the behavior of others, even when this information is irrelevant. These results have significant welfare effects rooted in the specific way in which these biases alter behavior.","categories":[{"name":"Economics","slug":"Economics","permalink":"http://yoursite.com/categories/Economics/"},{"name":"Literature Review","slug":"Economics/Literature-Review","permalink":"http://yoursite.com/categories/Economics/Literature-Review/"},{"name":"Financial Market","slug":"Economics/Literature-Review/Financial-Market","permalink":"http://yoursite.com/categories/Economics/Literature-Review/Financial-Market/"}],"tags":[{"name":"Papers","slug":"Papers","permalink":"http://yoursite.com/tags/Papers/"},{"name":"Financial Market","slug":"Financial-Market","permalink":"http://yoursite.com/tags/Financial-Market/"}]},{"title":"WSJ Jan 2020","slug":"WSJ Jan 2020","date":"2020-01-27T05:00:00.000Z","updated":"2020-01-29T07:28:54.000Z","comments":true,"path":"2020/01/27/WSJ Jan 2020/","link":"","permalink":"http://yoursite.com/2020/01/27/WSJ Jan 2020/","excerpt":"","text":"This note contains some summaries of news from the Wall Street Journal Jan 2020 The Last Flight of Kobe Bryant’s LifeDate: Jan. 27, 2020; By Ben Cohen and Erin AilworthPoints: The helicopter that chauffeured Kobe departed Santa Wayne Airport shortly after 9 a.m. on a foggy Sunday morning. It’s destination was Camarillo Airport, near Mr. Bryant’s sports academy. It supposed to be the kind of routine flight that Mr. Bryant, who used a helicopter like a car, had made hundreds of times in his life. A few minutes later, the helicopter crashed in mountainous terrain at an altitude of roughly 1085 feet above sea level near Calabasas, killing Mr. Bryant, his 13-year-old daughter Gianna and seven others. Idiom &amp; Phrase &amp; Sentence: He began exploring the possibility of getting to work by helicopter around 2006, intrigued by the prospect of turning a painful, unpredictable drive into a guaranteed 15 minute trip. Hong Kong Stocks Slump, Catching Up to Coronavirus FearsDate: Jan. 28, 2020; By Steven RussolilloPoints: Hong Kong-listed stocks dropped sharply on their first trad­ing day af­ter the Lu­nar New Year break, as in­vestors as­sessed the spread­ing Wuhan coro­n­avirus and its im­pact on global growth. The bench­mark Hang Seng In­dex dropped 2.5% Wednes­day morn­ing, catch­ing up to a slide in global mar­kets that took place ear­lier in the week. Mar­kets in main­land China re­main closed for the Lu­nar New Year hol­i­day; they are sched­uled to re­open next week. The main con­cern among global in­vestors is that the virus could turn into a pan­demic that crip­ples trans­porta­tion, shop­ping, busi­ness meet­ings and weighs on eco­nomic growth. Lux­ury re­tail­ers, travel com­pa­nies and casino stocks have been among the hard­est hit shares in re­cent weeks. Idiom &amp; Phrase &amp; Sentence: The de­clines (Market Index) come as _the num­ber of con­firmed cases_ and _fa­tal­i­ties from the pneu­mo­nia-caus­ing coro­n­avirus_ con­tinue to rise, with the death to­tal climb­ing to at least 132 and con­firmed in­fec­tions ris­ing to around 6,000.","categories":[{"name":"Languages","slug":"Languages","permalink":"http://yoursite.com/categories/Languages/"},{"name":"English","slug":"Languages/English","permalink":"http://yoursite.com/categories/Languages/English/"},{"name":"Wall Street Journal","slug":"Languages/English/Wall-Street-Journal","permalink":"http://yoursite.com/categories/Languages/English/Wall-Street-Journal/"}],"tags":[{"name":"English","slug":"English","permalink":"http://yoursite.com/tags/English/"},{"name":"WSJ","slug":"WSJ","permalink":"http://yoursite.com/tags/WSJ/"}]},{"title":"SQL Intermediate","slug":"SQL Intermediate","date":"2020-01-25T05:00:00.000Z","updated":"2020-01-27T15:38:34.729Z","comments":true,"path":"2020/01/25/SQL Intermediate/","link":"","permalink":"http://yoursite.com/2020/01/25/SQL Intermediate/","excerpt":"","text":"Speed Up QueryingIndexGeneral IndexFor a students table: id class_id name gender score 1 1 Alex M 90 2 1 Bob M 95 3 1 Cindy F 88 If we want to query by score quickly, we can create an index for score. 12ALTER TABLE studentsADD INDEX idx_score (score); The name of index idx_score could be anything. If there are multiple indexes, then 12ALTER TABLE studentsADD INDEX idx_name_score (name, score); The index should be updated when inserting or deleting the records. Unique IndexThe unique column which is not primary key can be assigned with a unique index 12ALTER TABLE studentsADD UNIQUE INDEX uni_name (name); We can also add unique constraint to a column rather than unique index 12ALTER TABLE studentsADD CONSTRAINT uni_name UNIQUE (name); Get more complex123SELECT Track.title, Genre.name FROM Track JOIN Genre ON Track.genre_id = Genre.genre_idSELECT Track.title, Artist.name, Album.title, Genre.name FROM Track JOIN Genre JOIN Album JOIN Artist ON Track.genre_id = Genre.genre_id AND Track.album_id = Album.album_id AND Album.artist_id = Artist.artist_id ON DELETE CASCADE Default / Restrict - Don’t allow changes that break the constraint CASCADE – Adjust child rows by removing or updating to maintain consistency SET NULL – Set the foreign key columns in the child rows to null 1DELETE FROM Genre WHERE name = 'Metal' Many to Many Relationships Sometimes we need to model a relationship that is many to many. We need to add a “connection” table with two foreign keys. There is usually no separate primary key 12345678910CREATE TABLE User (user_id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,email VARCHAR(128) UNIQUE,name VARCHAR(128)) ENGINE=InnoDB CHARACTER SET=utf8;CREATE TABLE Course (course_id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,title VARCHAR(128) UNIQUE) ENGINE=InnoDB CHARACTER SET=utf8; Combination Keys Combination key is unique 12345678910CREATE TABLE Member (user_id INTEGER,course_id INTEGER,role INTEGER,CONSTRAINT FOREIGN KEY (user_id) REFERENCES User (user_id)ON DELETE CASCADE ON UPDATE CASCADE,CONSTRAINT FOREIGN KEY (course_id) REFERENCES Course (course_id)ON DELETE CASCADE ON UPDATE CASCADE,PRIMARY KEY (user_id, course_id)) ENGINE=InnoDB CHARACTER SET=utf8; Insert contents: 1234567891011121314INSERT INTO User (name, email) VALUES ('Jane', 'jane@tsugi.org');INSERT INTO User (name, email) VALUES ('Ed', 'ed@tsugi.org');INSERT INTO User (name, email) VALUES ('Sue', 'sue@tsugi.org');INSERT INTO Course (title) VALUES ('Python');INSERT INTO Course (title) VALUES ('SQL');INSERT INTO Course (title) VALUES ('PHP');INSERT INTO Member (user_id, course_id, role) VALUES (1, 1, 1);INSERT INTO Member (user_id, course_id, role) VALUES (2, 1, 0);INSERT INTO Member (user_id, course_id, role) VALUES (3, 1, 0);INSERT INTO Member (user_id, course_id, role) VALUES (1, 2, 0);INSERT INTO Member (user_id, course_id, role) VALUES (2, 2, 1);INSERT INTO Member (user_id, course_id, role) VALUES (2, 3, 1);INSERT INTO Member (user_id, course_id, role) VALUES (3, 3, 0); Select rows you want: 12345SELECT User.name, Member.role, Course.titleFROM User JOIN Member JOIN CourseON Member.user_id = User.user_id ANDMember.course_id = Course.course_idORDER BY Course.title, Member.role DESC, User.name Complexity Enables Speeds Complexity makes speed possible and allows you to get very fast results as the data size grows. By normalizing the data and linking it with integer keys, the overall amount of data which the relational database must scan is far lower than if the data were simply flattened out. It might seem like a tradeoff - spend some time designing your database so it continues to be fast when your application is a success. Other UsageUNION ALLUNION is used to merge two or multiple resulting set of SELECT. The Name, datatype and order of column should be identical. UNION is used to select the different records from both SELECT. 123SELECT column_name(s) FROM table1UNIONSELECT column_name(s) FROM table2; If allowing the duplicated records, we should use UNION ALL. 123SELECT column_name(s) FROM table1UNION ALLSELECT column_name(s) FROM table2; With where operation: 123456SELECT column_name(s) FROM table1WHERE column_name(1)='xx'UNION ALLSELECT column_name(s) FROM table2WHERE column_name(1)='xx'ORDER BY column_name(1);","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Programming","slug":"Computer-Science/Programming","permalink":"http://yoursite.com/categories/Computer-Science/Programming/"},{"name":"SQL","slug":"Computer-Science/Programming/SQL","permalink":"http://yoursite.com/categories/Computer-Science/Programming/SQL/"}],"tags":[{"name":"MOOC","slug":"MOOC","permalink":"http://yoursite.com/tags/MOOC/"},{"name":"SQL","slug":"SQL","permalink":"http://yoursite.com/tags/SQL/"},{"name":"Database","slug":"Database","permalink":"http://yoursite.com/tags/Database/"}]},{"title":"SQL Keys","slug":"SQL Keys","date":"2020-01-25T05:00:00.000Z","updated":"2020-01-26T19:09:14.013Z","comments":true,"path":"2020/01/25/SQL Keys/","link":"","permalink":"http://yoursite.com/2020/01/25/SQL Keys/","excerpt":"","text":"Key TerminologyThree Kinds of KeysPrimary key generally an integer autoincrement field, indicating the row. Relationships that are based on matching string fields are less efficient than integers. Logical key what the outside world uses for lookup. Never use your logical key as the primary key. Logical keys can and do change, albeit slowly. Foreign key A foreign key is when a table has a column containing a key that points to the primary key of another table. One to Many / Many to One1234567891011121314151617181920212223242526272829303132333435363738394041424344454647CREATE DATABASE Music DEFAULT CHARACTER SET utf8;USE Music;CREATE TABLE Artist ( artist_id INTEGER NOT NULL AUTO_INCREMENT, name VARCHAR(255), PRIMARY KEY(artist_id)) ENGINE = InnoDB;CREATE TABLE Album ( album_id INTEGER NOT NULL AUTO_INCREMENT, title VARCHAR(255), artist_id INTEGER, PRIMARY KEY(album_id), INDEX USING BTREE (title), CONSTRAINT FOREIGN KEY (artist_id) REFERENCES Artist (artist_id) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB;CREATE TABLE Genre ( genre_id INTEGER NOT NULL AUTO_INCREMENT, name VARCHAR(255), PRIMARY KEY(genre_id)) ENGINE = InnoDB;CREATE TABLE Track ( track_id INTEGER NOT NULL AUTO_INCREMENT, title VARCHAR(255), len INTEGER, rating INTEGER, count INTEGER, album_id INTEGER, genre_id INTEGER, PRIMARY KEY(track_id), INDEX USING BTREE (title), CONSTRAINT FOREIGN KEY (album_id) REFERENCES Album (album_id) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT FOREIGN KEY (genre_id) REFERENCES Genre (genre_id) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE = InnoDB; JOINThe JOIN operation links across several tables as part of a SELECT operation; 1SELECT Album.title, Artist.name FROM Album JOIN Artist ON; You must tell the JOIN how to use the keys that make the connection between the tables using an ON clause 12SELECT Album.title, Album.artist_id, Artist.artist_id,Artist.nameFROM Album JOIN Artist ON Album.artist_id = Artist.artist_id Joining two tables without an ON clause gives all possible combinations of rows 1SELECT Track.title, Track.genre_id, Genre.genre_id, Genre.name FROM Track JOIN Genre Get more complex123SELECT Track.title, Genre.name FROM Track JOIN Genre ON Track.genre_id = Genre.genre_idSELECT Track.title, Artist.name, Album.title, Genre.name FROM Track JOIN Genre JOIN Album JOIN Artist ON Track.genre_id = Genre.genre_id AND Track.album_id = Album.album_id AND Album.artist_id = Artist.artist_id ON DELETE CASCADE Default / Restrict - Don’t allow changes that break the constraint CASCADE – Adjust child rows by removing or updating to maintain consistency SET NULL – Set the foreign key columns in the child rows to null 1DELETE FROM Genre WHERE name = 'Metal' Many to Many Relationships Sometimes we need to model a relationship that is many to many. We need to add a “connection” table with two foreign keys. There is usually no separate primary key 12345678910CREATE TABLE User (user_id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,email VARCHAR(128) UNIQUE,name VARCHAR(128)) ENGINE=InnoDB CHARACTER SET=utf8;CREATE TABLE Course (course_id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,title VARCHAR(128) UNIQUE) ENGINE=InnoDB CHARACTER SET=utf8; Combination Keys Combination key is unique 12345678910CREATE TABLE Member (user_id INTEGER,course_id INTEGER,role INTEGER,CONSTRAINT FOREIGN KEY (user_id) REFERENCES User (user_id)ON DELETE CASCADE ON UPDATE CASCADE,CONSTRAINT FOREIGN KEY (course_id) REFERENCES Course (course_id)ON DELETE CASCADE ON UPDATE CASCADE,PRIMARY KEY (user_id, course_id)) ENGINE=InnoDB CHARACTER SET=utf8; Insert contents: 1234567891011121314INSERT INTO User (name, email) VALUES ('Jane', 'jane@tsugi.org');INSERT INTO User (name, email) VALUES ('Ed', 'ed@tsugi.org');INSERT INTO User (name, email) VALUES ('Sue', 'sue@tsugi.org');INSERT INTO Course (title) VALUES ('Python');INSERT INTO Course (title) VALUES ('SQL');INSERT INTO Course (title) VALUES ('PHP');INSERT INTO Member (user_id, course_id, role) VALUES (1, 1, 1);INSERT INTO Member (user_id, course_id, role) VALUES (2, 1, 0);INSERT INTO Member (user_id, course_id, role) VALUES (3, 1, 0);INSERT INTO Member (user_id, course_id, role) VALUES (1, 2, 0);INSERT INTO Member (user_id, course_id, role) VALUES (2, 2, 1);INSERT INTO Member (user_id, course_id, role) VALUES (2, 3, 1);INSERT INTO Member (user_id, course_id, role) VALUES (3, 3, 0); Select rows you want: 12345SELECT User.name, Member.role, Course.titleFROM User JOIN Member JOIN CourseON Member.user_id = User.user_id ANDMember.course_id = Course.course_idORDER BY Course.title, Member.role DESC, User.name Complexity Enables Speeds Complexity makes speed possible and allows you to get very fast results as the data size grows. By normalizing the data and linking it with integer keys, the overall amount of data which the relational database must scan is far lower than if the data were simply flattened out. It might seem like a tradeoff - spend some time designing your database so it continues to be fast when your application is a success.","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Programming","slug":"Computer-Science/Programming","permalink":"http://yoursite.com/categories/Computer-Science/Programming/"},{"name":"SQL","slug":"Computer-Science/Programming/SQL","permalink":"http://yoursite.com/categories/Computer-Science/Programming/SQL/"}],"tags":[{"name":"MOOC","slug":"MOOC","permalink":"http://yoursite.com/tags/MOOC/"},{"name":"SQL","slug":"SQL","permalink":"http://yoursite.com/tags/SQL/"},{"name":"Database","slug":"Database","permalink":"http://yoursite.com/tags/Database/"}]},{"title":"SQL Basic","slug":"SQL Basics","date":"2020-01-24T05:00:00.000Z","updated":"2020-01-26T19:10:21.015Z","comments":true,"path":"2020/01/24/SQL Basics/","link":"","permalink":"http://yoursite.com/2020/01/24/SQL Basics/","excerpt":"","text":"Basic SyntaxCREATE12345678CREATE People CREATE TABLE Users(name VARCHAR(128),email VARCHAR(128));DESCRIBE People; DROP1DROP TABLE Users; INSERT INTO12345INSERT INTO Users (name, email) VALUES ('Chuck', 'csev@umich.edu') ;INSERT INTO Users (name, email) VALUES ('Somesh', 'somesh@umich.edu') ;INSERT INTO Users (name, email) VALUES ('Caitlin', 'cait@umich.edu') ;INSERT INTO Users (name, email) VALUES ('Ted', 'ted@umich.edu') ;INSERT INTO Users (name, email) VALUES ('Sally', 'sally@umich.edu') ; DELETE1DELETE FROM Users WHERE email='ted@umich.edu' UPDATEReplace / Change the values 1UPDATE Users SET name='Charles' WHERE email='csev@umich.edu' SELECTRetrieving Records 1SELECT * FROM Users WHERE1SELECT * FROM Users WHERE email='csev@umich.edu' here, * is for all the columns ORDER BY1SELECT * FROM Users ORDER BY email LIKEInclude or some characteristics 1SELECT * FROM Users WHERE name LIKE '%e%' LIMIT12SELECT * FROM Users ORDER BY email DESC LIMIT 2;SELECT * FROM Users ORDER BY email LIMIT 1,2; COUNTCounting rows with select 12SELECT COUNT(*) FROM Users;SELECT COUNT(*) FROM Users WHERE email='csev@umich.edu'; Data TypesString FieldsString Fields are indexable for searching CHARCHAR allocates the entire space (faster for small strings where length is known) VARCHARVARCHAR allocates a variable amount of space depending on the data length (less space) Text FieldsHave a character set - paragraphs or HTML pages Generally not used with indexing or sorting - and only then limited to a prefix TINYTEXT TEXT MEDIUMTEXT LONGTEXT Binary Types (rarely used)Character = 8 - 32 bits of information depending on character set Binary Large Object (BLOB)Large raw data, files, images, word documents, PDFs, movies, etc. No translation, indexing, or character set. Integer Numbers TINYINT (-128, 128) SMALLINT (-32768, +32768) INT or INTEGER (2 Billion) BIGINT - (10**18 ish) Floating Point Numbers FLOAT (32-bit) 10**38 with seven digits of accuracy DOUBLE (64-bit) 10**308 with 14 digits of accuracy Dates TIMESTAMP - ‘YYYY-MM-DD HH:MM:SS’ (1970, 2037) DATETIME - ‘YYYY-MM-DD HH:MM:SS’ DATE - ‘YYYY-MM-DD’ TIME - ‘HH:MM:SS’ Built-in MySQL function NOW() Database Keys and IndexesAUTO_INCREMENT1234567891011121314151617DROP TABLE Users;CREATE TABLE Users (user_id INT UNSIGNED NOT NULLAUTO_INCREMENT,name VARCHAR(128),email VARCHAR(128),PRIMARY KEY(user_id),INDEX(name));INSERT INTO Users (name, email) VALUES ('Chuck', 'csev@umich.edu');INSERT INTO Users (name, email) VALUES ('Somesh', 'somesh@umich.edu');INSERT INTO Users (name, email) VALUES ('Caitlin', 'cait@umich.edu');INSERT INTO Users (name, email) VALUES ('Ted', 'ted@umich.edu');INSERT INTO Users (name, email) VALUES ('Sally', 'sally@umich.edu'); Specifying Indexes1ALTER TABLE Users ADD INDEX ( email ) USING BTREE Relation, B-Tree and Hashes","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Programming","slug":"Computer-Science/Programming","permalink":"http://yoursite.com/categories/Computer-Science/Programming/"},{"name":"SQL","slug":"Computer-Science/Programming/SQL","permalink":"http://yoursite.com/categories/Computer-Science/Programming/SQL/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"http://yoursite.com/tags/SQL/"},{"name":"Data Science","slug":"Data-Science","permalink":"http://yoursite.com/tags/Data-Science/"},{"name":"Database","slug":"Database","permalink":"http://yoursite.com/tags/Database/"}]},{"title":"Binary Model","slug":"Derivatives Binary Model","date":"2019-12-15T05:00:00.000Z","updated":"2020-02-16T18:25:28.979Z","comments":true,"path":"2019/12/15/Derivatives Binary Model/","link":"","permalink":"http://yoursite.com/2019/12/15/Derivatives Binary Model/","excerpt":"","text":"Binary TreeReplication PricingUnder the condition: u > e^{r(T-t)}>dConstruct a portfolio which receive risk free rate: short 1 call option long $\\Delta$ stocks Then \\Delta S u - f_u = \\Delta S d - f_d \\\\ \\Delta = \\frac{f_u-f_d}{Su - Sd}Because $S\\Delta - f$ is a risk free asset, it will receive risk free rate whenever it increases or decreases: S\\Delta - f = (\\Delta S u - f_u)e^{-r(T-t)}and we can get the formula of $f$: \\begin{eqnarray*} f &=& S \\Delta - (\\Delta S u - f_u)e^{-r(T-t)} \\\\ &=& e^{-r(T-t)}[e^{r(T-t)}S\\Delta - (\\Delta Su - f_u)] \\\\ &=& e^{-r(T-t)}[(e^{r(T-t)}S-Su)\\Delta + f_u)] \\\\ &=& e^{-r(T-t)}[(e^{r(T-t)}S-Su)\\frac{f_u-f_d}{Su - Sd} + f_u)] \\\\ &=& e^{-r(T-t)}[\\frac{e^{r(T-t)}-u}{u-d}(f_u-f_d) + f_u)] \\\\ &=& e^{-r(T-t)}[(\\frac{e^{r(T-t)}-u}{u-d}+1)f_u +(- \\frac{e^{r(T-t)}-u}{u-d})f_d)] \\\\ &=& e^{-r(T-t)}[pf_u +(1- p)f_d] \\\\ \\end{eqnarray*}where p =\\frac{e^{r(T-t)}-d}{u-d}Codes for Binary Treein C++The thoughtheader file 12345678910111213#ifndef BinModel01_h#define BinModel01_h//computing risk-neutral probabilitydouble RiskNeutProb(doube U, double D, double R);//computing the stock price at node n,idouble S(double S0, double U, double D, int n, int i);//inputting, displaying and checking model dataint GetInputData(double&amp; S0, double&amp; U, double&amp; D, double&amp; R); #endif","categories":[{"name":"Economics","slug":"Economics","permalink":"http://yoursite.com/categories/Economics/"},{"name":"Finance","slug":"Economics/Finance","permalink":"http://yoursite.com/categories/Economics/Finance/"},{"name":"Derivatives","slug":"Economics/Finance/Derivatives","permalink":"http://yoursite.com/categories/Economics/Finance/Derivatives/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"},{"name":"Finance","slug":"Finance","permalink":"http://yoursite.com/tags/Finance/"},{"name":"Asset Pricing","slug":"Asset-Pricing","permalink":"http://yoursite.com/tags/Asset-Pricing/"}]},{"title":"Black Scholes Model","slug":"Derivatives BSM Model","date":"2019-11-23T05:00:00.000Z","updated":"2020-02-16T18:25:03.080Z","comments":true,"path":"2019/11/23/Derivatives BSM Model/","link":"","permalink":"http://yoursite.com/2019/11/23/Derivatives BSM Model/","excerpt":"","text":"The Episode 4 Assumptions: The short-term interest rate is known and is constant through time. (The interest term structure is flat.) (not restrict) The stock price follows a random walk in continuous time with a variance rate proportional to the square of the stock price. Thus the distribution of stock prices is lognormal. The variance rate of the return on the stock is constant.(Geometric Brownian Motion.) ($\\mu$ is a constant, and $\\sigma$ is a constant.) (not restrict) dS = \\mu S d t + \\sigma S d W_t Pays no dividends (not restrict) No transaction costs. (restrict) European possible to borrow money to buy stocks / no penalties to short selling. Deduction: $S$ is the stock price, $W_t$ is Standard Brownian Motion, $\\mu$ is drift, $\\sigma $ is volatility, $f$ is the price of a derivative of Stock. \\Delta S = \\mu S \\Delta t + \\sigma S \\Delta W_tAccording to Ito lemma, \\begin{eqnarray*} df &=& \\frac{\\partial f}{\\partial t}dt + \\frac{\\partial f}{\\partial S}dS + \\frac{1}{2}\\frac{\\partial^2 f}{\\partial S^2}dS \\times dS \\\\ &=& \\frac{\\partial f}{\\partial t}dt + \\frac{\\partial f}{\\partial S}(\\mu S d t + \\sigma S d W_t) + \\frac{1}{2}\\frac{\\partial^2 f}{\\partial S^2}\\sigma^2 S^2 dt \\\\ &=& (\\frac{\\partial f}{\\partial t} + \\frac{\\partial f}{\\partial S}\\mu S + \\frac{1}{2}\\frac{\\partial^2 f}{\\partial S^2}\\sigma^2 S^2) dt + \\frac{\\partial f}{\\partial S}\\sigma S d W_t \\end{eqnarray*}therefore, in discrete form \\Delta f = (\\frac{\\partial f}{\\partial t} + \\frac{\\partial f}{\\partial S}\\mu S + \\frac{1}{2}\\frac{\\partial^2 f}{\\partial S^2}\\sigma^2 S^2) \\Delta t + \\frac{\\partial f}{\\partial S}\\sigma S \\Delta W_tNow that the stock and the derivative both have uncertainty term $\\Delta W_t$, we want to build a portfolio of stock and derivative to eliminate the uncertainty in a short time: $\\text{short} ~ 1 ~ \\text{derivative} ~ (f)$ $\\text{long} ~ \\frac{\\partial f}{\\partial S} ~ \\text{shares} ~ (S)$ In a short time, it is a risk-free portfolio, the value of which is \\Pi = -f + \\frac{\\partial f}{\\partial S} SOn the one hand, it has to have the risk-free return: \\begin{eqnarray*} \\Pi_t &=& \\Pi_0 e ^{rt} \\\\ \\mathbb{ln}\\Pi_t &=& \\mathbb{ln}\\Pi_0 + rt \\\\ \\frac{d\\Pi}{\\Pi} &=& rdt \\end{eqnarray*}Therefore, \\Delta \\Pi = r \\Pi \\Delta tOn the other hand, the change of its value is: \\Delta \\Pi = - \\Delta f + \\frac{\\partial f}{\\partial S} \\Delta SThen we can get an equation, r \\Pi \\Delta t =- \\Delta f + \\frac{\\partial f}{\\partial S} \\Delta Swith substituting for $\\Delta f$, $\\Delta S$ and $\\Pi$ \\begin{eqnarray*} r\\Delta t (-f + \\frac{\\partial f}{\\partial S} S) = &-&(\\frac{\\partial f}{\\partial t} + \\frac{\\partial f}{\\partial S}\\mu S + \\frac{1}{2}\\frac{\\partial^2 f}{\\partial S^2}\\sigma^2 S^2) \\Delta t + \\frac{\\partial f}{\\partial S}\\sigma S \\Delta W_t \\\\ &+& \\frac{\\partial f}{\\partial S}(\\mu S \\Delta t + \\sigma S \\Delta W_t) \\end{eqnarray*}After simplifying the equation, we get the famous differential equation \\frac{\\partial f}{\\partial t} + rS\\frac{\\partial f}{\\partial S}+\\frac{1}{2}\\sigma^2S^2\\frac{\\partial^2 f}{\\partial S^2} = rfWe need to find a $f$ which satisfies the above equation.","categories":[{"name":"Economics","slug":"Economics","permalink":"http://yoursite.com/categories/Economics/"},{"name":"Finance","slug":"Economics/Finance","permalink":"http://yoursite.com/categories/Economics/Finance/"},{"name":"Derivatives","slug":"Economics/Finance/Derivatives","permalink":"http://yoursite.com/categories/Economics/Finance/Derivatives/"}],"tags":[{"name":"Finance","slug":"Finance","permalink":"http://yoursite.com/tags/Finance/"},{"name":"Asset Pricing","slug":"Asset-Pricing","permalink":"http://yoursite.com/tags/Asset-Pricing/"}]},{"title":"C++ Class","slug":"C++ Pointer","date":"2019-10-04T04:00:00.000Z","updated":"2020-01-26T16:14:43.641Z","comments":true,"path":"2019/10/04/C++ Pointer/","link":"","permalink":"http://yoursite.com/2019/10/04/C++ Pointer/","excerpt":"","text":"1234567// define without initializedint *p// defineint n = 10; int *p = &amp;n;int a a[8] = &#123;1, 2, 3, 4, 5, 6, 7, 8&#125;; int * p = a; p as a pointer will point to the first element of array a 12Pointer Assignment int n = 10; int *p = &amp;n, *q; q = p; “&amp;”: get the address 123int m, n = 10;int *q = &amp; n;m = *q; Swap 2 integers example 1: swap 2 integers by changing integer values 123456789101112131415#include&lt;iostream&gt;using namespace std;int main()&#123; //exchange m and n, without changing the pointer p and q int m = 10， n = 20； t; int *p = &amp;m; int *q = &amp;n; t = *p; *p = *q; *q = t;return 0;&#125; example 2: swap 2 integers by changing pointer 1234567891011121314#include&lt;iostream&gt;using namespace std;int main()&#123; int m =10, n = 20; int *p = &amp;m, *q = &amp;n, *t; t = p; p = q; q = t; return 0;&#125; example 3: swap 3 integers by function 123456789101112131415161718192021222324#include&lt;iostream&gt;using namespace std;void Swap(int *x, int *y);int main()&#123; int m = 10, n = 20; #ifndef NDEBUG cout &lt;&lt; \"main (before swapped): m = \" &lt;&lt; m &lt;&lt; \"; n = \" &lt;&lt; n &lt;&lt; endl; #endif Swap(&amp;m, &amp;n); #ifndef NDEBUG cout &lt;&lt; \"main (after swapped): m = \" &lt;&lt; m &lt;&lt; \"; n = \" &lt;&lt; n &lt;&lt; endl; #endif return 0;&#125;void Swap(int *x, int *y)&#123; int t; if (! x || !y)&#123; cout &lt;&lt; \"\" &#125;&#125; Constant Pointer Constant Pointer 1int n = 10; const int *p = &amp;n; 1void PrintObject( const int *p); Pointer pointing to a constant 1int n = 10; int * const p = &amp;n; Constant pointer pointing to a constant 1const int n = 10; const int * const p = &amp;n; pointer and return value12345int global = 0;int *ReturnPointer()&#123; return &amp;global;&#125; Pointer and complicated data type12345int a[8] = &#123;1, 2, 3, 4, 5, 6, 7, 8&#125;;int *p; p =&amp;a[0];int *p; p = aint *q; q = &amp;a[2]; // q point to a[2] pointer operation123456789101112*p = ap+2*p = a[3]; p-2q = p+2p++--p*p = a[0]; *q = a[2]; q-p = 2;p == qp = NULLif(p != NULL)if(p) pointer and array12345678910111213//Definitionvoid GenerateIntegers(int a[], unsigned int n)&#123; unsigned int i; Randomize(); for (i = 0; i &lt; n; i++) a[i] = GenerateRandomNumber(Lower, Upper);&#125;//Call#define NUM_OF_ELEMENTS 8int a[NUM_OF_ELEMENTS];GenerateIntegers(a, NUM_OF_ELEMENTS); Pointers as parameter 12345678910111213//Definitionvoid GenerateIntegers(int *p, unsigned int n)&#123; unsigned int i; Randomize(); for (i = 0; i &lt; n; i++) *p++ = GenerateRandomNumber(Lower, Upper);&#125;//Call#define NUM_OF_ELEMENTS 8int a[NUM_OF_ELEMENTS];GenerateIntegers(a, NUM_OF_ELEMENTS); example: Similarity of pointer and array12345int a[3] = &#123;1, 2, 3&#125;; int *p = &amp;a; int i;for (i = 0; i &lt; 3; i++) cout &lt;&lt; p[i] &lt;&lt; endl;for (i = 0; i &lt; 3; i++) cout &lt;&lt; *(a+i) &lt;&lt; endl; multidimensional array 123456void PrintTwoDimensinalArray( int a[8][8], unsigned int m, unsigned int n );void PrintTwoDimensinalArray( int a[][], unsigned int m, unsigned int n );void PrintTwoDimensinalArray( int * a, unsigned int m, unsigned int n );// a + n * i + j 1234567891011// void PrintTwoDimensinalArray(int * a, unsigned int m, unsigned int n)&#123;unsigned int i, j;for( i = 0; i &lt; m; i++ )for( j = 0; j &lt; n; j++ )cout &lt;&lt; *(a + n * i + j) &lt;&lt; \"; \";&#125;// int a[2][3] = &#123; &#123; 1, 2, 3 &#125;, &#123; 4, 5, 6 &#125; &#125;;PrintTwoDimensinalArray( a, 2, 3 ); pointer and structure123456789struct STUDENT&#123; int id; STRING name; int age; &#125;;STUDENT student = &#123; 2007010367, \"Name\", 19 &#125;;STUDENT * pstudent = &amp;student;(*pstudent).id = 2007010367;(*pstudent).name = DuplicateString( \"Name\" );(*pstudent).age = 19;pstudent-&gt;id = 2007010367; 123struct ARRAY&#123; unsigned int count; int * elements; &#125;;int a[8] = &#123; 1, 2, 3, 4, 5, 6, 7, 8 &#125;;ARRAY array = &#123; 8, &amp;a &#125;; 12345//访问 elements 的第 i 个元素: array.elements[i]//若有定义:ARRAY * parray = &amp;array;//访问 parray 指向的结构体对象 elements 的第 i 个元素:(*parray).elements[i]parray-&gt;elements[i] dynamic array 12struct ARRAY &#123; unsigned int count; int *elements; &#125;; StringString array12char s[8] = &#123; 'C', 'P', 'P', '-', 'P', 'r', 'o', 'g' &#125;;char t[5] = &#123; 'H', 'e', 'l', 'l', 'o' &#125;; 123// add '\\0' at the end of string arraychar s[9] = &#123; 'C', 'P', 'P', '-', 'P', 'r', 'o', 'g', '\\0' &#125;;char t[6] = &#123; 'H', 'e', 'l', 'l', 'o', '\\0' &#125;; example: 123456789101112131415unsigned int FindCharFirst( char c, char s[] )&#123; unsigned int i; if( !s ) &#123; cout &lt;&lt; \"FindCharFirst: Illegal string.\\n\"; exit(1); &#125; for( i = 0; s[i] != '\\0'; i++ ) &#123; if( s[i] == c ) return i; &#125; return inexistent_index; // 0xFFFFFFFF&#125; 123456789101112131415unsigned int FindCharFirst( char c, char * s )&#123; char * t; if( !s ) &#123; cout &lt;&lt; \"FindCharFirst: Illegal string.\\n\"; exit(1); &#125; for( t = s; *t != '\\0'; t++ ) &#123; if( *t == c ) return t - s; &#125; return inexistent_index; // 0xFFFFFFFF&#125; abstract string123456typedef char * STRING;typedef const char * CSTRING;unsigned int FindCharFirst( char c, char s[] );unsigned int FindCharFirst( char c, char* s );unsigned int FindCharFirst( char c, STRING s ); 12345678char s[9] = &#123; 'C', 'P', 'P', '-', 'P', 'r', 'o', 'g', '\\0' &#125;;char * s = \"CPP-Prog\";char * s; s = \"CPP-Prog\"; //correctchar s[9]; s = \"CPP-Prog\"; //wrongchar s[9] = \"CPP-Prog\" //correct example 12345678910111213141516STRING TransformCharIntoString( char c )&#123; STRING _s = (STRING)malloc( 2 ); _s[0] = c; _s[1] = '\\0'; return _s;&#125;//wrongSTRING TransformCharIntoString( char c )&#123; char _s[2]; _s[0] = c; _s[1] = '\\0'; return _s;&#125; standard string library12345char * strcat( char * dest, const char * src );int strcmp( const char * s1, const char * s2 );char * strcpy( char * dest, const char * src );int strlen( const char * s );char * strtok( char * token, const char * delimiters ); String Class123456string s = \"abcdefg\";string s( \"abcdefg\" );cout &lt;&lt; s &lt;&lt; endl;cin &gt;&gt; s; getline( cin, s, '\\n' ); 12345678910111213string s = \"abcdefg\";int a = s.length();s.resize(32); // 将s设为32字符长,多余舍弃,不足空闲s.resize(32, '='); // 多余舍弃,不足补‘=’string s1 = \"abcd\", s2 = \"efg\";s1.append( s2 ); // 将字符串s2追加到s1尾部string s1 = \"abcdefg\", s2 = \"abcdxyz\";int a = s1.compare( s2, 0 ); // 从0号位字符开始比较string s1 = \"abcdefg\", s2 = \"bcd\";int a = s1.find( s2, 0 ); Dynamic Storage Allocation1234#include &lt;cstdlib&gt;#include &lt;cmalloc&gt;void * malloc( unsigned int size );void free( void * memblock ); malloc12char * p;p = (char *)malloc(11); 12345678910111213141516char * DuplicateString( char * s )&#123; char * t; unsigned int n, i; if( !s ) &#123; cout &lt;&lt; \"DuplicateString: Parameter Illegal.\"; exit(1); &#125; n = strlen( s ); t = ( char * )malloc( n + 1 ); for( i = 0; i &lt; n; i++ ) t[i] = s[i]; t[n] = '\\0'; return t;&#125; 12345678char * p;p = (char *)malloc(11);free(p);int * p = ( int * )malloc( 10 * sizeof( int ) );free( p );free( p ); p = NULL; new12345int * p; p = new int; *p = 10;int * p; p = new( int ); *p = 10;int * p; p = new int(10); // 将 *p 初始化为 10int * p; p = new(int)(10);int * p; p = new int[8]; // 分配 8 个元素的整数数组 delete123int * p; p = new int; *p = 10; delete p;int * p; p = new int[8]; delete[] p;// not delete p[ ]! 123456int *p, *q;q = ( int* )malloc( sizeof(int) );p = q;free( p ); p = NULL; // q is dangling pointer storage leak12345void f()&#123; int * p = new int; *p = 10; &#125; Reference1int a; int &amp; ref = a; 1234567891011#include &lt;iostream&gt;using namespace std;int main()&#123; int a; int &amp; ref = a; a = 5; cout &lt;&lt; \"a: \" &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; \"ref: \" &lt;&lt; ref &lt;&lt; endl; ref = 8; cout &lt;&lt; \"a: \" &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; \"ref: \" &lt;&lt; ref &lt;&lt; endl; return 0;&#125; call by reference1234void Swap( int &amp; x, int &amp; y )&#123; int t; t = x; x = y; y = t; return;&#125; 12345int main()&#123; int a = 10, b = 20; Swap( a, b ); return 0;&#125; constant reference123456789101112131415int &amp; Inc( int &amp; dest, const int &amp; alpha );int &amp; Inc( int &amp; dest, const int &amp; alpha )&#123; dest += alpha; return dest;&#125;int main()&#123; int a = 10, b = 20, c; Inc( a, b ); c = Inc(a, b)++; return 0;&#125; Function Pointer1typedef void * ADT; typedef const void * CADT; data type ()() 1char * ( * as_string )( ADT object ); 123char * DoTransformObjectIntoString( ADT object )&#123; return PtTransformIntoString( (PPOINT)object ); &#125;as_string = DoTransformObjectIntoString; 1234char * returned_value;PPOINT pt = PtCreate( 10, 20 );as_string = DoTransformObjectIntoString;returned_value = as_string( (ADT)pt ); example: qsort 123void qsort( void * base, unsigned int number_of_elements,unsigned int size_of_elements,int ( * compare )( const void *, const void * ) ); 12345678910111213141516171819202122#include &lt;iostream&gt;#include &lt;cstdlib&gt;using namespace std;#include \"arrmanip.h\"#define NUMBER_OF_ELEMENTS 8int DoCompareObject( const void * e1, const void * e2 );int main()&#123; int a[NUMBER_OF_ELEMENTS]; GenerateIntegers( a, NUMBER_OF_ELEMENTS ); cout &lt;&lt; \"Array generated at random as follows: \\n\"; PrintIntegers( a, NUMBER_OF_ELEMENTS ); qsort( a, NUMBER_OF_ELEMENTS, sizeof(int), DoCompareObject ); cout &lt;&lt; \"After sorted: \\n\"; PrintIntegers( a, NUMBER_OF_ELEMENTS ); return 0;&#125;int DoCompareObject( const void * e1, const void * e2 )&#123; return CompareInteger( *(const int *)e1, *(const int *)e2 );&#125;","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Programming","slug":"Computer-Science/Programming","permalink":"http://yoursite.com/categories/Computer-Science/Programming/"},{"name":"C++","slug":"Computer-Science/Programming/C","permalink":"http://yoursite.com/categories/Computer-Science/Programming/C/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"},{"name":"MOOC","slug":"MOOC","permalink":"http://yoursite.com/tags/MOOC/"}]},{"title":"Python NumPy Basics","slug":"Python NumPy Basics","date":"2019-08-05T04:00:00.000Z","updated":"2019-08-07T16:56:27.214Z","comments":true,"path":"2019/08/05/Python NumPy Basics/","link":"","permalink":"http://yoursite.com/2019/08/05/Python NumPy Basics/","excerpt":"","text":"This is a class note of NYU MFE Bootcamp, including contains basic knowledge of Python NumPy syntax and techniques. Understanding Data Types in Python to part of Operations of NumPy arrays was on Aug 5th; The rest was on Aug 6th. Understanding Data Types in PythonStatically-typing &amp; Dynamic typingA statically-typed language like C or Java requires each variable to be explicitly declared, while Python skips this specification. 1234result = 0for i in range(100): result += iprint(result) This means we can assign any kind of data to any variable. Behind the python: flexibilityThe standard Python implementation is written in C, which means every Python object is simply a cleverly-disguised C structure, not only its value, but other information as well. IntegerA single integer in Python 3.4 contains four pieces. ob_refcnt ob_type ob_size ob_digit A python integer is a pointer to a position in memory containing all the Python object information, including the bytes that contain the integer value. ListList is almost the most flexibility type in Python. 123L = list(range(10))Ltype(L[0]) output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] int Change it to a list of strings: 123L2 = [str(c) for c in L]L2type(L2[0]) output: [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;] str Or we can create heterogeneous lists: 12L3 = [True, \"2\", 3.0, 4][type(item) for item in L3] output: [bool, str, float, int] Flexibility comes with a cost (loss of storage and efficiency). In the special case that all variables are of the same type, much of this flexibility is redundant. Then comes with fixed-type NumPy-style array. ArrayThe built in array module can be used to create dense arrays of a uniform type: 1234import arrayL = list(range(10))A = array.array('i', L)A output: array(&#39;i&#39;, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) However, the NumPy Array is more efficient than array because of the operations on data. Overlook of NumPy arraysBasic NumPy array syntax:basic syntax: 12import numpy as npnp.array([1,4,2,5,3]) output: array([1, 4, 2, 5, 3]) The type of elements in array should, but does not have to, be the same. If the types do not match, Numpy will upcast if possible. 1np.array([3.14, 4, 2, 3]) output: array([3.14, 4. , 2. , 3. ]) Here, integers are up-cast to floating point. And we can use dtype keyword to set the data type: 1np.array([1, 2, 3, 4], dtype='float32') output: array([1., 2., 3., 4.], dtype=float32) NumPy array as matrixNumpy arrays can explicity be muti-dimensional, using a list of lists: 12# nested lists result in multi-dimensional arraysnp.array([range(i, i+3) for i in [2, 4, 6]]) output: array([[2, 3, 4], [4, 5, 6], [6, 7, 8]]) for better understanding, we can run a 2*2 array: 1np.array([range(i, i+2) for i in [2, 4]]) output array([[2, 3], [4, 5]]) or a 3*10 array: 1np.array([range(i, i+10) for i in [2, 4, 6]]) output: array([[ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]]) It is more efficient to create arrays from scratch using routines built into Numpy: zero array with 10 integer: 1np.zeros(10, dtype=int) output: array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) one array: 1np.ones((3,5), dtype=float) output: array([[1., 1., 1., 1., 1.], [1., 1., 1., 1., 1.], [1., 1., 1., 1., 1.]]) An array with some identical elements: 1np.full((3, 5), 3.14) output: array([[3.14, 3.14, 3.14, 3.14, 3.14], [3.14, 3.14, 3.14, 3.14, 3.14], [3.14, 3.14, 3.14, 3.14, 3.14]]) A linear sequence 123# create an array filled with a linear sequence# starting at 0, this is similar to the built-in range() functionnp.arange(0, 20, 2) output: array([ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18]) linspace 123# create an array of five values evenly spaced# between 0 and 1np.linspace(0, 1, 5) output: array([0. , 0.25, 0.5 , 0.75, 1. ]) uniformly distributed random value 12# create a 3*e arrayof uniformly distributed random values between 0 and 1np.random.random((3, 3)) output: array([[0.57226098, 0.56849713, 0.63410602], [0.88335333, 0.46056684, 0.95494879], [0.22305721, 0.18478839, 0.78352821]]) normal distributed random value 1np.random.normal(0, 1, (3, 3)) output: array([[ 1.05100904, 1.71407429, 0.75356105], [-0.61885082, 0.43198626, 0.63819954], [-0.53911965, 1.07533192, -0.27227068]]) random value 12# create a 3*3 array of random integers in the interval [0, 10]np.random.randint(0, 10, (3, 3)) output: array([[0, 7, 1], [2, 7, 6], [7, 8, 5]]) create identity matrix 12# create a 3*3 identity matrixnp.eye(3) output: array([[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]]) uninitialized array 1234# create an uninitialized array of three integers# the values will be whatever happens to # already exist at that memory locationnp.empty(3) output: array([1., 1., 1.]) Standard Data Types numpy is also built in C, the data type can be specified using a string: 12np.zeros(10, dtype = 'int16')np.zeros(10, dtype = np.int16) #same output array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int16) Operations of NumPy arrays attributes of arrays indexing of arrays slicing of arrays reshaping of arrays joining and splitting of arrays Attributes of arraysdetermining the size, shape, memory consumption, and data types of arrays We can use random number generator, which we will seed with a set value in order to ensure that the same random arrays are generated each time this code is run: 1234567np.random.seed(0)# seed for reproducibilityx1 = np.random.randint(10, size=6)x2 = np.random.randint(10, size=(3, 4))x3 = np.random.randint(10, size=(3, 4, 5))print(x1)print(x2)print(x3) output: [5 0 3 3 7 9] [[3 5 2 4] [7 6 8 8] [1 6 7 7]] ([[[8, 1, 5, 9, 8], [9, 4, 3, 0, 3], [5, 0, 2, 3, 8], [1, 3, 3, 3, 7]], [[0, 1, 9, 9, 0], [4, 7, 3, 2, 7], [2, 0, 0, 4, 5], [5, 6, 8, 4, 1]], [[4, 9, 8, 1, 1], [7, 9, 9, 3, 6], [7, 2, 0, 3, 5], [9, 4, 4, 6, 4]]]) each array has attributes ndim, shape and size: 123print(\"x3 ndim: \", x3.ndim)print(\"x3 shape: \", x3.shape)print(\"x3 size: \", x3.size) output: x3 ndim: 3 x3 shape: (3, 4, 5) x3 size: 60 we can check the type of x3 1print(\"dtype:\", x3.dtype) dtype: int32 itemsize is another attribute, which list the size in bytes of each array element, and nbytes list the total size of the array: 1print(\"itemsize: \", x3.itemsize, \"bytes\") itemsize: 4 In general, we expect that nbytes is equal to itemsize times size. Array IndexingGetting and setting the value of individual array elements 12print(x1[0])print(x1[4]) output: 5 7 use negative indices: 12print(x1[-1])print(x1[-2]) ouptut: 9 7 items can be accessed using a comma-separated tuple of indices: 123print(x2)print(x2[2, 0])print(x2[2, -1]) output: [[3 5 2 4] [7 6 8 8] [1 6 7 7]] 1 7 Values can be modified using any of the above index notation: 123print(x2)x2[0, 0] = 12print(x2) output: [[3 5 2 4] [7 6 8 8] [1 6 7 7]] [[12 5 2 4] [ 7 6 8 8] [ 1 6 7 7]] Numpy arrays have a fixed type. The different type will be silently truncated automatically 12x1[0] = 3.14159 # this will be truncated!x1 output: array([3, 0, 3, 3, 7, 9]) Array SlicingGetting and setting smaller subarrays within a larger array The standard Python list slicing is: ​ x[start:stop:step] The default to the values start = 0, stop = size of dimension, step = 1 12x = np.arange(10)x output: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) One-dimensionThis is operation of one-dimensional subarrays 1234567x[:5] # first five elementsx[5:]x[4:7] # middle sub-arrayx[::2] # every other elementx[1::2] # every other element, starting at index1x[::-1] # reversedx[5::-2] # reversed every other from index 5 output: array([0, 1, 2, 3, 4]) array([5, 6, 7, 8, 9]) array([4, 5, 6]) array([0, 2, 4, 6, 8]) array([1, 3, 5, 7, 9]) array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) array([5, 3, 1]) Multi-dimension1x2 output: array([[12, 5, 2, 4], [ 7, 6, 8, 8], [ 1, 6, 7, 7]]) Some operations of multi-dimensional subarrays 123x2[:2, :3] # first two rows, three columnsx2[:3, ::2] #all rows, every other columnx2[::-1, ::-1] # subarray dimensions can even be reversed together output: array([[12, 5, 2], [ 7, 6, 8]]) array([[12, 2], [ 7, 8], [ 1, 7]]) array([[ 7, 7, 6, 1], [ 8, 8, 6, 7], [ 4, 2, 5, 12]]) Accessing of single rows or columns of an array can be done by combining indexing and slicing, using an empty slice marked by a single colon (:): 123456print(x2[:,0]) #first column of x2print(x2[0,:]) #first row of x2# In the case of row access, the empty slice can be omitted for a more compact syntaxprint(x2[0]) #equivalent output: [12 7 1] [12 5 2 4] [12 5 2 4] Copy &amp; No-Copy SubarraysNumPy array slice return views rather than copies of the array data. However, Python list slicing will be copies. Changed Example Extract a 2*2 subarray from this: 12x2_sub = x2[:2, :2]print(x2_sub) [[12 5] [ 7 6]] The original array is changed: 123x2_sub[0, 0] = 99print(x2_sub)print(x2) output: [[99 5] [ 7 6]] [[99 5 2 4] [ 7 6 8 8] [ 1 6 7 7]] it is a useful property, we can access and process pieces of these datasets without the need to copy the underlying data buffer. Unchanged Example we can also create a explicitly copy the data within an array or a subarray. 123x2_sub_copy = x2[:2,:2].copy()print(x2_sub_copy)print(x2) output: [[99 5] [ 7 6]] [[99 5 2 4] [ 7 6 8 8] [ 1 6 7 7]] If we modify this subarray, the original array is not touched: 123x2_sub_copy[0,0] = 42print(x2_sub_copy)print(x2) output: [[42 5] [ 7 6]] [[99 5 2 4] [ 7 6 8 8] [ 1 6 7 7]] Array ReshapingChanging the shape of a given array 123# put number 1-9 in a 3*3 grid:grid = np.arange(1,10).reshape((3,3))print(grid) output: [[1 2 3] [4 5 6] [7 8 9]] The size of the initial array must match the size of the reshaped array. The reshape method will use a no-copy view of the initial array. We can use newaxis method to realize the reshape effect. 1234567x = np.array([1,2,3])x.reshape((1,3))x[np.newaxis, :]x.reshape((3,1))x[:, np.newaxis] output: array([[1, 2, 3]]) array([[1, 2, 3]]) array([[1], [2], [3]]) array([[1], [2], [3]]) Array concatenation and splittingCombining multiple arrays into one, and splitting one array into many Concatenationconcatenation: combine multiple arrays into one 123x = np.array([1, 2, 3])y = np.array([3, 2, 1])np.concatenate([x, y]) output: array([1, 2, 3, 3, 2, 1]) In two-dimensional situation, default is zero-indexed. 1234grid = np.array([[1, 2, 3], [4, 5, 6]])# concatenate along the first axisnp.concatenate([grid, grid]) output: array([[1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6]]) We can concatenate along the second axis (zero-indexed). 12# zero-indexednp.concatenate([grid, grid], axis=1) output: array([[1, 2, 3, 1, 2, 3], [4, 5, 6, 4, 5, 6]]) vstack: vertically stack the arrays 1234x = np.array([1,2,3])grid = np.array([[9, 8, 7], [6, 5, 4]])np.vstack([x, grid]) output: array([[1, 2, 3], [9, 8, 7], [6, 5, 4]]) hstack: horizontally stack the arrays 1234# horizontaly = np.array([[99], [99]])np.hstack([grid, y]) output: array([[ 9, 8, 7, 99], [ 6, 5, 4, 99]]) Splitingsplit: opposite of concatenation. 123x = [1, 2, 3, 99, 99, 3, 2, 1]x1, x2, x3 = np.split(x, [3, 5])print(x1, x2, x3) output: [1 2 3] [99 99] [3 2 1] Notice that N split-points, leads to N+1 subarrays. np.hsplit and np.vsplit are similar. In multi-dimensional situation: 12grid = np.arange(16).reshape((4, 4))grid output: array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11], [12, 13, 14, 15]]) np.vsplit and np.hsplit 1234567upper, lower = np.vsplit(grid, [2])print(upper)print(lower)left, right = np.hsplit(grid, [2])print(left)print(right) output: [[0 1 2 3] [4 5 6 7]] [[ 8 9 10 11] [12 13 14 15]] [[ 0 1] [ 4 5] [ 8 9] [12 13]] [[ 2 3] [ 6 7] [10 11] [14 15]] Computation and Functions in NumPyThe speed of computation on NumpyComputation can be very fast or very slow. The key to making it fast is to use vectorized operations, generally implemented through universal functions(ufuncs). The Slowness of Loops123456789101112# slowness of loopsimport numpy as npnp.random.seed(0)def compute_reciprocals(values): output = np.empty(len(values)) for i in range(len(values)): output[i] = 1.0 / values[i] return outputvalues = np.random.randint(1, 10, size = 5)compute_reciprocals(values) output: array([0.16666667, 1. , 0.25 , 0.25 , 0.125 ]) If we use this code for a large input, the operation is very slow. 123# IPython's %timeitbig_array = np.random.randint(1, 100. size=1000000)%timeit compute_reciprocals(big_array) It turns out that the bottleneck here is not the operations themselves, but the type-checking and function dispatches that CPython must do at each cycle of the loop. Vectorized OperationHowever, Numpy provides a convenient interface to compile routine, which is named as a vectorized operation. 123print(compute_reciprocals(values))print(1.0 / values)%timeit (1.0 / big_array) Vectorized operations in Numpy are implemented via ufuncs, whose main purpose is to quickly execute repeated operations or values in Numpy arrays. 1np.arange(5) / np.arange(1,6) output: array([0. , 0.5 , 0.66666667, 0.75 , 0.8 ]) Here is the multi-dimensional situation: 12x = np.arange(9).reshape((3,3))2 ** x output: array([[ 1, 2, 4], [ 8, 16, 32], [ 64, 128, 256]], dtype=int32) We can use these ufuncs to realize various purpose. Computation via NumPy UFuncsUfuncs exist in two flavors: unary ufuncs, which operate on a single input binary ufuncs, which operate on two inputs We can use uFuncs to achieve arithmetic purpose. Array arithmeticThe basic arithmetic operations 1234567891011import numpy as npx=np.arange(4)print(\"x =\", x)print(\"x + 5 =\", x + 5)print(\"x - 5 =\", x - 5)print(\"x + 5 =\", x + 5)print(\"x + 5 =\", x + 5)print(\"x + 5 =\", x + 5)print(\"-x =\", -x) # negationprint(\"x ** 2 =\", x ** 2) # exponentiationprint(\"x % 2 =\", x &amp; 2) # modulus output: 123456789x = [0 1 2 3]x + 5 = [5 6 7 8]x - 5 = [-5 -4 -3 -2]x + 5 = [5 6 7 8]x + 5 = [5 6 7 8]x + 5 = [5 6 7 8]-x = [ 0 -1 -2 -3]x ** 2 = [0 1 4 9]x % 2 = [0 0 2 2] We can also combine them together. these arithmetic are simply wrappers specific functions built into NumPy. 12print(-(0.5* + 1)**2)print(np.add(x, 2)) output: 12-0.25[2 3 4 5] Other arithmetic operators and functions include: 1234abx(x)np.exp(x)np.log(x)np.sin(x) Specialized functions used in statistics exist in scipy 12345from scipy import specialx = [1, 5, 10]print(\"gamma(x) =\", special.gamma(x))print(\"ln|gamma(x)| =\", special.gammaln(x))print(\"beta(x, 2) =\", special.beta(x, 2)) output: 123gamma(x) = [1.0000e+00 2.4000e+01 3.6288e+05]ln|gamma(x)| = [ 0. 3.17805383 12.80182748]beta(x, 2) = [0.5 0.03333333 0.00909091] To summarize the typical values in a dataset, we can use aggregates function. NumPy’s aggregate function version is computed much more quickly. 123L = np.random.random(100)print(sum(L))print(np.sum(L)) 1247.62021077872389447.620210778723894 Timing the different functions: 123big_array = np.random.rand(1000000)%timeit sum(big_array)%timeit np.sum(big_array) ouptut: 12113 ms ± 7.37 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)1.28 ms ± 69.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) For min, max, sum, and several other NumPy aggregates, a shorter syntax is to use methods of the array object itself: 123min(big_array), max(big_array)np.min(big_array), np.max(big_array)print(big_array.min(), big_array.max(), big_array.sum()) output: 123(7.476608001599772e-07, 0.9999999017465359)(7.476608001599772e-07, 0.9999999017465359)7.476608001599772e-07 0.9999999017465359 499703.64780246833 For multi-dimensional aggregates, there are three situation: the entire array, the row and the column. 123M = np.random.random((3, 4))print(M)print(M.sum()) output: 1234[[0.31678953 0.12015542 0.47115746 0.91046151] [0.66547603 0.36825635 0.79325825 0.2072341 ] [0.73285524 0.39698562 0.5593977 0.514694 ]]6.0567212054611375 To calculate aggregate from an axis. 12print(M.min(axis=0))print(M.max(axis=1)) output: 12[0.31678953 0.12015542 0.47115746 0.2072341 ][0.91046151 0.79325825 0.73285524] The axis keyword specifies the dimension of the array will be collapsed, rather than the dimension that will be returned. additionally, most aggregates have a NaN-safe counterpart that computes the result while ignoring values, for example, np.sum and np.nansum. Example: What is Average Height of US Presidents?12345678910111213import numpy as npimport pandas as pddata = pd.read_csv('E:/NYU/BootCamp/Bootcamp Onsite/Afternoon/python/president_heights.csv')# data.head()heights = np.array(data['height(cm)'])print(heights)print(\"Mean height: \", heights.mean())print(\"Standard deviation:\", heights.std())print(\"Minimum height: \", heights.min())print(\"Maximum height: \", heights.max())print(\"25th percentile: \", np.percentile(heights, 25))print(\"Median: \", np.median(heights))print(\"75th percentile: \", np.percentile(heights, 75)) output: order name height(cm) 0 1 George Washington 189 1 2 John Adams 170 2 3 Thomas Jefferson 189 3 4 James Madison 163 4 5 James Monroe 183 123[189 170 189 163 183 171 185 168 173 183 173 173 175 178 183 193 178 173 174 183 183 168 170 178 182 180 183 178 182 188 175 179 183 193 182 183 177 185 188 188 182 185] 12345678%matplotlib inlineimport matplotlib.pyplot as pltimport seaborn; seaborn.set() # set plot styleplt.hist(heights)plt.title('Height Distributtion of US Presidents')plt.xlabel('height (cm)')plt.ylabel('number') output: 1Text(0, 0.5, &apos;number&apos;)","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Programming","slug":"Computer-Science/Programming","permalink":"http://yoursite.com/categories/Computer-Science/Programming/"},{"name":"Python","slug":"Computer-Science/Programming/Python","permalink":"http://yoursite.com/categories/Computer-Science/Programming/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"NYU","slug":"NYU","permalink":"http://yoursite.com/tags/NYU/"},{"name":"Numpy","slug":"Numpy","permalink":"http://yoursite.com/tags/Numpy/"},{"name":"Bootcamp","slug":"Bootcamp","permalink":"http://yoursite.com/tags/Bootcamp/"}]},{"title":"The Unamiable but Worthwhile Age of 22","slug":"The Unamiable but Worthwhile Age of 22","date":"2019-03-28T16:00:00.000Z","updated":"2019-03-29T13:32:01.967Z","comments":true,"path":"2019/03/28/The Unamiable but Worthwhile Age of 22/","link":"","permalink":"http://yoursite.com/2019/03/28/The Unamiable but Worthwhile Age of 22/","excerpt":"","text":"It appears to me that, by flipping the screen at the tail of the age of 22, I only posted 10 moments on WeChat in the pasted year. Having no idea how I will estimate it after many years, I would like to write my frustration and growth, compared to the wonderful life created by the images on the social media, briefly but seriously. Around February last year, I had to experience a gap year without submitting the applications, for the simple reason that the English tests are unfavorable. Thus, the beginning of the age of 22 is a little disappointing for me. Going back to the campus in the last undergraduate semester drove me kind of nervous and embarrassed: after all, lack of offers from both postgraduate schools and employers, as well as consumption of parents’ money in the next few years, was not a honored situation to show. But I was released later because friendly classmates and considerate colleagues didn’t regard it as a big matter, which taught me that peer pressure which always appears in several steps in life is such a subtle mood that on the one hand it stems from personal initiative, but on the other hand, also more importantly, we had better not be coerced by it so as to live in an anxious but unconstructive situation. Now that having decided to apply in the next year, I just wanted to do an internship to accumulate more working experience, which is also the requirement for graduation. Fortunately, I got the opportunity, via Peng, to be a part time assistant in RB to assist Arielle, Peiyao, Jass, Jessie and other mentors in finishing a challenging but interesting project from March to May. Not only did I learn the way of thinking as a consultant with the knowledge about the Internet of Things &amp; Energy and cases, but acquaint and make friends with excellent colleagues and peers. At the same time, I completed my thesis during this period under the routine of library-canteen-dormitory. To be honest, it was exhausting but fulfilling. Time flies. Before the commencement, graduation trip fascinates me to fly to Chongqing, Chengdu and Xi’an with other 11 classmates, during which the first time disco dancing, airbnb living, hangover, love stories and et cetera all constituted one of the most memorable experience in my life. I appreciated it. However, graduation process cannot be stoppable, even if I still lived in Lin’s dorm 2 weeks after commencement. The old days, I missed them. Oddly enough, the sense of graduation is not strong for me, perhaps because I still have the mission to complete. In August, I went to Beijing and restarted the fight with ETS, which last to November and December. I met numerous comrades in similar situation with dreams but struggles to get the points. The details in these stories are complicated, even unperfect, but the important thing was that I survived. I still remember the slogan of ETS: “Go Anywhere From Here.” It may means how widespread and well-accepted it is all over the world. However, I prefer regarding it as below: after beating it, anyone will be bestowed the courage to go anywhere. I spent most of my struggling time at home, Zhengzhou, with parents, which was also an appropriate time to consider what I really want and what really matters in life. In Zhengzhou, there is an English corner where I have met a group of sagacious and experienced people. At the meantime, I learned how to cook and feed myself, how to drive a car, and how to deal with my inner impulse and frustration without a supervision and “normal” pace. From the aspect of the result of my application, the age of 22 is unamiable and unperfect, but I still eager to regard it as a worthwhile and well-rounded wealth, because I still need my endeavor to protect my dream in the brand new age of 23.","categories":[{"name":"Thoughts","slug":"Thoughts","permalink":"http://yoursite.com/categories/Thoughts/"},{"name":"Personal Journals","slug":"Thoughts/Personal-Journals","permalink":"http://yoursite.com/categories/Thoughts/Personal-Journals/"}],"tags":[{"name":"Journal","slug":"Journal","permalink":"http://yoursite.com/tags/Journal/"},{"name":"Annual Letter","slug":"Annual-Letter","permalink":"http://yoursite.com/tags/Annual-Letter/"}]},{"title":"What I Have Lived For","slug":"What I Have Lived For","date":"2019-03-20T16:00:00.000Z","updated":"2019-03-21T14:01:10.156Z","comments":true,"path":"2019/03/20/What I Have Lived For/","link":"","permalink":"http://yoursite.com/2019/03/20/What I Have Lived For/","excerpt":"","text":"This prose is the prologue to Bertrand Russell’s Autobiography, where the three passions have been motivating me since the high school. Below is Russell’s original text: Three passions, simple but overwhelmingly strong, have governed my life: the longing for love, the search for knowledge, and unbearable pity for the suffering of mankind. These passions, like great winds, have blown me hither and thither, in a wayward course, over a great ocean of anguish, reaching to the very verge of despair. I have sought love, first, because it brings ecstasy - ecstasy so great that I would often have sacrificed all the rest of life for a few hours of this joy. I have sought it, next, because it relieves loneliness—that terrible loneliness in which one shivering consciousness looks over the rim of the world into the cold unfathomable lifeless abyss. I have sought it finally, because in the union of love I have seen, in a mystic miniature, the prefiguring vision of the heaven that saints and poets have imagined. This is what I sought, and though it might seem too good for human life, this is what—at last—I have found. With equal passion I have sought knowledge. I have wished to understand the hearts of men. I have wished to know why the stars shine. And I have tried to apprehend the Pythagorean power by which number holds sway above the flux. A little of this, but not much, I have achieved. Love and knowledge, so far as they were possible, led upward toward the heavens. But always pity brought me back to earth. Echoes of cries of pain reverberate in my heart. Children in famine, victims tortured by oppressors, helpless old people a burden to their sons, and the whole world of loneliness, poverty, and pain make a mockery of what human life should be. I long to alleviate this evil, but I cannot, and I too suffer. This has been my life. I have found it worth living, and would gladly live it again if the chance were offered me.","categories":[{"name":"Thoughts","slug":"Thoughts","permalink":"http://yoursite.com/categories/Thoughts/"},{"name":"Other","slug":"Thoughts/Other","permalink":"http://yoursite.com/categories/Thoughts/Other/"}],"tags":[{"name":"Journal","slug":"Journal","permalink":"http://yoursite.com/tags/Journal/"}]},{"title":"Python Pandas Basics","slug":"Python Pandas Basics","date":"2019-03-18T04:00:00.000Z","updated":"2019-08-07T17:42:39.557Z","comments":true,"path":"2019/03/18/Python Pandas Basics/","link":"","permalink":"http://yoursite.com/2019/03/18/Python Pandas Basics/","excerpt":"","text":"This note contains basic knowledge of pandas including basic syntax and so on. Posted on Aug 6th is a draft. 1. Data Type in Pandaspandas is a newer package built on top of NumPy. Series and DataFrame is the basic data type. Pandas provides efficient access to these sorts of “data munging” tasks that occupy much of a data scientist’s time. 1.1 Series1.1.1 Series BasicsSeries is a one-dimensional array of indexed data. 123import pandas as pddata = pd.Series([0.25, 0.5, 0.75, 1.0])data output: 123450 0.251 0.502 0.753 1.00dtype: float64 The values are simply a familiar Numpy array and the index is an array-like of type pd.index. 12data.valuesdata.index output: 12array([0.25, 0.5 , 0.75, 1. ])RangeIndex(start=0, stop=4, step=1) we can access the element in the series via square-bracket notation. 12print(data[1])print(data[1:3]) output: 12340.51 0.502 0.75dtype: float64 1.1.2 Series IndexSeries is similar to one-dimensional NumPy Array. The essential difference is the presence of the index: while the NumPy Array has an implicitly de fined integer index used to access the values, the Pandas Series has an explicitly de fined index associated with the values. we can define the index with any desired type when creating a series 12data = pd.Series([0.25, 0.5, 0.75, 1.0], index=[\"a\", \"b\", \"c\", \"d\"])data output: 12345a 0.25b 0.50c 0.75d 1.00dtype: float64 We can access the element by using index 1data[\"b\"] output: 10.5 Here, series is a bit like a specialization of a Python dictionary. It is even more clear and efficient than dictionary in Python. 12345678population_dict = &#123;'California': 38332521, 'Florida': 19652860, 'Illinois':12882135, 'New York': 19651127, 'Texas': 26448193 &#125;population = pd.Series(population_dict)population output: 123456California 38332521Florida 19652860Illinois 12882135New York 19651127Texas 26448193dtype: int64 Here, series is a bit like a specialization of a Python dictionary. It is even more clear and efficient than dictionary in Python. 12population['California']population['California':'Illinois'] output: 1234538332521California 38332521Florida 19552860Illinois 12882135dtype: int64 1.1.3 Constructing SeriesWe can construct a Series from scratch: pd.Series(data, index = index), where Index is an optional argument. data can be one of many entities. The ‘data’ can be a list or Numpy array, can be a scalar, can be a dictionary 123pd.Series(5, index = [100, 200, 300])pd.Series(&#123;2:'a', 1:'b', 3:'c'&#125;)pd.Series(&#123;2:'a', 1:'b', 3:'c'&#125;, index = [3, 2]) output: 1234567891011100 5200 5300 5dtype: int642 a1 b3 cdtype: object3 c2 adtype: object In this case, the Series is populated only wit the explicitly identified keys. 1.2 DataFrame1.2.1 DataFrame BasicsDataframe can be thought of either as a generalization of a NumPy array, or as a specialization of a Python dictionary. It is an analog of a two dimensional array with flexible row indices and column names. 12345678area_dict = &#123;'California': 423967, 'Florida': 170312 , 'Illinois':149995, 'New York': 141297, 'Texas': 696562 &#125;area = pd.Series(area_dict)area output: 123456California 423967Florida 170312Illinois 149995New York 141297Texas 696562dtype: int64 we can use a dictionary to construct a single two-dimensional object: 12states = pd.DataFrame(&#123;'population': population, 'area': area&#125;)states output: population area California 38332521 423967 Florida 19652860 170312 Illinois 12882135 149995 New York 19651127 141297 Texas 26448193 696562 DataFrame also has index attribute that gives access to the index lables: 12states.indexstates.columns output: 12Index([California, Florida, Illinois, New York,Texas], dtype=object)Index([area, population], dtype=object) A Pandas Dataframe can be constructed in variety of ways a. from a single Series object: 1pd.DataFrame(population, columns=['popluation']) output: popluation California 38332521 Florida 19652860 Illinois 12882135 New York 19651127 Texas 26448193 b. from a list of dicts: 123data = [&#123;'a':i, 'b':2 * i&#125; for i in range(3)]pd.DataFrame(data) output: .dataframe tbody tr th:only-of-type { vertical-align: middle; } 1234567.dataframe tbody tr th &#123; vertical-align: top;&#125;.dataframe thead th &#123; text-align: right;&#125; a b 0 0 0 1 1 2 2 2 4 Even if some keys in the dictionary are missing, Pandas will fill them in with NaN (i.e., \\not a number”) values: 1pd.DataFrame([&#123;'a':1, 'b': 2&#125;,&#123;'b':3, 'c':4&#125;]) output: a b c 0 1.0 2 NaN 1 NaN 3 4.0 c. from a dictionary of Series objects 1pd.DataFrame(&#123;population: population, area: area&#125;) d. from a two-dimensional Numpy array 123pd.DataFrame(np.random.rand(3, 2), columns=['foo', 'bar'], index=['a', 'b', 'c']) output: foo bar a 0.010853 0.798349 b 0.970245 0.074233 c 0.429177 0.251008 e. from a numpy structured array 1A = np.zeros(3, dtype = [('A', 'i8'), ('B', 'f8')]) 1.2.2 Pandas Index ObjectHere is an example: 12ind = pd.Index([2, 3, 5, 7, 11])ind output: 1Int64Index([2, 3, 5, 7, 11], dtype=&apos;int64&apos;) a. we can use standard Python indexing notation to retrieve values or slices: 123print(ind[1])print(ind[::2])print(ind.size,ind.shape, ind.ndim, ind.dtype) 1233Int64Index([2, 5, 11], dtype=&apos;int64&apos;)5 (5,) 1 int64 b. index objects and numpy arrays are immutable, they cannot be modified 1ind[1] = 0 output: 123456---------------------------------------------------------------------------TypeError Traceback (most recent call last)&lt;ipython-input-66-906a9fa1424c&gt; in &lt;module&gt;----&gt; 1 ind[1] = 0 123456D:\\Anaconda\\lib\\site-packages\\pandas\\core\\indexes\\base.py in __setitem__(self, key, value) 2063 2064 def __setitem__(self, key, value):-&gt; 2065 raise TypeError(&quot;Index does not support mutable operations&quot;) 2066 2067 def __getitem__(self, key): 1TypeError: Index does not support mutable operations This immutability makes it safer to share indices between multiple DataFrames and arrays, without the potential for side effects from inadvertent index modi fication. c. set arithmetic 12345indA = pd.Index([1, 3, 5, 7, 9])indB = pd.Index([2, 3, 5, 7, 11])indA &amp; indB # IntersectionindA | indB # UnionindA ^ indB # symmetric difference output: 123Int64Index([3, 5, 7], dtype=&apos;int64&apos;)Int64Index([1, 2, 3, 5, 7, 9, 11], dtype=&apos;int64&apos;)Int64Index([1, 2, 9, 11], dtype=&apos;int64&apos;) 1.3 Data Selection and Operation indexing (e.g., arr[2; 1]) slicing (e.g., arr[:; 1 : 5]) masking (e.g., arr[arr &gt; 0]) fancy indexing (e.g., arr[0; [1; 5]]) combinations thereof (e.g., arr[:; [1; 5]]) 1.3.1 Series Operation1234import pandas as pddata = pd.Series([0.25, 0.5, 0.75, 1.0])data.Index = ['a', 'b', 'c', 'd']data output: 123450 0.251 0.502 0.753 1.00dtype: float64 Index, key and values: 123'a' in datadata.keys()list(data.items()) output: 123TrueIndex([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;], dtype=&apos;object&apos;)[] We can modify the values or extend a Series by assigning to a new index value. 1data['e'] = 1.25 output: 123456a 0.25b 0.50c 0.75d 1.00e 1.25dtype: float64 Examples of slices, masking, fancy indexing: 1234567891011# slicing by explicit indexdata['a':'c']# slicing by implicit integer indexdata[0:2]# maskingdata[(data &gt; 0.3)&amp;(data&lt;0.8)]# fancy indexingdata[['a', 'e']] output: 12345678910111213141516a 0.25b 0.50c 0.75dtype: float64a 0.25b 0.50dtype: float64b 0.50c 0.75dtype: float64a 0.25e 1.25dtype: float64 Notice that when slicing with an explicit index (i.e.,data[&#39;a&#39;: &#39;c&#39;]), the nal index is included in the slice, while when slicing with an implicit index (i.e., data[0 : 2]), the final index is excluded from the slice. 1.3.2 Indexers: loc, iloc, and ixThe slicing and indexing conventions can be a source ofconfusion in term of explicit and implicit form: 12345678data= pd.Series(['a', 'b', 'c'], index=[1, 3, 5])print(data)# index changed print(data[1])# cannot use slicingprint(data[1:3]) output: 123456781 a3 b5 cdtype: objecta3 b5 cdtype: object 1. loc the loc attribute allows indexing and slicing that always references the explicit index: 12print(data.loc[1])print(data.loc[1:3]) output: 1234a1 a3 bdtype: object 2. iloc The iloc attribute allows indexing and slicing that always references the implicit Python-style index: 12data.iloc[1]data.iloc[1:3] output: 1234&apos;b&apos;3 b5 cdtype: object 3. ix ix , is a hybrid of the two, and for Series objects is equivalent to standard [] - based indexing, the purpose of which will become more apparent in the context of Dataframe object. One guiding principle of Python code is that “explicit is better than implicit” 1.3.3 DataFrame Operation","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Programming","slug":"Computer-Science/Programming","permalink":"http://yoursite.com/categories/Computer-Science/Programming/"},{"name":"Python","slug":"Computer-Science/Programming/Python","permalink":"http://yoursite.com/categories/Computer-Science/Programming/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"},{"name":"NYU","slug":"NYU","permalink":"http://yoursite.com/tags/NYU/"},{"name":"Pandas","slug":"Pandas","permalink":"http://yoursite.com/tags/Pandas/"},{"name":"Bootcamp","slug":"Bootcamp","permalink":"http://yoursite.com/tags/Bootcamp/"}]},{"title":"Python Basics","slug":"Python Basics","date":"2019-03-16T04:00:00.000Z","updated":"2019-03-18T08:09:35.238Z","comments":true,"path":"2019/03/16/Python Basics/","link":"","permalink":"http://yoursite.com/2019/03/16/Python Basics/","excerpt":"","text":"This note contains basic knowledge of Python3 including basic syntax, arithmetic rules, comments, list, dictionary, strings, if statements, for statements, functions and debug operations and so on. List12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091# list# 使用[]中括号 can create an new listlist_var = [] # 这是一个空listprint(list_var), type(list_var)# list是具有顺序的一组对象，其中的元素不需要是同类型list_var = [1, '2', 3, 4.0, 5, 6, 'seven', [8], '九'] # list举例，其中包含了整数、小数、字符串、数组print(list_var)# =====list常见操作：索引，选取list中的某个元素list_var = [1, '2', 3, 4.0, 5, 6, 'seven', [8], '九'] # list举例print(list_var[0]) # 输出排在第1个位置的元素。位置的计数是从0开始的。print(list_var[3]) # 输出排在第4个位置的元素。print(list_var[8]) # 输出排在第9个位置的元素。也就是最后一个元素。print(list_var[-1]) # 输出最后一个元素的另外一种方式。print(list_var[-2]) # 输出最后第二个位置的元素。print(list_var[9]) # 超出长度会报错 IndexError: list index out of rangeprint(list_var[-10]) # 超出长度会报错 IndexError: list index out of rangelist_var[3] = 100 # 可以根据索引，直接修改list中对应位置的元素print(list_var)# =====list常见操作：切片，选取list中的一连串元素# list_var = [1, '2', 3, 4.0, 5, 6, 'seven', [8], '九'] # list举例# print list_var[3:8] # list[a:b]，从第a个位置开始，一直到第b个位置之前的那些元素# print list_var[:4] # list[:b]，从头开始，一直到第b个位置之前的那些元素# print list_var[3:] # list[a:]，从第a个位置开始，一直到最后一个元素# print list_var[1:7:3] # list[a:b:c]，每c个元素，选取其中的一个# =====list常见操作：两个list相加# list_var1 = [1, '2', 3, 4.0, 5]# list_var2 = [6, 'seven', [8], '九']# print(list_var1 + list_var2) # 两个list相加# =====list常见操作：判断一个元素是否在list当中list_var = [1, '2', 3, 4.0, 5]print(1 in list_var) # 判断1元素，是否在list_var中出现print(100 in list_var) # 判断100元素，是否在list_var中出现# =====list常见操作：len，max，minlist_var = [1, 2, 3, 4, 5]print(len(list_var)) # list中元素的个数，或者说是list的长度print(len([])) # 空list的长度是？print(max(list_var)) # 这个list中最大的元素，print(min(list_var)) # 最小的元素# =====list常见操作：删除其中的一个元素list_var = [1, 2, 3, 4, 5]del list_var[0] # 删除位置0的那个元素print(list_var)# =====list常见操作：如何查找一个元素的在list中的位置list_var = [3, 5, 1, 2, 4] # 如何才能知道1这个元素，在list中的位置是什么？print(list_var.index(4)) # 不知道的话，直接搜索# =====list常见操作：append,在后方增加一个元素list_var = [1, '2', 3, 4.0, 5]list_var.append(6)print(list_var)list_var.append(['seven', [8], '九'])print(list_var)# =====list常见操作：两个list合并list_var = [1, '2', 3, 4.0, 5]list_var.extend([6, 'seven', [8], '九'])print(list_var)# =====list常见操作：逆序、排序、list_var = [3, 5, 1, 2, 4]list_var.reverse()print(list_var)list_var = [3, 5, 1, 2, 4]list_var.sort()print(list_var)# =====list常见操作：range函数# python2和python3不同# range函数用于快速创建[0，1，2，3，4，5，6……]这样的listlist(range(5)) # range(a)，对于[0，1，2，3……]这个数组，取前a个元素list(range(1, 5)) # range(a, b)，对于[0，1，2，3……]这个数组，取从第a个位置的元素开始，到第b个位置元素之前的那个元素list(range(1, 10, 3)) # range(a, b, c), 每c个元素，选取其中的一个 dictionary1234567891011121314151617181920212223242526272829303132333435363738# =====dict介绍# 使用&#123;&#125;大括号就可以新建一个dict。dict_var = &#123;&#125; # 这是一个空dictprint(dict_var)type(dict_var)# 具有一系列成对的对象。一个叫做key，一个叫做value。其中的元素(包括key和value)不需要是同类型dict_var = &#123;'sh600000': '浦发银行', 'sz000002': '万科A', 300001: '特锐德'&#125; # 其中'sh600000'、'sz000002'、300001就是key，'浦发银行'、'万科A'、'特锐德'就是相对应的value。print(dict_var)# 字典是无顺序，key不可重复dict_var[0] # 因为没有顺序，所以dict_var[0]并不能取出第0个位置的元素，此处会报错。# =====dict常见操作：根据key的值，取相应的value的值dict_var['sh600000'] # 获取'sh600000'这个key对应的valueprint(dict_var['sh600000'])dict_var.get('sh600000')print(dict_var.get('sh600000')) # 效果同上# =====dict常见操作：增加、修改一对key：valuedict_var['sh000001'] = '上证指数'print(dict_var)dict_var['sh000001'] = '上证综合指数'print(dict_var['sh000001'])print(dict_var)# =====dict常见操作：判断一个key是不是在dict里面print('sh600000' in dict_var)# =====dict常见操作：输出一个dict中所有的key和valueprint(dict_var.keys()) # 输出所有的keyprint(dict_var.values()) # 输出所有的value string123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566# =====字符串转义print('what is wrong') # 如何输入what's wrongprint('what\\'s wrong\\t') # 使用\\对特殊字符进行转义。转义也可以用于表达不可见字符，例如tab符号：\\t。print('\\\\') # 如果要表达\\本身，也需要转义，写为\\。print(r'what\\'s wrong') # 在字符串的开始加r（Raw String），使得字符串中不发生转义。# =====unicode字符串print('中国') type('中国')print(u'中国')type(u'中国')'中国' == u'中国'# =====字符串常见操作：字符串相加，相乘stock_code1 = 'sh600000'stock_code2 = 'sh600001'print(stock_code1 + ', ' + stock_code2) # 字符串可以直接相加print(stock_code1 * 3) # 字符串可以乘以整数print('*' * 30)# =====字符串常见操作：startswith、endswith、stock_code = 'sh600000'print(stock_code.startswith('sh')) # 判断字符串是否是以'sh'开头print(stock_code.startswith('s'))print(stock_code.startswith('sz'))print(stock_code.endswith('0')) # 判断字符串是否是以'0'结尾print(stock_code.endswith('00'))print(stock_code.endswith('11'))# =====字符串常见操作：判断stock_code = 'sh600000'print('sh' in stock_code) # 判断字符串中是否包含'sh'print('sz' in stock_code)# =====字符串常见操作：替换stock_code = 'sh600000'stock_code.replace('sh', 'sz') # 将字符串中的'sh'替换成'sz'print('sh600000来自sh'.replace('sh', 'sz')) # 会替换所有的sh# =====字符串常见操作：splitstock_code = 'sh600000, sh600001, sh600002, sh600003'stock_code.split(', ')print(stock_code.split(', ')[0])print(stock_code.split('sh'))# 逆操作stock_code_list = ['sh600000', 'sh600001', 'sh600002', 'sh600003']print(', '.join(stock_code_list))# =====字符串常见操作：stripstock_code = ' sh600000 'print(stock_code)print(stock_code.strip()) # 去除两边的空格# =====字符串的切片：把字符串当做liststock_code = 'sh600000'print(stock_code[0])print(stock_code[:2])print(stock_code[2:])print(len(stock_code)) if statement1234567891011121314151617181920212223242526272829# 条件语句语法如下：\"\"\"if 条件A（结果为布尔值，true或者False）: 执行相关操作1（需要使用tab缩进） ......elif 条件B（结果为布尔值，true或者False）: 执行相关操作2 ......else: 执行相关操作3\"\"\"# 条件语句解释说明如下：\"\"\"1. 若条件A为True，那么执行相关操作1，程序结束2. 若条件A为False，那么判断条件B，若条件B为True，那么执行相关操作2，程序结束3. 若条件A为False，那么判断条件B，若条件B为False，那么执行相关操作3，程序结束\"\"\"# 条件语句示例：根据股票代码，判断股票来自于哪个市场stock_code = 'sh600000' # 尝试将stock_code改成'sz000002'，'aapl'看相关结果。if stock_code.startswith('sh'): print('上海股票')elif stock_code.startswith('sz'): print('深圳股票')else: print('不知道哪里来的股票') for statement1234567891011121314151617181920212223# =====for循环语句介绍# for循环是最常用的循环语句# 案例1：计算1+2+3+……+10sum_num = 0 # 用于存储计算的结果for i in list(range(10 + 1)): sum_num += i # 此处需要使用tab按键进行缩进 print(i, sum_num)# 案例2：批量判断股票来自于哪个市场stock_code_list = ['sh600000', 'sh600001', 'sz000001', 'aapl']for stock_code in stock_code_list: # 若stock_code是sh600000 if stock_code == 'sh600000': print(stock_code, '此股票为浦发银行，我已经知道它是来自上海的股票') continue # 跳过此次循环，不运行接下来的语句，直接进入下个循环 # break # 停止整个循环，跳出for语句 # 判断股票来自于哪个市场 if stock_code.startswith('sh'): print(stock_code, '上海股票') elif stock_code.startswith('sz'): print(stock_code, '深圳股票') else: print(stock_code, '不知道哪里来的股票') while statement12345678910111213141516171819202122232425262728293031323334# =====while语句# while语句语法如下：\"\"\"while 条件A: 执行相关操作1（需要使用tab缩进） ......\"\"\"# 条件语句解释说明如下：\"\"\"1. 判断条件A，若条件A为False，那么程序结束。2. 判断条件A，若条件A为True，那么执行相关操作1。3. 然后再次判断条件A，重复上面的步骤\"\"\"# while语句案例1：计算1+2+3+……+10num = 1max_num = 10sum_num = 0 # 存储计算结果while num &lt;= max_num: sum_num += num num += 1 print(sum_num)# while语句案例2：计算1+2+3+……+10num = 1max_num = 10sum_num = 0while True: sum_num += num num += 1 print(sum_num, num) if num == max_num+1: break function123456789101112131415# =====基本函数的定义def print_h(str_var='hello world'): # 以下是函数内容 # 函数的功能：将str_var变量打印出来 print(str_var)# 以def开头# print_h是函数名# str_var是参数，可以带上默认参数# 函数首行的最后需要带上冒号# =====调用函数print_h()print_h(str_var='你好，世界') try123456789101112131415161718192021222324252627282930import time # 导入系统库time，可以使用一些系统级别的函数def buy_one_stock(stock_name='sh600000'): # 参数为股票名 \"\"\" 此程序用于下单买入某个股票，但是买入过程中，程序有50%的概率报错。 \"\"\" import random random = random.random() if random &gt;= 0.5: return else: raise ValueError('程序报错！')# buy_one_stock()max_try_num = 5tyr_num = 0while True: try: # 尝试做以下事情 buy_one_stock() except: # 如果因为各种原因报错 print('警告！下单出错，停止1秒再尝试') tyr_num += 1 time.sleep(5) if tyr_num &gt; max_try_num: print('超过最大尝试次数，下单失败') # 此处需要执行相关程序，通知某些人 break else: # 如果没有报错 print('下单成功了') break","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Programming","slug":"Computer-Science/Programming","permalink":"http://yoursite.com/categories/Computer-Science/Programming/"},{"name":"Python","slug":"Computer-Science/Programming/Python","permalink":"http://yoursite.com/categories/Computer-Science/Programming/Python/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"Verbal Advantage Level 3","slug":"VA Level 3","date":"2019-03-15T04:00:00.000Z","updated":"2020-02-09T21:44:57.441Z","comments":true,"path":"2019/03/15/VA Level 3/","link":"","permalink":"http://yoursite.com/2019/03/15/VA Level 3/","excerpt":"","text":"1-10 (disc)defray pay, provide money for, cover the cost or expenses of compare: pay: pay for a meal / pay your bills defray: provide money for a portion of the cost or expense use an income tax refund to defray the expense of a trip to Europe use the donation to defray the cost of office equipment and supplies taciturn silent, not talkative, holding one’s tongue, reserved, uncommunicative, reticent antonyms: garrulous, loquacious, effusive, voluble compare: reticent: disinclination to express one’s feelings or supply information taciturn: person who is habitually silent and withdrawn (silent by nature) terse brief and to the point, free of superfluous words, expressed in a pointed and polished way synonyms: concise, pithy, succinct, and laconic antonyms: long-winded, redundant, verbose, prolix compare: concise: eliminating anything unnecessary or superfluous her presentation was persuasive and concise succinct: getting the point across in the fewest possible words an effective letter to the editor must be succinct terse: brief, pointed and polished a terse reply is brief and pointed boon a blessing, timely and welcome benefit, something beneficial bestowed upon one, something to be thankful for. tips: [archaic] favor, request His efforts were a boon to their enterprise proletariat The working class, especially the industrial wage-earning class, which earns its living by manual labor tips: proletarian [adj]: relating to the working class Karl Marx heterogeneous varied, composed of parts of different kinds, made up of unrelated or diverse elements, mixed, dissimilar, miscellaneous antonym: homogeneous pittance a small amount, portion, share, especially a small or meager amount of money her inheritance was only a pittance he received a pittance for his services some people will work for a pittance if the job is rewarding glib smooth-spoken, speaking in a ready, fluent manner, with natural or offhand ease, talkative in a nonchalant way synonyms: suave, facile, bland, voluble, flippant, and unctuous compare: unctuous: oily, fatty, having a greasy or soapy feel -&gt; slimy, slippery, or smarmy manner The unctuous person appears agreeable or earnest, but in an affected, self-serving and insincere way. glib: also has a slightly unpleasant aroma glib answers: thoughtless or ill-considered glib proposals or solutions: superficial glib salesperson or glib politician: persuasive but insincere penchant a liking, leaning, strong inclination, decided taste a penchant for sports, a penchant for poetry, a penchant for spicy food synonyms: propensity, proclivity compare: propensity: a profound, often irresistible inclination Successful businesspeople have a propensity for discerning the bottom line and making a profit. proclivity: a strong natural or habitual tendency, especially toward something objectionable or wicked Career criminals have a proclivity for violence. penchant Many people have a penchant for chocolate, a strong liking, decided taste. solicitous concerned, showing care and attention, especially in a worried, anxious, or fearful way be solicitous about the outcome of an event be solicitous of a child be solicitous for the welfare of another eager, full of desire, willing (with anxious concern) solicitous to gain the advantage solicitous to know the results of the election solicitous to go ahead with the plan 11-20 (end of disc5)circumscribe limit, restrict, confine, hem in, fix the boundaries of limited vocabulary can circumscribe your career and undermine your chances of success dearth lack, scarcity, insufficiency, inadequate supply of something needed synonym: paucity antonym: abundance, surplus, excess, superfluity, plethora ingratiating flattering, attempting to win approval or curry favor, trying to gain acceptance, done to charm or please another flash a fake, ingratiating smile mercenary greedy, done for payment only, motivated by a selfish desire for money or other reward synonym: covetous, avaricious extemporize improvise, speak or compose with little or no preparation or practice, perform improvise: improvise a speech, a tune on the piano, or a plan of action extemporize: spoken or composed with little or no preparation or practice erudite scholarlyausterelaconicameliorate make or become better or more tolerable, improve, amend, correct, reform, rectify, raise the condition or state ofexpunge Erase, delete, cancel, punch, strike, wipe, eradicate, obliterate 21-30circumspect careful, wary, watchful discreet, vigilant, prudentquiescent still, quiet, tranquil, inactive, at rest or repose vigorous, animated, sprightly, vivacious, ebullient dormant sea was quiescentfoible weak point, slight fault fervent Passionate, having or showing great warmth or intensity of feeling, fiery, earnest, impassioned fervent speech: passionate speech fervent debate: over protract draw out, drag out, extend in time, lengthen, prolong, especially to excess abbreviate, condense, curtail,and truncate prolong curtailostentatious showy, conspicuous, extravagant, flamboyant, specifically, displayed or done in a flashy, vain manner pretentious: asserts his self-importance in a demanding pompous: puffed up with exaggerated self-importance ostentatious: conspicuousness and vanityquandary state of uncertainty or confusion that renders one unable to act, perplexity or doubt predicament, dilemma and quandary difficult and perplexing dilemma: two choice quandary censure blame condemn, find fault with, criticize harshly, express stern disapproval of denounce, reprimand, reprehend censor: suppress or delete something objectionable censure: blame condemn, find fault withcavil criticize or complain unnecessarily, point out petty flaws raise trivial or frivolous objectionsassimilate to absorb, take in, incorporate, appropriate two sense absorb or take into the mind, comprehend, as to assimilate ideas American society is composed of generations of immigrants, some more assimilated than others Some comparison less fewer rescind cancel, take back, take away, remove; render void, annul rescind a contract, order, law rescind a statement discernible recognizable, detectable, perceptible, capable of being recognized by the senses apparent, evident, distinguishable, manifest obscure, invisible, in distinct, imperceptible discern perceive something hidden or obscure discern the truth, discern the cause of a disease discernment astuteness, acumen, perspicacity discerning having or showing discernment discerning palate discernible the faint light of dawn was barely discernible on the horizoncataclysm disaster, great mishap, catastrophe, violent upheaval, disaster catastrophe: especially for unforeseen calamity: on a personal level there is no greater calamity than the death of a child debacle: any debacle of communism debacle cataclysm cataclysmic: geological or social or politicalNarcissism self-love, excessive admiration of oneself vanity, conceit, egotism, amour-propre narcissisticincriminate charge with a crime, accuse of wrongdoing, implicate, present evidence or proof of involvement in a wrongful act incriminate someone: accuse that person of doing something illegal or unethical incriminating statement: a statement that makes one appear guilty of wrongdoingstigma a mark of shame of disgrace, a moral blemish, a stain on one’s character or reputation stigma of divorce stigmatize stigmas or stigmatabrevity shortness, briefness, brevity of life brief expression, shortness of speech conciseness, succinctness, tenseness, pithiness breve a smash curve, like a tiny smallperquisite a benefit, incidental gain or reward perk: a job with good perks benny benefit or privilege accompanying a position an expense accountindigent poor, needy, penniless, impoverished, down-and-out destitute, impecunious impecunious he is a lazy, impecunious wretch posing as a gentleman destitute indigent they built a new shelter for the homeless and the indigentclairvoyant having exceptional powers of perception, unusually clear-sighted or discerning having the power clairvoyance ordinary people experience occasional clairvoyant moments full of startling, exceptional insight clairvoyant a person who supposedly possesses the power to see into the future, a medium, soothsayer 41-50 (beginning of disc7)adroit skillful, clever, dexterous, showing skill in using one’s hands or using one’s brains, deft, resourceful, ingenious, artful, adept awkward, clumsy, inept, maladroit dexterous ambidextrous are equally skillful or dexterous with both hands ambisinister gauche: crooked, awkward, clumsy adroit: physical dexterity, mental ingenuity adroit maneuver in a wrestling match or in a game of chess exhibiting either physical or mental dexterity to elude anger or extricate oneself from a difficult situationplatitude flat, dull, ordinary remark, a trite statement or hackneyed saying, cliche, truism, bromide platitudinous: speech or expression that is dull, ordinary, commonplace, insipid, banalfastidious extremely delicate, sensitive, or particular in matters of taste or behavior hard to please, picky or demanding, exacting, critical to fault fastidious ear for music, fastidious in one’s choice of friends; a fastidious client a fastidious person scrupulous: having scruples or principles about doing correct all employees must follow company regulations scrupulously meticulous meticulous research wash hands meticulously before examining patients Albert dressed for the interview with meticulous care punctilious exact and excessive attention to punctilious, fine points or minute details with a stern and punctilious handvendetta a bitter, protracted feud or rivalry vindictive person, disposed to retaliate violent feud vendetta: any long bitter feud or rivalry mayor accused her opponent of waging a vendetta instead of a campaignlucid clear, easy to see or understand, plainly expressed a lucid explanation / question / account of the issues pellucid: exceptionally clear intelligible, comprehensible, limpid, perspicuous murky, obscure, befuddled, nebulous, ambiguous, abstruse: complicated salient conspicuous, noticeable prominent; sticking or jutting out protruding, manifest, obtrusive and protuberant inconspicuous, unassuming, unobtrusive a salient characteristic: most noticeable characteristic a salient wit is forceful and prominent categorical absolute, unqualified, explicit, without exceptions, conditions, or qualifications ambiguous, doubtful, dubious, indefinite, enigmatic and equivocal a categorical decision: universal to some but unfair and arbitrary to others inscrutable incomprehensible, unfathomable mysterious, impenetrable, esoteric, arcane, abstruse comprehensible, lucid and perspicuous scrutinize: investigate, examine don’t use “an inscrutable smile” construe interpret, explain the meaning or intention of put a particular construction on something, to interpret, explain its underlying meaning or intention silence is often construed as agreement I am not sure how to construe your question allude refer to something indirectly, make a casual reference suggest, hint, insinuate and intimate indicate, specify, detail and enumerate allude to a study that supports your point without citing it directly allusion: indirect, casual or passing reference only by allusion did the article suggest that the company was in financial trouble Don’t use a new word too soon, before you have studied it and tested it repeatedly in your mind.Don’t use a new word just for the sake of using it.Don’t lard your sentences with difficult words simply for the effect.Don’t use your vocabulary to impress people","categories":[{"name":"Languages","slug":"Languages","permalink":"http://yoursite.com/categories/Languages/"},{"name":"English","slug":"Languages/English","permalink":"http://yoursite.com/categories/Languages/English/"},{"name":"Verbal Advantage","slug":"Languages/English/Verbal-Advantage","permalink":"http://yoursite.com/categories/Languages/English/Verbal-Advantage/"}],"tags":[{"name":"English","slug":"English","permalink":"http://yoursite.com/tags/English/"},{"name":"Vocabularies","slug":"Vocabularies","permalink":"http://yoursite.com/tags/Vocabularies/"}]},{"title":"Data Structure Basics","slug":"Data Structure Basics","date":"2019-03-09T16:00:00.000Z","updated":"2019-03-21T13:55:33.110Z","comments":true,"path":"2019/03/09/Data Structure Basics/","link":"","permalink":"http://yoursite.com/2019/03/09/Data Structure Basics/","excerpt":"","text":"This note contains basic knowledge of data structure and algorithm, including big-O. Computing ModelComplexityComplexityNotationsBig-$\\Omega$Big-$\\theta$Big-OO(c)O($log^n$)O($n^c$)tractable O($2^n$)intractable example: 2-Subset Problem 2-Subset is NP-complete Algorithm AnalysisObjective Validity Complexity MethodIteration: summation of series Arithmetic Series T(n) = 1 + 2 + ... + n = \\frac{n(n+1)}{2} = O(n^2) Power of natural number Series \\sum_{k=0}^{n}k^d \\approx \\int_{0}^{n}x^{d+1}dx=\\frac{1}{d+1}x^{d+1}\\bigg|_{0}^{n}=\\frac{n^{d+1}}{d+1}=O(n^{d+1}) \\begin{align*} T_2(n) &= 1^2+2^2+..+n^2=\\frac{n(n+1)(2n+1)}{6}=O(n^3) \\\\ T_3(n) &= 1^3+2^3+..+n^3=\\frac{n^2(n+1)^2}{4}=O(n^4) \\\\ T_4(n) &= 1^4+2^4+..+n^4=\\frac{n(n+1)(2n+1)(3n^2+3n-1)}{30}=O(n^5) \\\\ \\end{align*} Geometric series T_p(n)=p^0+p^1+...p^n=\\frac{p^{n+1}-1}{p-1}=O(a^n) 1 + 2 + 4 + ... + 2^n = 2^{n+1}-1=O(2^{n+1})=O(2^n) Convergent series 1+\\frac{1}{2^2}+...+\\frac{1}{n^2}","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Data Structure & Algorithm","slug":"Computer-Science/Data-Structure-Algorithm","permalink":"http://yoursite.com/categories/Computer-Science/Data-Structure-Algorithm/"},{"name":"Data Structure","slug":"Computer-Science/Data-Structure-Algorithm/Data-Structure","permalink":"http://yoursite.com/categories/Computer-Science/Data-Structure-Algorithm/Data-Structure/"}],"tags":[{"name":"MOOC","slug":"MOOC","permalink":"http://yoursite.com/tags/MOOC/"},{"name":"Data Structure","slug":"Data-Structure","permalink":"http://yoursite.com/tags/Data-Structure/"}]},{"title":"Pragmatic Program Savings Account","slug":"C++ Pragmatic Program-SavingsAccount","date":"2019-02-27T16:00:00.000Z","updated":"2019-02-28T13:06:05.955Z","comments":true,"path":"2019/02/27/C++ Pragmatic Program-SavingsAccount/","link":"","permalink":"http://yoursite.com/2019/02/27/C++ Pragmatic Program-SavingsAccount/","excerpt":"","text":"This note contains a simple codes of a savings account in C++. Codes Version 1 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;iosteam&gt;#include &lt;cmath&gt;using namespace std;class SavingsAccount&#123;private: int id; double balance; double rate; int lastDate; double accumulation; void record(int date, double amount); double accumulate(int date)const&#123; return accumulation + balance * (date - lastDate); &#125;public: SavingsAccount(int date, int id, double rate); int getId()&#123;return id;&#125; double getBalance()&#123;return balance;&#125; double getRate()&#123;return rate;&#125; void deposit(int date, double amount); void withdraw(int date, double amount); void settle(int date); void show();&#125;SavingsAccount::SavingsAccount(int date, int id, double rate):id(id),balance(0),rate(rate),lastDate(date),accumulation(0)&#123; cout &lt;&lt; date &lt;&lt; \"\\t#\" &lt;&lt; id &lt;&lt; \"is created\" &lt;&lt; endl;&#125;void SavingsAccount::record(int date, double amount)&#123; accumulation = accumulate(date); lastDate = date; amount = floor(amount * 100 + 0.5) / 100; balance += amount; cout &lt;&lt; date\"\\t#\"&lt;&lt;id&lt;&lt;\"\\t\"&lt;&lt;amount&lt;&lt;\"\\t\"&lt;&lt;balance&lt;&lt;\"\\t\"&lt;&lt;desc&lt;&lt;endl;&#125;void SavingsAcount::settle(int date)&#123; double interest = accumulate(date) * rate / 365; if (interest != 0) record(date, interest); accumulation = 0;&#125;void SavingsAccount::show()&#123; cout &lt;&lt; '#' &lt;&lt; id &lt;&lt;\"\\tBalance:\" &lt;&lt; balance&#125;int main()&#123; SavingsAccount sa0(1,21325302,0.015); SavingsAccount sa1(1,58320212,0.015); sa0.deposit(5,5000); sa1.deposit(25,10000); sa0.deposit(45,5500); sa1.withdaw(60,4000); sa0.settle(90); sa1.settle(90); sa0.show(); cout&lt;&lt;endl; sa1.show(); cout&lt;&lt;endl; return 0;&#125;","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Programming","slug":"Computer-Science/Programming","permalink":"http://yoursite.com/categories/Computer-Science/Programming/"},{"name":"C++","slug":"Computer-Science/Programming/C","permalink":"http://yoursite.com/categories/Computer-Science/Programming/C/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"},{"name":"MOOC","slug":"MOOC","permalink":"http://yoursite.com/tags/MOOC/"}]},{"title":"C++ Array, Pointer & String","slug":"C++ Array, Pointer & String","date":"2019-02-26T16:00:00.000Z","updated":"2019-03-02T15:26:33.401Z","comments":true,"path":"2019/02/26/C++ Array, Pointer & String/","link":"","permalink":"http://yoursite.com/2019/02/26/C++ Array, Pointer & String/","excerpt":"","text":"This note contains the basic rules of array, pointer and string in C++. ArrayDefinitionType Identifier Name [Expression1] [Expression2]… 12int a[10]// a is an integer array with 10 elements. 12int a[5][3]// a is an 2-dimension integer array with 5 rows and 3 columns and 15 elements. tips The array must be declared first, then be used. refer the elements one by one, not the whole array. 12a[0]=a[5]+a[7]-a[2*3]b[1][2]=a[2][3]/2 example 1234567891011121314#include &lt;iostream&gt;using namespace std;int main() &#123; int a[10], b[10]; for(int i = 0; i &lt; 10; i++) &#123; a[i] = i * 2 - 1; b[10 - i - 1] = a[i]; &#125; for(int i = 0; i &lt; 10; i++) &#123; cout &lt;&lt; \"a[\" &lt;&lt; i &lt;&lt; \"] = \" &lt;&lt; a[i] &lt;&lt; \" \"; cout &lt;&lt; \"b[\" &lt;&lt; I &lt;&lt; \"] = \" &lt;&lt; b[i] &lt;&lt; endl; &#125; return 0;&#125; Initialization One dimension 123456// 1. list all the initial value of elementsstatic int a[10]=&#123;0,1,2,3,4,5,6,7,8,9&#125;// 2. initialize part of elementsstatic int a[10]=&#123;0,1,2,3,4&#125;// 3. don't set the length when initializingstatic int a[]=&#123;0,1,2,3,4,5,6,7,8,9&#125; two dimension 123456789// 1. list all the initial value in braces by orderstatic int a[3][4]=&#123;1,2,3,4,5,6,7,8,9,10,11,12&#125;// 2. list the initial value by different rowsstatic int a[3][4]=&#123;&#123;1,2,3,4&#125;,&#123;5,6,7,8&#125;,&#123;9,10,11,12&#125;&#125;// 3. initialize part of elementsstatic int a[3][4]=&#123;&#123;1&#125;,&#123;0,6&#125;,&#123;0,0,11&#125;&#125;// 4. list all the initial values, the first index can be ignoredstatic int a[][4]=&#123;1,2,3,4,5,6,7,8,9,10,11,12&#125;static int a[][4]=&#123;&#123;1,2,3,4&#125;,&#123;5,6,7,8&#125;,&#123;9,10,11,12&#125;&#125; Find the first 20 items in Fibonacci sequence 12345678910111213#include &lt;iostream&gt;using namespace std;int main() &#123; int f[20] = &#123;1,1&#125;; //initialize the 0th and the first number for (int i = 2; i &lt; 20; i++) f[i] = f[i - 2] + f[i - 1]; for (int i=0;i&lt;20;i++) &#123; //output 5 number on each row if (i % 5 == 0) cout &lt;&lt; endl; cout.width(12); //set output width in 12 cout &lt;&lt; f[i]; &#125;return 0;&#125; Input the answers of multiple choices in a loop, compute and output the correct rate of each answer till input the ctrl+z. The answers will be input in a row as “a”, “b”, “c”, “d”. 12345678910111213141516171819202122#include &lt;iostream&gt;using namespace std;int main() &#123; const char key[ ] = &#123;'a','c','b','a','d'&#125;; const int NUM_QUES = 5; char c; int ques = 0, numCorrect = 0; cout &lt;&lt; \"Enter the \" &lt;&lt; NUM_QUES &lt;&lt; \" question tests:\" &lt;&lt; endl; while(cin.get(c)) &#123; if(c != '\\n') &#123; if(c == key[ques]) &#123; numCorrect++; cout &lt;&lt; \" \"; &#125; else cout&lt;&lt;\"*\"; ques++; &#125; else &#123; cout &lt;&lt; \" Score \" &lt;&lt; static_cast&lt;float&gt;(numCorrect)/NUM_QUES*100 &lt;&lt; \"%\"; ques = 0; numCorrect = 0; cout &lt;&lt; endl; &#125; &#125; return 0;&#125; Array as argumenttips when elements in an array are parameters, they are just like variables. The name of array should be arguments and parameters. Type should be the same. Compute the sum of every row of an array. 123456789101112131415161718192021#include &lt;iostream&gt;using namespace std;void rowSum(int a[][4], int nRow) &#123; for (int i = 0; i &lt; nRow; i++) &#123; for(int j = 1; j &lt; 4; j++) a[i][0] += a[i][j]; &#125;&#125;int main() &#123; int table[3][4] = &#123;&#123;1, 2, 3, 4&#125;, &#123;2, 3, 4, 5&#125;, &#123;3, 4, 5, 6&#125;&#125;; for (int i = 0; i &lt; 3; i++) &#123; for (int j = 0; j &lt; 4; j++) cout &lt;&lt; table[i][j] &lt;&lt; \" \"; cout &lt;&lt; endl; &#125; rowSum(table, 3); //compute the sum of every row //output the result for (int i = 0; i &lt; 3; i++) cout &lt;&lt; \"Sum of row \" &lt;&lt; i &lt;&lt; \" is \" &lt;&lt; table[i][0] &lt;&lt; endl; return 0;&#125; Object Array definition Class Name Array Name[number of elements] syntax Array Name[index].member Name initialization 1Point a[2]=&#123;Point(1,2),Point(3,4)&#125; example 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748//Point.h#ifndef _POINT_H#define _POINT_Hclass Point &#123;public: Point(); Point(int x, int y); ~Point(); void move(int newX,int newY); int getX() const &#123; return x; &#125; int getY() const &#123; return y; &#125; static void showCount();private: int x, y;&#125;;#endif //_POINT_H//Point.cpp#include &lt;iostream&gt;#include \"Point.h\"using namespace std;Point::Point() : x(0), y(0) &#123; cout &lt;&lt; \"Default Constructor called.\" &lt;&lt; endl;&#125;Point::Point(int x, int y) : x(x), y(y) &#123; cout &lt;&lt; \"Constructor called.\" &lt;&lt; endl;&#125;Point::~Point() &#123; cout &lt;&lt; \"Destructor called.\" &lt;&lt; endl;&#125;void Point::move(int newX,int newY) &#123; cout &lt;&lt; \"Moving the point to (\" &lt;&lt; newX &lt;&lt; \", \" &lt;&lt; newY &lt;&lt; \")\" &lt;&lt; endl; x = newX; y = newY;&#125;//main.cpp#include \"Point.h\"#include &lt;iostream&gt;using namespace std;int main() &#123; cout &lt;&lt; \"Entering main...\" &lt;&lt; endl; Point a[2]; for(int i = 0; i &lt; 2; i++) a[i].move(i + 10, i + 20); cout &lt;&lt; \"Exiting main...\" &lt;&lt; endl; return 0;&#125; for loop based on range traversal all the elements in an array 123456789int main()&#123; int array[3] = &#123;1,2,3&#125;; int *p; for(p = array; p &lt; array + sizeof(array) / sizeof(int); ++p)&#123; *p += 2; std::cout &lt;&lt; *p &lt;&lt; std::endl; &#125; return 0;&#125; 12345678int main()&#123; int array[3] = &#123;1,2,3&#125;; for(int &amp; e : array)&#123; e += 2; std::cout&lt;&lt;e&lt;&lt;std::endl; &#125; return 0;&#125; PointerDefinition pointer operator *Pointer Name 123static int i;static int* ptr = &amp;i*ptr = 3 address operator &amp;Variable Name Initializationsyntax Storage Type Type Identifier *Pointer Name = initial address 1int *pa = &amp;a tips: The variable should be declared before assigned to a pointer. A non-static variable can be assigned to a static pointer. Assignmentsyntax Pointer Name = address value tips: The address value must be a address constant or address variable rather than an integer. 0 can be assigned to a pointer, which means a null pointer. Now nullptr can be used as a null pointer void pointer can be assigned to the address of any type object. example of pointer 12345678910#include &lt;iostream&gt;using namespace std;int main() &#123; int i; int *ptr = &amp;i; //assign the address of i to ptr i = 10; cout &lt;&lt; \"i = \" &lt;&lt; i &lt;&lt; endl; //output the value of the int variable cout &lt;&lt; \"*ptr = \" &lt;&lt; *ptr &lt;&lt; endl; //output the content that the int pointer is assigned toreturn 0;&#125; the output result is: 12i = 10*ptr = 10 example of a void pointer 1234567891011#include &lt;iostream&gt;using namespace std;int main() &#123; //!void voidObject; //wrong: there is no void variable void *pv; //right: the void type pointer int i = 5; pv = &amp;i; //void pointer is assigned to the int variable int *pint = static_cast&lt;int *&gt;(pv); //void pointer is transformed to an int pointer cout &lt;&lt; \"*pint = \" &lt;&lt; *pint &lt;&lt; endl;return 0;&#125; pointer assigned to an constant and const pointer the assigned object cannot be changed by a pointer assigned to an constant. 12345int a;const int *p1 = &amp;a; //p1 is a pointer assigned to an constantint b;p1 = &amp;b; //right，the assigned value of p1 can be changed *p1 = 1; //wrong，the object value cannot be changed by p1 the assigned value of an const pointer cannot be changed 123int a;int * const p2 = &amp;a;p2 = &amp;b; //wrong，p2 is a const pointer which cannot be changed OperationArithmetic Operation addition and subtraction: +n or -n meaning the pointer assign to the initial address of the n-th data object. ++ or — the initial address of the last or the next data object 12short a[4]short *pa=a Relationship Operationtips: the same type of pointers can be operated with relationship 12p==0p!=0 Access Array with Pointer12int a[10], *pa;pa = &amp;a[0]; //or: pa = a tips: There are similar expression: *pa is a[0], *(pa+1) is a[1], *(pa+i) is a[i], a[i],*(pa+i),*(a+i) and pa[i]are the same effect. a++ is wrong, because a is the initial address of the array, a constant. example: access array with index 123456789#include &lt;iostream&gt;using namespace std;int main()&#123; int a[10] = &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 &#125;; for (int i = 0; i &lt; 10; i++) cout &lt;&lt; a[i] &lt;&lt; \" \"; cout &lt;&lt; endl; return 0;&#125; access array with pointer 123456789#include &lt;iostream&gt;using namespace std;int main() &#123; int a[10] = &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 &#125;; for (int i = 0; i &lt; 10; i++) cout &lt;&lt; *(a+i) &lt;&lt; \" \"; cout &lt;&lt; endl; return 0;&#125; access array with pointer variable 123456789#include &lt;iostream&gt;using namespace std;int main() &#123; int a[10] = &#123; 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 &#125;; for (int *p = a; p &lt; (a + 10); p++) cout &lt;&lt; *p &lt;&lt; \" \"; cout &lt;&lt; endl; return 0;&#125; Array with pointer elementsDefinition： ​ Point *pa[2] is made up of pa[0] and pa[1]. 12345678910111213141516#include &lt;iostream&gt; using namespace std;int main() &#123; int line1[] = &#123; 1, 0, 0 &#125;; //The first row int line2[] = &#123; 0, 1, 0 &#125;; //The second row int line3[] = &#123; 0, 0, 1 &#125;; //The third row //define an int array with pointer elements and initialize it int *pLine[3] = &#123; line1, line2, line3 &#125;; cout &lt;&lt; \"Matrix test:\" &lt;&lt; endl; for (int i = 0; i &lt; 3; i++) &#123; for (int j = 0; j &lt; 3; j++) cout &lt;&lt; pLine[i][j] &lt;&lt; \" \"; cout &lt;&lt; endl; &#125; return 0;&#125; The output result is: 1234Matrix test:1,0,00,1,00,0,1 Function with pointer arguments and parameters example: split a number into integer and fraction. 1234567891011121314151617#include &lt;iostream&gt;using namespace std;void splitFloat(float x, int *intPart, float *fracPart) &#123; *intPart = static_cast&lt;int&gt;(x); *fracPart = x - *intPart;&#125;int main() &#123; cout &lt;&lt; \"Enter 3 float point numbers:\" &lt;&lt; endl; for(int i = 0; i &lt; 3; i++) &#123; float x, f; int n; cin &gt;&gt; x; splitFloat(x, &amp;n, &amp;f); //address is the parameter. cout &lt;&lt; \"Integer Part = \" &lt;&lt; n &lt;&lt; \" Fraction Part = \" &lt;&lt; f &lt;&lt; endl; &#125; return 0;&#125; example: a pointer assigned to const is argument 1234567891011121314151617#include &lt;iostream&gt;using namespace std;const int N = 6;void print(const int *p, int n);int main() &#123; int array[N]; for (int i = 0; i &lt; N; i++) cin&gt;&gt;array[i]; print(array, N); return 0;&#125;void print(const int *p, int n) &#123; cout &lt;&lt; \"&#123; \" &lt;&lt; *p; for (int i = 1; i &lt; n; i++) cout &lt;&lt; \", \" &lt;&lt; *(p+i); cout &lt;&lt; \" &#125;\" &lt;&lt; endl;&#125; Function with a pointer return valuesyntax: Type Identifier *Function Name(){ ​ //expression } tips: a non-static local address cannot be a return value. example1: 123456789101112131415#include &lt;iostream&gt;using namespace std;int main()&#123; int array[10]; int* search(int* a, int num); for(int i=0; i&lt;10; i++) cin&gt;&gt;array[i]; int* zeroptr= search(array, 10); //assign the address of array in main function to the sub-function return 0;&#125;int* search(int* a, int num)&#123; //pointer a assign to the array defined in the main function for(int i=0; i&lt;num; i++) if(a[i]==0) return &amp;a[i];&#125; example2: 12345678910111213#include &lt;iostream&gt;using namespace std;int main()&#123; int* newintvar(); int* intptr= newintvar(); *intptr=5; //a valid address delete intptr; //if not delete, the memory will leak return 0;&#125;int* newintvar ()&#123; int* p=new int(); return p; //the returned address is assigned to the dynamic allocated space&#125; Pointer assigned to the FunctionDefinition: Type Identifier (*Function Pointer Name)(); define a function which can achieve any kind of arithmetic operation 1234567891011121314151617181920212223242526#include &lt;iostream&gt;using namespace std;int compute(int a, int b, int(*func)(int, int))&#123; return func(a, b);&#125;int max(int a, int b)&#123; return((a &gt; b)?a: b);&#125;int min(int a, int b)&#123; return((a &lt; b)?a: b);&#125;int sum(int a, int b)&#123; return a + b;&#125;int main()&#123; int a, b, res; cout &lt;&lt; \"inout intager a: \"; cin &gt;&gt; a; cout &lt;&lt; \"inout intager b: \"; cin &gt;&gt; b; res = compute(a, b, &amp; max); cout &lt;&lt; \"Max of \" &lt;&lt; a &lt;&lt; \" and \" &lt;&lt; b &lt;&lt; \" is \" &lt;&lt; res &lt;&lt; endl; res = compute(a, b, &amp; min); cout &lt;&lt; \"Min of \" &lt;&lt; a &lt;&lt; \" and \" &lt;&lt; b &lt;&lt; \" is \" &lt;&lt; res &lt;&lt; endl; res = compute(a, b, &amp; sum); cout &lt;&lt; \"Sum of \" &lt;&lt; a &lt;&lt; \" and \" &lt;&lt; b &lt;&lt; \" is \" &lt;&lt; res &lt;&lt; endl;&#125; Object Pointersyntax: definition: Class Name *Object Pointer Name 123Point a(5, 10);Point *ptr;ptr = &amp;a; access object member by pointer Object Pointer Name-&gt; object member name ptr-&gt;getx() equals (*ptr).getx(); example: 123456789101112131415161718#include &lt;iostream&gt;using namespace std;class Point &#123;public: Point(int x = 0, int y = 0) : x(x), y(y) &#123; &#125; int getX() const &#123; return x; &#125; int getY() const &#123; return y; &#125;private: int x, y;&#125;;int main() &#123; Point a(4, 5); Point *p1 = &amp;a; //define object pointer and initialize with address of a cout &lt;&lt; p1-&gt;getX() &lt;&lt; endl; cout &lt;&lt; a.getX() &lt;&lt; endl; return 0;&#125; This Pointerreturn x equals toreturn this -&gt; x 1234567class Fred; class Barney &#123; Fred *x;&#125;;class Fred &#123; Barney y;&#125;; Dynamic Memory AllocationDefinitionsyntax: new Type Identifier(initial arguments list) delete Pointer Name example: 123456789101112131415161718192021222324252627282930#include &lt;iostream&gt;using namespace std;class Point &#123;public: Point() : x(0), y(0) &#123; cout&lt;&lt;\"Default Constructor called.\"&lt;&lt;endl; &#125; Point(int x, int y) : x(x), y(y) &#123; cout&lt;&lt; \"Constructor called.\"&lt;&lt;endl; &#125; ~Point() &#123; cout&lt;&lt;\"Destructor called.\"&lt;&lt;endl; &#125; int getX() const &#123; return x; &#125; int getY() const &#123; return y; &#125; void move(int newX, int newY) &#123; x = newX; y = newY; &#125;private: int x, y;&#125;;int main()&#123; cout &lt;&lt; \"step one: \" &lt;&lt; endl; Point *ptr1 = new Point; //default constructor function delete ptr1; //destructor function cout &lt;&lt; \"Step two: \" &lt;&lt; endl; ptr1 = new Point(1,2); delete ptr1; return 0;&#125; The result: 123456Step One:Default Constructor called.Destructor called.Step Two:Constructor called.Destructor called. Dynamic Arraysyntax: one dimension new Type identifier [length of the array] delete[] Array Name example: 123456789101112131415161718192021222324252627282930#include &lt;iostream&gt;using namespace std;class Point &#123;public: Point() : x(0), y(0) &#123; cout&lt;&lt;\"Default Constructor called.\"&lt;&lt;endl; &#125; Point(int x, int y) : x(x), y(y) &#123; cout&lt;&lt; \"Constructor called.\"&lt;&lt;endl; &#125; ~Point() &#123; cout&lt;&lt;\"Destructor called.\"&lt;&lt;endl; &#125; int getX() const &#123; return x; &#125; int getY() const &#123; return y; &#125; void move(int newX, int newY) &#123; x = newX; y = newY;&#125;private: int x, y;&#125;;int main() &#123; Point *ptr = new Point[2]; //create ptr[0].move(5, 10); ptr[1].move(15, 20); cout &lt;&lt; \"Deleting...\" &lt;&lt; endl; delete[] ptr; return 0;&#125; The result is: 12345Default Constructor called.Default Constructor called.Deleting...Destructor called.Destructor called. multiple dimension new Type identifier [length of the dimension1] [length of the dimension2] example: 12345678910111213141516171819#include &lt;iostream&gt;using namespace std;int main() &#123; int (*cp)[9][8] = new int[7][9][8]; for (int i = 0; i &lt; 7; i++) for (int j = 0; j &lt; 9; j++) for (int k = 0; k &lt; 8; k++) *(*(*(cp + i) + j) + k) =（i * 100 + j * 10 + k); for (int i = 0; i &lt; 7; i++) &#123; for (int j = 0; j &lt; 9; j++) &#123; for (int k = 0; k &lt; 8; k++) cout &lt;&lt; cp[i][j][k] &lt;&lt; \" \"; cout &lt;&lt; endl; &#125; cout &lt;&lt; endl; &#125; delete[] cp; return 0;&#125; example2: encapsulate dynamic array class 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;iostream&gt;#include &lt;cassert&gt;using namespace std;class Point &#123;public: Point() : x(0), y(0) &#123; cout&lt;&lt;\"Default Constructor called.\"&lt;&lt;endl; &#125; Point(int x, int y) : x(x), y(y) &#123; cout&lt;&lt; \"Constructor called.\"&lt;&lt;endl; &#125; ~Point() &#123; cout&lt;&lt;\"Destructor called.\"&lt;&lt;endl; &#125; int getX() const &#123; return x; &#125; int getY() const &#123; return y; &#125; void move(int newX, int newY) &#123; x = newX; y = newY; &#125;private: int x, y;&#125;;class ArrayOfPoints &#123;public: ArrayOfPoints(int size) : size(size) &#123; points = new Point[size]; &#125; ~ArrayOfPoints() &#123; cout &lt;&lt; \"Deleting...\" &lt;&lt; endl; delete[] points; &#125; Point&amp; element(int index) &#123; assert(index &gt;= 0 &amp;&amp; index &lt; size); return points[index]; &#125;private: Point *points; //dynamic array initial address int size; //size of array&#125;;int main() &#123; int count; cout &lt;&lt; \"Please enter the count of points: \"; cin &gt;&gt; count; ArrayOfPoints points(count); points.element(0).move(5, 0); points.element(1).move(15, 20); return 0;&#125; The result is: 123456Please enter the number of points:2Default Constructor called.Default Constructor called.Deleting...Destructor called.Destructor called. Smart Pointerunique_ptr shared_ptr weak_ptr Vectorsyntax: definition vector\\&lt;Element Type> Array Name(array length); 1vector&lt;int&gt; arr(5) access vector Array name [ index ] vector Array name.size() example: Calculate the average of elements in the array. 123456789101112131415161718192021#include &lt;iostream&gt;#include &lt;vector&gt;using namespace std;double average(const vector&lt;double&gt; &amp;arr)&#123; double sum = 0; for (unsigned i = 0; i&lt;arr.size(); i++) sum += arr[i]; return sum / arr.size();&#125;int main() &#123; unsigned n; cout &lt;&lt; \"n = \"; cin &gt;&gt; n; vector&lt;double&gt; arr(n); //create array object cout &lt;&lt; \"Please input \" &lt;&lt; n &lt;&lt; \" real numbers:\" &lt;&lt; endl; for (unsigned i = 0; i &lt; n; i++) cin &gt;&gt; arr[i]; cout &lt;&lt; \"Average = \" &lt;&lt; average(arr) &lt;&lt; endl; return 0;&#125; example2: auto pointer 123456789#include &lt;vector&gt;#include &lt;iostream&gt;int main()&#123; std::vector&lt;int&gt; v = &#123;1,2,3&#125;; for(auto i = v.begin(); i != v.end(); ++i) std::cout &lt;&lt; *i &lt;&lt; std::endl; for(auto e : v) std::cout &lt;&lt; e &lt;&lt; std::endl;&#125; Object ReplicationShallow CopyDeep CopyMove Assignmentsyntax: class_name ( class_name &amp;&amp; ) example: version 1 123456789101112131415161718192021222324252627#include&lt;iostream&gt;using namespace std;class IntNum&#123;public: IntNum(int x = 0) : xptr(new int(x))&#123; //constructor cout &lt;&lt; \"Calling constructor...\" &lt;&lt; endl; &#125; IntNum(const IntNum &amp; n) : xptr(new int(*n.xptr))&#123;//copy constructor cout &lt;&lt; \"Calling copy constructor...\" &lt;&lt; endl; &#125;; ~IntNum()&#123; //destructor delete xptr; cout &lt;&lt; \"Destructing...\" &lt;&lt; endl; &#125; int getInt() &#123; return *xptr; &#125;private: int *xptr;&#125;;//return IntNum class objectIntNum getNum()&#123; IntNum a; return a;&#125;int main() &#123; cout&lt;&lt;getNum().getInt()&lt;&lt;endl; return 0;&#125; version 2: 12345678910111213141516171819202122232425262728293031#include&lt;iostream&gt;using namespace std;class IntNum &#123;public: IntNum(int x = 0) : xptr(new int(x))&#123; //constructor cout &lt;&lt; \"Calling constructor...\" &lt;&lt; endl; &#125; IntNum(const IntNum &amp; n) : xptr(new int(*n.xptr))&#123; // copy constructor cout &lt;&lt; \"Calling copy constructor...\" &lt;&lt; endl; IntNum(IntNum &amp;&amp; n): xptr( n.xptr)&#123; //move constructor n.xptr = nullptr; cout &lt;&lt; \"Calling move constructor...\" &lt;&lt; endl;&#125;~IntNum()&#123; //destructor delete xptr; cout &lt;&lt; \"Destructing...\" &lt;&lt; endl;&#125;private: int *xptr;&#125;;//return IntNum classIntNum getNum() &#123; IntNum a; return a;&#125;int main()&#123; cout &lt;&lt; getNum().getInt() &lt;&lt; endl; return 0;&#125; StringString of C typesyntax: string constant const char *string name=”string content“ 1const char *STRING1 = \"program\" string array char string name = {,..,’\\0’} 123char str[8] = &#123; 'p', 'r', 'o', 'g', 'r', 'a', 'm', '\\0' &#125;;char str[8] = \"program\";char str[] = \"program\"; String Classsyntax: constructor string() string(const char *s) string(const string&amp; rhs) operator s+t s=t s==t, s!=t, s&lt;=t, s&gt;=t, s&lt;t, s&gt;t s[i] 1234string s1 = \"abc\", s2 = \"def\";string s3 = s1 + s2; //\"abcdef\"bool s4 = (s1 &lt; s2); //truechar s5 = s2[1]; //'e' example: 1234567891011121314151617181920212223#include &lt;string&gt;#include &lt;iostream&gt;using namespace std;//output true or false based on the value//title is notificationinline void test(const char *title, bool value)&#123; cout &lt;&lt; title &lt;&lt; \" returns \" &lt;&lt; (value ? \"true\" : \"false\") &lt;&lt; endl;&#125;int main() &#123; string s1 = \"DEF\"; cout &lt;&lt; \"s1 is \" &lt;&lt; s1 &lt;&lt; endl; string s2; cout &lt;&lt; \"Please enter s2: \"; cin &gt;&gt; s2; cout &lt;&lt; \"length of s2: \" &lt;&lt; s2.length() &lt;&lt; endl; test(\"s1 &lt;= \\\"ABC\\\"\", s1 &lt;= \"ABC\"); test(\"\\\"DEF\\\" &lt;= s1\", \"DEF\" &lt;= s1); s2 += s1; cout &lt;&lt; \"s2 = s2 + s1: \" &lt;&lt; s2 &lt;&lt; endl; cout &lt;&lt; \"length of s2: \" &lt;&lt; s2.length() &lt;&lt; endl; return 0;&#125; getlinegetline(cin, string name) getline(cin, string name, ‘,’) example: 123456789101112include &lt;iostream&gt;#include &lt;string&gt;using namespace std;int main() &#123; for (int i = 0; i &lt; 2; i++)&#123; string city, state; getline(cin, city, ','); getline(cin, state); cout &lt;&lt; \"City:\" &lt;&lt; city &lt;&lt; “ State:\" &lt;&lt; state &lt;&lt; endl; &#125; return 0;&#125;","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Programming","slug":"Computer-Science/Programming","permalink":"http://yoursite.com/categories/Computer-Science/Programming/"},{"name":"C++","slug":"Computer-Science/Programming/C","permalink":"http://yoursite.com/categories/Computer-Science/Programming/C/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"},{"name":"MOOC","slug":"MOOC","permalink":"http://yoursite.com/tags/MOOC/"}]},{"title":"Useful Distributions","slug":"Useful Distributions","date":"2019-02-15T05:00:00.000Z","updated":"2019-09-05T20:35:15.181Z","comments":true,"path":"2019/02/15/Useful Distributions/","link":"","permalink":"http://yoursite.com/2019/02/15/Useful Distributions/","excerpt":"","text":"Useful DistributionsDiscreteHere are some useful distributions of discrete random variables which have distinct expected values and variances. A discrete uniform random variable represents the occurrence of a value between number a and b when all values in the set ${a; a + 1; a + 2; …; b}$ have equal probability. Uniform DistributionBernoulli DistributionBinomial DistributionA binomial random variable represents the number of successes in a sequences of $n$ experiments when each trial is independently a success with probability $p$. Poisson DistributionA Poisson random variable represents the number of events occurring in a fixed period of time with expected number of occurrences $\\lambda t$ when events occur with a known average rate $\\lambda$ (per unit time) and are independent since the last event. memorylessness Shortfall distribution: P(\\tau > t+s | \\tau > s) = \\frac{e^{-\\lambda(t+s)}}{e^{-\\lambda s}} = e^{-\\lambda t} Geometric DistributionA geometric random variable represents the trial number ($n$) to get the rst success when each trial is independently a success with probability $p$. Negative binomial distributionA negative binomial random variable represents the trial number to get the $r^{th}$ success when each trial is independently a success with probability $p$. Pascal DistributionHypergeometric DistributionContinuousHere are some useful distributions of discrete random variables which have distinct expected values and variances. Uniform DistributionA continuous uniform random variable describes a random variable uniformly distributed over the interval $[a, b]$. Gauss Distribution (Normal Distribution)Due to the central limit theorem, the normal distribution/Gaussian distribution is by far the most popular continuous distribution. \\begin{align*} f(x)=\\frac{1}{\\sqrt{2 \\pi}} \\end{align*}Exponential DistributionThe exponential distribution models the arrival time of an event if is has a constant arrival rate $\\lambda$. Gamma DistributionThe gamma distribution with parameters $(\\alpha, \\lambda)$ often arises in practice, as the distribution of the amount of time one has to wait until a total of n events occur. Beta DistributionThe beta distribution is used to model events that are constrained within a defined interval. By adjusting the shape parameters $\\alpha$ and $\\beta$, it can model different shapes of probability distributions. $\\chi^2$ DistributionCauchy DistributionWeibull DistributionRayleigh Distribution","categories":[{"name":"Mathematics","slug":"Mathematics","permalink":"http://yoursite.com/categories/Mathematics/"},{"name":"Probability","slug":"Mathematics/Probability","permalink":"http://yoursite.com/categories/Mathematics/Probability/"}],"tags":[{"name":"Probability","slug":"Probability","permalink":"http://yoursite.com/tags/Probability/"},{"name":"Statistics","slug":"Statistics","permalink":"http://yoursite.com/tags/Statistics/"},{"name":"Stochastic","slug":"Stochastic","permalink":"http://yoursite.com/tags/Stochastic/"}]},{"title":"Random Variables and Distribution","slug":"Random Variables and Distribution","date":"2019-02-14T05:00:00.000Z","updated":"2019-08-13T02:35:39.878Z","comments":true,"path":"2019/02/14/Random Variables and Distribution/","link":"","permalink":"http://yoursite.com/2019/02/14/Random Variables and Distribution/","excerpt":"","text":"This note contains basic knowledge of random variables and distribution, including random variables, expected values, variance, covariance, and other characteristic values. Except the covariance, other conceptions are about one random variable. Random Variables and DistributionRandom VariablesNumerical quantities whose values are determined by the outcome of the experiment are known as random variables. Hence, we can assign probabilities to their possible values. The set of this probabilities is distribution. In fact, random variables can be discrete or continuous. The possible values of discrete random variables constituted sets of discrete values, whereas continuous random variables whose set of possible values is instead a continuous region can take on any value within some interval. Actually, the distribution differs random variables from general variables in calculus. A random variable must have its own distribution. DistributionFor discrete variables, the distribution is a sequence form. If $X$ is a discrete random variable whose possible values are $x_1, x_2,…,x_n$, then the set of probabilities $P\\{X=x_j\\}$$(j=1,…,n)$ is called the probability distribution of discrete random variable. Since $X$ must assume one of these values, it follows that \\begin{equation*} \\displaystyle{\\sum_{j=1}^{n}}~P\\{X = x_j\\} = 1. \\end{equation*}For continuous variables, the distribution is a function form. Every continuous random variable $X$ has a function $f$ associated with it. This function $f$ is called the probability density function of $X$. For any numbers $a&lt;b$, the area under $f$ between $a$ and $b$ is equal to the probability that $X$ assumes a value between $a$ and $b$. P\\{a \\leq X \\leq b \\} = area ~ under ~ f ~ between ~ a ~ and ~ bDistribution FunctionIf $X$ is a random variable, for any real number x, we define F(x) = P(X \\leq x)as the distribution function of random variable $X$, which is also called $X$ is denoted by $F(x)$, or $X \\sim F(x)$. Sometimes, $F_{X}(x)$ is the same meaning. Sometimes it is also called cumulative distribution function(CDF). Any random variable has its own distribution function, no matter it is discrete or continuous. And here are three fundamental properties. monotonicity $F(x)$ is a monotonic and nondecreasing function on the $(-\\infty, \\infty)$. that is to say, for any $x_1&lt;x_2$, F(x_1) \\leq F(x_2) boundedness For any $x$, $0 \\leq F(x) \\leq 1$, and \\begin{align*} F(-\\infty)=\\lim_{x \\to -\\infty}F(x)=0 \\\\ F(\\infty)=\\lim_{x \\to \\infty}F(x)=1 \\end{align*} right continuity $F(x)$ is the right-continuous function of $x$, that is to say, for any $x_0$, \\lim_{x \\to x_0}F(x)=F(x_0) \\\\ F(x_0+0)=F(x_0) These three fundamental properties are necessary and sufficient conditions whether a function is a distribution function. Mass &amp; Density FunctionFor a discrete random variable $X$, the probability can be values like $x_1, x_2,…,x_n,…$, then the probability of $X$ equals $x_i$: p_i = p_i(x_i)=P(X=x_i),~~i=1,2,...,n,...is called the sequence of probability distribution, or the probability mass function of $X$. The abbreviation is PMF. And the cumulative distribution function of $X​$ is: F(x)=\\sum_{x_i \\leq x}p(x_i)For a continuous random variable $X$, the cumulative distribution function of is $F(x)$, if $\\exists$ a nonnegative integrable function $p(x)$, such that for any real number $x$, F(x)=\\int_{-\\infty}^{x}p(t)dtthen $p(x)$ is called the probability density function of $X$, sometimes the a shorter name is density or PDF. And here are two fundamental properties to determine whether a function is a probability density function or not. non-negativity p(x) \\geq 0 regularity \\int_{-\\infty}^{\\infty}p(x)dx=1Expected ValuesIf X is a random variable whose possible values are $x_1, x_2,…,x_n​$, then the expected value of $X​$, denoted by $E[X]​$, is defined by \\begin{equation*} E[X] = \\displaystyle{\\sum_{j=1}^{n}}~{x_j}P\\{X = x_j\\} \\end{equation*}$E[X]​$ also has alternative names: expectation or the mean of $X​$. It is a kind of weighted average of possible values of $X​$, where the weight given to a value is equal to the probability that $X​$ assumes that value. Actually we can define it more accurately. For an infinite sequence of discrete random variables $p(x_i)=P(X=x_i), i=1,2,…,n,…$, if \\sum_{i=1}^{\\infty}|x_i|p(x_i)","categories":[{"name":"Mathematics","slug":"Mathematics","permalink":"http://yoursite.com/categories/Mathematics/"},{"name":"Probability","slug":"Mathematics/Probability","permalink":"http://yoursite.com/categories/Mathematics/Probability/"},{"name":"Probability Theory","slug":"Mathematics/Probability/Probability-Theory","permalink":"http://yoursite.com/categories/Mathematics/Probability/Probability-Theory/"}],"tags":[{"name":"Probability","slug":"Probability","permalink":"http://yoursite.com/tags/Probability/"},{"name":"Statistics","slug":"Statistics","permalink":"http://yoursite.com/tags/Statistics/"}]},{"title":"NYU Tandon Webinar","slug":"NYU Tandon Webinar","date":"2019-02-11T16:00:00.000Z","updated":"2019-02-12T16:29:34.943Z","comments":true,"path":"2019/02/11/NYU Tandon Webinar/","link":"","permalink":"http://yoursite.com/2019/02/11/NYU Tandon Webinar/","excerpt":"","text":"NYU Tandon Engineering Admitted Student Webinar I attended the NYU Engineering Webinar which introduces some basic information of NYU as well as Tandon Engineering school, life in NYC, future opportunities and the next steps for admitted students. Here are some impressive slides. NYU has 3 portal campuses and 11 global academic centers where NYU students have access to the academic resources. Numbers of NYU speak for themselves. The life in New York city will be fabulous. The value of graduates from NYU Tandon School of Engineering The cost is a relatively tremendous burden for me and my family, which push me a lot. Finally, here is a quote from Andrew Hamilton, NYU President, I want to share with you. Here at NYU, we should remind ourselves who are we as a community: We reject intimidation and discrimination; we strive for diversity and inclusiveness; and we are a community in which each person takes as his or her responsibility the welfare and well-being of others, irrespective of citizenship, faith, race, national origin, gender, sexual orientation, or any of the other identities that might, but surely need not, divide us. Such a varied and inclusive culture in NYU really fascinates me.","categories":[{"name":"Thoughts","slug":"Thoughts","permalink":"http://yoursite.com/categories/Thoughts/"},{"name":"Personal Journals","slug":"Thoughts/Personal-Journals","permalink":"http://yoursite.com/categories/Thoughts/Personal-Journals/"}],"tags":[{"name":"Journal","slug":"Journal","permalink":"http://yoursite.com/tags/Journal/"}]},{"title":"Verbal Advantage Level 2","slug":"VA Level 2","date":"2019-02-11T05:00:00.000Z","updated":"2019-03-21T10:30:02.693Z","comments":true,"path":"2019/02/11/VA Level 2/","link":"","permalink":"http://yoursite.com/2019/02/11/VA Level 2/","excerpt":"","text":"advocate support, plead for, be in favor of, defend by argument synonym: champion, endorse, espouse compare: vocation avocation vocational convoke: convocation: calling together and been summoned evoke: call out, call forth, summon evocative: calling forth a response tips: an advocate to advocate delegate entrust with authority or power, deliver to another’s care or management tips: the executive director delegated various managerial duties to her assistant. our department chief has trouble letting go of the reins and delegating responsibility. unprecedented unheard-of, novel, new, having no precedent pr parallel, having no prior example compare: precedent unprecedented: without a precedent poignant piercing, sharp, biting, penetrating, keen tips: keenly affecting the senses a poignant odor, poignant beauty, a poignant look penetrating to the feelings, emotionally touching, painfully moving a poignant drama, a poignant family reunion biting, cutting, acute, piercingly effective poignant wit, poignant delight, poignant critique compare: puncture: pierce pungent: piercing to the smell or taste expunge: punch out, erase, delete the editor expunged all potentially offensive and derogatory material from the book nebulous unclear, vague, obscure, hazy, indefinite, indistinct tips: nebula: nebulae[pl] nebular: cloudy, misty, vaporous nebulous: vague, indefinite, unclear nebulous writing, nebulous idea, nebulous purpose or goal clandestine kept secret, done in secrecy, especially for an evil, immoral, or illegal purpose synonyms: private, concealed, covert, underhand, sly, stealthy, furtive, surreptitious tips: a clandestine affair a clandestine business deal a clandestine intelligence operation tirade a long-drawn-out speech, especially a vehement and abusive one (protracted, vituperative, censorious) tips: after suffering through yet another one of his boss’s frequent tirades, Joe decided it was time to quit and move on. recur happen again, occur again, especially at intervals or after some lapse of time. compare: reoccur: suggests a one-time repetition recur: suggests repetition more than once tacit unspoken, silent, implied, understood without words tips: a tacit consent: approval given without words a tacit agreement: unspoken understanding taciturn, reserved, uncommunicative, inclined to hold one’s tongue allegation an assertion or declaration, especially one made without proof tips: law: an assertion of what one intends to prove The judge dismissed the allegations. a spokesperson for the company today denied the allegations of wrongdoing regarding the firm’s hiring practices. gullible easily deceived, fooled, or cheated compare: credulous: willing to accept something as true without questioning gull: take advantage of someone who is foolish, unwary or inexperienced dupe: unwariness on the part of the victim benign kindly, good-natured, gracious, mild, having or showing a gentle disposition tips: a benign old man, benign smile, benign intention, a benign government favorable, positive, propitious a benign omen, benign view a benign weather/climate a benign tumor, a benign disease peripheral external, outer, lying at or forming the outside or boundary of something -&gt; not essential, irrelevant tips: periphery: boundary, external surface or area literally: exploring the periphery of the polar icecap figuratively: the periphery of consciousness, the periphery of one’s sphere of influence peripheral: in the literal sense: lying at the edge, on the boundary in the figurative sense: peripheral issues, peripheral points, peripheral considerations rebuff refuse bluntly, reject sharply, turn down abruptly, snub, spurn tips: in colloquial terms: rebuff means to give the cold shoulder to, slam the door on animosity ill will, hostility, antagonism, strong dislike or hatred tips: There was long-standing animosity between the two families after her coworker apologized for his rude remarks, she resolved not to harbor any animosity toward him. synonyms: malice, aversion, malevolence, antipathy, rancor, enmity tenuous thin, slender, slight, flimsy, weak, not dese or substantial, lacking a strong basis. tips: scientific: air is tenuous/thin. Certain fluids or compounds are said to be tenuous a tenuous grip, a tenuous proposal, a tenuous argument, tenuous construction complacent self-satisfied, smug, overly pleased with oneself tips: A complacent smile is a smug, self-satisfied smile. A complacent behavior is self-centered and disregards others’ concerns. A complacent ignorant person is completely satisfied with his ignorance. compare: complaisant: inclined to please, gracious, obliging, courteous, affable, urbane.(positive connotation) complacent:(negative connotation) acme peak, highest point, summit, zenith, especially the point of culmination, the highest possible point in the development or progress of something. tips: figuratively: the acme of his career a company at the acme of the industry acmatic acmatic scientific breakthrough antonym: nadir defunct dead, extinct, obsolete, no longer in existence, effect, operation, use tips: defunct law defunct organization defunct factory/procedure defunct species/person defunct expression/idea abet encourage, support, help, aid, promote, assist in achieving a purpose tips: especially to encourage or assist in wrongdoing to aid and abet: assist a criminal in the commission of a crime favorably: to abet the cause of justice to abet the committee’s efforts to get the plan approved haggard worn out, tired, gaunt, drawn, emaciated tips: a person who is haggard has a wild-eyed and wasted look, as from exhaustion, illness, or grief. long hours at work, lack of sleep, or inadequate nutrition can easily make you haggard, worn out, tired and gaunt. waive relinquish voluntarily, give up, forgo compare: relinquish: giving up something one doesn’t want to part with, either out of necessity or because one has been compelled or forced relinquish possession relinquish command waive: voluntary refusal to insist on one’s right or claim to something waive one’s right to a trial by jury waive one’s claim on a title or property tips: also meaning: postpone, defer, dispense with waive discussion, to waive formalities and get on with business carnal bodily, pertaining to the flesh as opposed to the spirit, sensual, corporeal tips: not used to mean bodily in neutral sense. Wrong using: carnal functions, carnal aches, pains refer to basic physical appetites of the body, especially the sexual appetite carnal desires, carnal lust, carnal knowledge sanction approve, allow, permit, authorize, certify, ratify compare: ratify: officially approve something done by a representative ratify a treaty certify: officially approve compliance with requirements or standards a certified public accountant sanction: give authoritative approval: the company’s board of directors sanctioned the merger. many religions do not sanction unmarried sexual relations. law sanctions free speech but not antisocial behavior. ambiguous uncertain, unclear, doubtful, dubious, questionable, puzzling, having an obscure or indefinite meaning tips: ambiguous intention ambiguous statement synonyms: enigmatic, cryptic, equivocal antonyms: distinct, apparent, evident, conspicuous, manifest spendthrift wasteful, spending extravagantly or foolishly, squandering one’s resources tips: adjective: His spendthrift habits noun: a wasteful person, someone who foolishly squanders money or resources compare: improvident: literally not provident, not providing for the future improvident person does not save money for retirement prodigal: spending money in a reckless or extravagant way, to support a lavish or luxurious lifestyle profligate: extremely prodigal or spendthrift, a person who spends money with reckless abandon and lives a life shamelessly devoted to pleasure. a profligate Hollywood movie star mollify calm, soothe, pacify, appease, soften in feeling or tone, make less harsh or severe tips: emollient adj: softening, soothing, mollifying n: softening or soothing agent literally: make soft or tender mollify meat, tenderize it soften in feeling or tone mollify their demands, mollify conflicts, mollify Jack who is furious unequivocal clear and direct, definite, straightforward, certain, a single obvious meaning tip: reporters are so accustomed to equivocal answers from government officials that they are often surprised and suspicious when they get an unequivocal response. malleable capable of being shaped, molded or manipulated, adaptable impressionable tips: literally: certain metals are malleable. figuratively: person or abstract thing that can be molded or shaped malleable, impressionable, capable of being shaped an idea my be malleable, adaptable, capable of being shaped to fit various purposed. compare: tractable: can be pulled or hauled a tractable person is manageable, easily handled. malleable: can be hammered into shape a malleable person is adaptable, impressionable. antonyms: inflexible, unyielding, stubborn, obstinate, intransigent verbose wordy, having too many words, long-winded, full of verbiage synonyms: garrulous, loquacious, voluble, prolix tips: speech or writing that uses more words than necessary. compare: verbiage: n full of verbiage verbal: expressed in words, either orally or in writing verbal agreement, verbal understanding verbose: adj transient temporary, passing away with time, lasting only a short while, momentary, fleeting, short-lived compare: transitory: by its nature is bound to pass away or come to an end. All life must by nature end: life is transitory transitory nature of fame evanescent: fades away like vapor or vanishes as if into thin air evanescent beauty of springtime flowers an evanescent trail of light evanescent experience can become a lifelong memory ephemeral: living or lasting for only a day ephemeral literature: newspaper writing ephemeral memory for names fugitive: flee, run or fly away a fugitive smile; the fugitive colors of the sunset fugacious: fleeting, things that are elusive our fugacious memories of childhood permanent, timeless, eternal, and everlasting nettle irritate, annoy, vex, harass, pester, provoke supervisor constantly nettled them about trivial or irrelevant detail tips: plant: tiny hairs that sting and irritate the skin verb: sting like a nettle someone who is nettled to the point of silent anger or resentment repudiate reject, cast off, disown, renounce, refuse to accept as one’s own, reject as false, deny the authority, refuse to accept as true tips: repudiate a child, reject or disown the child repudiate a belief, cast it off or renounce it repudiate a claim, deny its authority repudiate a charge, reject it as untrue impetuous hasty, rash, overeager, acting in a sudden, vigorous, emotional way, with little thought The impetuous shopper buys on impulse a prudent investor is not likely to make impetuous decision compare: rash: reckless haste and foolish daring rash statements can lead to war impulsive: ungovernable inner force that drives one to act without thinking he is an impulsive talker who often puts his foot in his mouth impetuous: great energy eagerness or impatience children are often impetuous antonyms: prudent, circumspect frugal spending carefully and wisely, thrifty, economical frugal people are cautious and sparing with the fruit of their labors. compare: thrifty: hard work, good management as a means to prosperity The thrifty person spends only what is necessary and diligently saves the rest. economical: the use of money or resources in the most advantageous way. economical car uses fuel efficiently economical investment is one that generates a higher return provident: providing for the future. provident person spends carefully with a mind toward what may be needed later parsimonious: extremely frugal, stingy, miserly the parsimonious person keeps a wary eye on every nickel and dime. frugal: spending carefully, involving little expense, not wasteful or lavish a frugal meal is an economical, no-frills meal. flying coach rather than first-class is a more frugal way to travel incongruous out of place, inappropriate, inconsistent, unsuitable, lacking harmony of parts or agreement in character incongruous remark: inappropriate or not in keeping with the conversation incongruous element is out of place, not consistent with the elements around it incongruous action, incongruous mixture assuage relieve, ease, allay, mitigate, make less severe or intense; to satisfy, appease, make content assuage someone’s anger/pain/fears: relieve those conditions, allay them, make them less severe or intense. assuage one’s hunger or thirst assuage one’s need or desire corroborate to confirm, support, make more certain or believable compare: authenticate: establish sth. as authentic or genuine authenticate a document, a signature, or a work of art verify: establish as true, confirm the accuracy of reporters have responsibility to verify facts and quotations. substantiate: support by supplying reliable evidence or proof scholars and scientist must substantiate their theories. investigation uncovered several key facts that substantiated the case against the company. corroborate: substantiate what someone else has said by supplying additional evidence or proof corroborate one’s statement embellish decorate, dress up, adorn, enhance with ornamentation, make more beautiful, elegant or interesting embellish one’s home, an outfit, one’s speech, a story tips: embellishment avaricious greedy, money-grubbing, miserly, consumed with a selfish desire to accumulate money or property compare:(acquire more than they have or are entitled to have) greedy: general term for an excessive dire for anything be greedy for approval/success a greedy eater covetous: an excessive and sometimes immoral desire for what another person has be covetous of one’s new car / attractive wife / spacious office and impressive salary. avaricious: an excessive and selfish drive to accumulate wealth and valuable possessions, with an accompanying desire to hoard them avaricious developers and bankers tips: avarice, greed, and inordinate desire for wealth cursory quick, hasty, not methodical, done rapidly with little attention to detail, passing quickly over or through something that deserves closer examination synonyms: hurried, haphazard, slapdash, superficial antonyms: thorough, careful, exhaustive, prolonged, protracted tips: a cursory glance, a cursory reading, a cursory explanation, a cursory investigation vacillate waver, fluctuate, be indecisive, show uncertainly, hesitate in making up one’s mind the strong leader is decisive; the weak leader vacillates when you vacillate, you go back and forth mentally on an issue or question clement mild, calm, tranquil, moderate, temperate, not severe or extreme; merciful, lenient, inclined to pardon or forgive weather is clement when it’s mild or temperate.(when rough or stormy it’s inclement) mild state of mind: inclined to be lenient or forgiving tips: noun: clemency, mildness, leniency, compassion lucrative profitable, producing wealth, money-making, financially productive, remunerative lucrative job pays well. lucrative business deal is profitable. lucrative enterprise is a money-making enterprise. allocate assign, designate, earmark, set aside for a specific purpose allocate a bedroom in the house as a home office allocate time to spend with children allocate funds for education, parks or libraries reconcile make friendly again, restore friendly relations between, settle, resolve, bring into harmony or agreement reconcile their differences reconciliation, a settlement, resolution, act of restoring harmony or agreement tips: bring into agreement, make consistent reconcile the confession of guilt with his profession of innocence resign oneself to accept something undesirable reconcile herself to live her mother-in-law paragon a model of excellence, perfect example the Gettysburg Address is a paragon of forceful, eloquent speechwriting. analogous similar, akin, comparable, corresponding partially, sharing some aspects of form, function or content. tips: analogy, not apply to things that are identical, just similar, alike in certain ways diurnal daily, recurring each day, performed or happening in the course of a day tips: the ocean’s tides and the rotation of the earth are diurnal diurnal duties are the tasks you perform every day diurnal complaint/ make doing sth. part of one’s diurnal routine pretext an excuse, ostensible reason or motive, professed purpose tips: tyrannical leaders often invent pretexts for invading or declaring war on other countries irresponsible employees will invent pretexts for not coming to work supervisor who hates an employee’s guts may try to come up with a pretext for firing the person","categories":[{"name":"Languages","slug":"Languages","permalink":"http://yoursite.com/categories/Languages/"},{"name":"English","slug":"Languages/English","permalink":"http://yoursite.com/categories/Languages/English/"},{"name":"Verbal Advantage","slug":"Languages/English/Verbal-Advantage","permalink":"http://yoursite.com/categories/Languages/English/Verbal-Advantage/"}],"tags":[{"name":"English","slug":"English","permalink":"http://yoursite.com/tags/English/"},{"name":"Vocabularies","slug":"Vocabularies","permalink":"http://yoursite.com/tags/Vocabularies/"}]},{"title":"Verbal Advantage Level 4","slug":"VA Level 4","date":"2019-02-05T05:00:00.000Z","updated":"2020-02-10T14:48:40.000Z","comments":true,"path":"2019/02/05/VA Level 4/","link":"","permalink":"http://yoursite.com/2019/02/05/VA Level 4/","excerpt":"","text":"Level 41-10 (beginning of disc8)provident thrifty, economical, saving or providing the future needs prudent, frugal vowed to be providentimpute to charge or attribute, with a fault or misconduct, lay the responsibility or blame upon, ascribe, assign charge with something bad, attribute the blame for some critics impute the decline imputation, a charge or accusation, astute shrewd, clever, perceptive, discerning, acute, keenly aware, quick-witted sagacious, perspicacious, sapient negative: astute self-promoter neophyte beginner, novice, amateur, Tyrone, a new member of or convert to a religion tyro: a raw beginner who many be eager to learn but is utterly incompetent novice, neophyte: a person just starting out at something tyro: incompetence novice: inexperience neophyte: enthusiasm amateur: may or may not be skilled, often implies a lower level of competence than expert or professional dilettante: who dabbles in something and lacks serious discipline necessary to excel enigma a mystery, puzzle, riddle, perplexing problem, hard to understand or explain she is an enigma to me their motives are still an enigma the case presents us with one enigma after anothercredence belief, acceptance there is now widespread credence among the public that a low-fat diet is more healthful credence credulous credible venerate respect deeply, revere a venerable venerable tradition venerable cause garrulous talkative, rambling, annoying, pointless and long-winded way verbose, loquacious, voluble, prolix reserved, reticent, taciturn, laconic trenchant keen, penetrating, vigorously effective, sharp and to the point a trenchant analysis / remark a trenchant style autonomous independent, self-governing autonomy an autonomous organ / company (not a subsidiary) 11-20panacea cure-all, universal antidote / remedy pan-: allephemeral short lived, passing, fleeting, lasting for a short time ephemeral literature: periodically journalism journal means something written or published each day an ephemeral trend in the economy transitory, transient, evanescent, fugitive, fugaciousonerous burdensome, troublesome, oppressive, hard to bear, difficult to accomplish or endure, an onerous task, an onerous assignmentlaity nonprofessionals, laypeople collectively, all the people outside a lay opinion / diagnosis pungent sharp, penetrating, biting, acrid, caustic pungent: a literal piercing, sharp to the sense of taste a pungent critique, pungent humor and sometimes bitterly worded (painful) 21-30 (end of disc8)31-4041-50","categories":[{"name":"Languages","slug":"Languages","permalink":"http://yoursite.com/categories/Languages/"},{"name":"English","slug":"Languages/English","permalink":"http://yoursite.com/categories/Languages/English/"},{"name":"Verbal Advantage","slug":"Languages/English/Verbal-Advantage","permalink":"http://yoursite.com/categories/Languages/English/Verbal-Advantage/"}],"tags":[{"name":"English","slug":"English","permalink":"http://yoursite.com/tags/English/"},{"name":"Vocabularies","slug":"Vocabularies","permalink":"http://yoursite.com/tags/Vocabularies/"}]},{"title":"C++ Class","slug":"C++ Class","date":"2019-01-31T16:00:00.000Z","updated":"2019-02-01T09:33:51.328Z","comments":true,"path":"2019/01/31/C++ Class/","link":"","permalink":"http://yoursite.com/2019/01/31/C++ Class/","excerpt":"","text":"This note contains basic knowledge of class and objects in C++ including characteristics, definition, constructor, destructor, sturcture, union and enumeration class. characteristics of object-oriented programming1. abstract2. encapsulation3. inheritance4. polymorphismdefinition of class and object1. classsyntax: class Name{ public: public member (which is also external interface) private: private member protected: protected member} tips: Members can be provided with default values when defined. The members without default values will be initialized. 2. objectsyntax: 1. definition class Name object Name; 2. access public members object Name.member Name 3. member function in classsyntax: class Name::Name{ tips: declare the function prototype in the class definition the function body can be defined outside the class with class name to qualify. the function can be defined in the class as an inline function. define a class of clock. #include &lt;iostream&gt; using namespace std; class Clock { public: void setTime(int newH = 0, int newM = 0, int newS = 0); void showTime(); private: int hour, minute, second; }; void Clock::setTime(int newH, int newM, int newS) { hour = newH; minute = newM; second = newS; } inline void Clock::showTime() { cout &lt;&lt; hour &lt;&lt; &quot;:&quot; &lt;&lt; minute &lt;&lt; &quot;:&quot; &lt;&lt; second &lt;&lt; endl; } int main() { Clock myClock; cout &lt;&lt; &quot;First time set and output:&quot; &lt;&lt; endl; myClock.setTime(); myClock.showTime(); cout &lt;&lt; &quot;Second time set and output:&quot; &lt;&lt; endl; myClock.setTime(8, 30, 30); myClock.showTime(); return 0; } constructorsyntax: tips: class Clock { public: Clock() =default; //default constructor Clock(int newH, int newM, int newS); //constructor private: int hour, minute, second; }; define a class of clock with a constructor. #include &lt;iostream&gt; using namespace std; class Clock { public: Clock(int newH, int newM, int newS); void setTime(int newH, int newM, int newS); void showTime(); private: int hour, minute, second; }; Clock::Clock(int newH, int newM, int newS): hour(newH), minute(newM), second(newS){ } void Clock::setTime(int newH, int newM, int newS) { hour = newH; minute = newM; second = newS; } inline void Clock::showTime() { cout &lt;&lt; hour &lt;&lt; &quot;:&quot; &lt;&lt; minute &lt;&lt; &quot;:&quot; &lt;&lt; second &lt;&lt; endl; } int main() { Clock c(0,0,0); c.showTime(); return 0; } define a class of clock with a constructor and a default constructor. #include &lt;iostream&gt; using namespace std; class Clock { public: Clock(int newH, int newM, int newS); Clock(); void setTime(int newH, int newM, int newS); void showTime(); private: int hour, minute, second; }; Clock::Clock():hour(0), minute(0), second(0){ } Clock::Clock(int newH, int newM, int newS): hour(newH), minute(newM), second(newS){ } void Clock::setTime(int newH, int newM, int newS) { hour = newH; minute = newM; second = newS; } inline void Clock::showTime() { cout &lt;&lt; hour &lt;&lt; &quot;:&quot; &lt;&lt; minute &lt;&lt; &quot;:&quot; &lt;&lt; second &lt;&lt; endl; } int main() { Clock c(8,10,0); Clock c2; c.showTime(); c2.showTime(); return 0; } delegating constructorssyntax: tips: delegating constructors help to maintain the constancy of codes. // 2 constructors Clock(int newH, int newM, int newS): hour(newH), minute(newM), second(newS){ } Clock::Clock(): hour(0),minute(0),second(0) { } // delegating constructors Clock(int newH, int newM, int newS): hour(newH),minute(newM), second(newS){ } Clock(): Clock(0, 0, 0) { } copy constructorsyntax: 1. create class class Name{ public: class Name(parameter); class Name(const class Name &amp; object Name);} class Name::class Name(const class Name &amp; object Name){} 2. delete class Name(const class Name &amp; object Name) = delete class Point { public: Point(int xx=0, int yy=0) { x = xx; y = yy; } //constructor, inline Point(const Point&amp; p) =delete; //don&#39;t create default copy constructor private: int x, y; }; tips: 3 conditions that copy constructors will be invoked: 1 2 3 destructorsyntax: ~class Name #include &lt;iostream&gt; using namespace std; class Point{ public: Point(int xx, int yy); ~Point(); private: int x, y; }; Point::Point(int xx, int yy){ x = xx; y = yy; } Point::~Point(){ } tips: The destructor will be invoked when the object disappears. combination of classsyntax: class Name::class Name(parameters of members in the object, parameters of members in this class) : object1(parameter), object2(parameter),…{ function body} tips: the order of initialization: the member which is declared first will be constructed first. create a line class using point class #include &lt;iostream&gt; #include &lt;cmath&gt; using namespace std; class Point { public: Point(int xx = 0, int yy = 0) { x = xx; y = yy; } Point(Point &amp;p); int getX() { return x; } int getY() { return y; } private: int x, y; }; Point::Point(Point &amp;p) { x = p.x; y = p.y; cout &lt;&lt; &quot;Calling the copy constructor of Point&quot; &lt;&lt; endl; } //combination of class class Line { public: Line(Point xp1, Point xp2); Line(Line &amp;l); double getLen() { return len; } private: Point p1, p2; double len; }; //constructor of the combination class Line::Line(Point xp1, Point xp2) : p1(xp1), p2(xp2) { cout &lt;&lt; &quot;Calling constructor of Line&quot; &lt;&lt; endl; double x = static_cast&lt;double&gt;(p1.getX() - p2.getX()); double y = static_cast&lt;double&gt;(p1.getY() - p2.getY()); len = sqrt(x * x + y * y); } //copy constructor of the combination class Line::Line (Line &amp;l): p1(l.p1), p2(l.p2) { cout &lt;&lt; &quot;Calling the copy constructor of Line&quot; &lt;&lt; endl; len = l.len; } int main() { Point myp1(1, 1), myp2(4, 5); //build Point objects Line line(myp1, myp2); //build Line objects Line line2(line); //use copy constructor of the combination class to build a new object cout &lt;&lt; &quot;The length of the line is: &quot;; cout &lt;&lt; line.getLen() &lt;&lt; endl; cout &lt;&lt; &quot;The length of the line2 is: &quot;; cout &lt;&lt; line2.getLen() &lt;&lt; endl; return 0; } preceding reference declarationtips: declare a class name before define another class. class B; class A { public: void f(B b); }; class B { public: void g(A a); }; cannot be involved with details of this declared class: class Fred; class Barney { Fred x; }; class Fred { Barney y; }; UML introductionbasic elements Things Relationships Diagrams Structuressyntax: struct Name{ public membersprotected: protected membersprivate: private members}; tips: default members in structures is public, and can be data members or function members. Students’ basic information #include &lt;iostream&gt; #include &lt;iomanip&gt; #include &lt;string&gt; using namespace std; struct Student { int num; string name; char sex; int age; }; int main() { Student stu = { 97001, &quot;Lin Lin&quot;, &#39;F&#39;, 19 }; cout &lt;&lt; &quot;Num: &quot; &lt;&lt; stu.num &lt;&lt; endl; cout &lt;&lt; &quot;Name: &quot; &lt;&lt; stu.name &lt;&lt; endl; cout &lt;&lt; &quot;Sex: &quot; &lt;&lt; stu.sex &lt;&lt; endl; cout &lt;&lt; &quot;Age: &quot; &lt;&lt; stu.age &lt;&lt; endl; return 0; } unionssyntax: union Name{ public membersprotected: protected membersprivate: private members}; tips: members in unions share the storage space, therefore there is only one effective member at the same time. The storage space is determined by the largest space demand members. Student’s mark union Mark{ char grade; //class grade: A, B, C, D, F bool pass; //pass or fail int percent; //hundred mark }; anonymous unionsunion { int i; float f; } tips: i and f will share the storage space. Student’s mark information #include &lt;string&gt; #include &lt;iostream&gt; using namespace std; class ExamInfo { public: ExamInfo(string name, char grade) : name(name), mode(GRADE), grade(grade) { } ExamInfo(string name, bool pass) : name(name), mode(PASS), pass(pass) { } ExamInfo(string name, int percent) : name(name), mode(PERCENTAGE), percent(percent) { } void show(); private: string name; enum { GRADE, PASS, PERCENTAGE } mode; union { char grade; bool pass; int percent; }; }; void ExamInfo::show() { cout &lt;&lt; name &lt;&lt; &quot;: &quot;; switch (mode) { case GRADE: cout &lt;&lt; grade; break; case PASS: cout &lt;&lt; (pass ? &quot;PASS&quot; : &quot;FAIL&quot;); break; case PERCENTAGE: cout &lt;&lt; percent; break; } cout &lt;&lt; endl; } int main() { ExamInfo course1(&quot;English&quot;, &#39;B&#39;); ExamInfo course2(&quot;Calculus&quot;, true); ExamInfo course3(&quot;C++ Programming&quot;, 85); course1.show(); course2.show(); course3.show(); return 0; } enumeration classsyntax: enum class Name: Type name{ enumeration list }; enum class Type {General, Light, Medium, Heavy}; enum class Type: char {General, Light, Medium, Heavy}; enum class Category {General=1, Pistol, MachineGun, Cannon}; Name::enumeration element Type::General tips: the Type name can be defined as int, char, double etc. The default is int. Strong scope Strict #include&lt;iostream&gt; using namespace std; enum class Side{ Right, Left }; enum class Thing{ Wrong, Right }; int main(){ Side s = Side::Right; Thing w = Thing::Wrong; cout &lt;&lt; (s == w) &lt;&lt; endl; return 0; }","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Programming","slug":"Computer-Science/Programming","permalink":"http://yoursite.com/categories/Computer-Science/Programming/"},{"name":"C++","slug":"Computer-Science/Programming/C","permalink":"http://yoursite.com/categories/Computer-Science/Programming/C/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"},{"name":"MOOC","slug":"MOOC","permalink":"http://yoursite.com/tags/MOOC/"}]},{"title":"C++ Data Share & Protection","slug":"C++ Data Share & Protection","date":"2019-01-31T16:00:00.000Z","updated":"2019-02-27T02:59:52.323Z","comments":true,"path":"2019/01/31/C++ Data Share & Protection/","link":"","permalink":"http://yoursite.com/2019/01/31/C++ Data Share & Protection/","excerpt":"","text":"This note contains basic knowledge of data share and protection in C++ including. Scope classification function prototype scope 1double area(double radius) local scope 12345678void fun(int a) &#123; int b = a; cin &gt;&gt; b; if (b &gt; 0) &#123; int c; ...... &#125;&#125; global scope file scope visibility 1234567891011121314#include using namespace std; int i; //global variable，file scopeint main() &#123; i = 5; //i is a global variable (external) &#123; int i; //local scope (inner) i = 7; cout &lt;&lt; \"i = \" &lt;&lt; i &lt;&lt; endl;//output 7 &#125; cout &lt;&lt; “i = ” &lt;&lt; i &lt;&lt; endl;//output 5 return 0;&#125; Lifetime static lifetime local lifetime 123456789101112131415161718192021222324252627282930#include&lt;iostream&gt;using namespace std;int i = 1; // i is global variable with static lifetime and global visibility.void other() &#123; static int a = 2; static int b; // a,b are static local variables, with static lifetime and local visibility // a,b will be initialized only at the first time int c = 10; // c is a local variable with local lifetime and local visibility //c will be initialized every time the \"other function\" is about to run. a += 2; i += 32; c += 5; cout&lt;&lt;\"---OTHER---\\n\"; cout&lt;&lt;\" i: \"&lt;&lt;i&lt;&lt;\" a: \"&lt;&lt;a&lt;&lt;\" b: \"&lt;&lt;b&lt;&lt;\" c: \"&lt;&lt;c&lt;&lt;endl; b = a;&#125;int main() &#123; static int a;//a is static local variable with static lifetime and local visibility int b = -10; // b, c are local variables with local lifetime int c = 0; cout &lt;&lt; \"---MAIN---\\n\"; cout&lt;&lt;\" i: \"&lt;&lt;i&lt;&lt;\" a: \"&lt;&lt;a&lt;&lt;\" b: \"&lt;&lt;b&lt;&lt;\" c: \"&lt;&lt;c&lt;&lt;endl; c += 8; other(); cout&lt;&lt;\"---MAIN---\\n\"; cout&lt;&lt;\" i: \"&lt;&lt;i&lt;&lt;\" a: \"&lt;&lt;a&lt;&lt;\" b: \"&lt;&lt;b&lt;&lt;\" c: \"&lt;&lt;c&lt;&lt;endl; i += 10; other(); return 0;&#125; The result is below: 12345678---MAIN---i: 1 a: 0 b: -10 c: 0---OTHER---i: 33 a: 4 b: 0 c: 15---MAIN---i: 33 a: 0 b: -10 c: 8---OTHER---i: 75 a: 6 b: 4 c: 15 Friend Function &amp; Classfriend function 123456789101112131415161718192021222324#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;class Point &#123; //Point类声明public: //外部接口 Point(int x=0, int y=0) : x(x), y(y) &#123; &#125; int getX() &#123; return x; &#125; int getY() &#123; return y; &#125; friend float dist(Point &amp;a, Point &amp;b);private: //私有数据成员 int x, y;&#125;;float dist(Point&amp; a, Point&amp; b) &#123; double x = a.x - b.x; double y = a.y - b.y; return static_cast&lt;float&gt;(sqrt(x * x + y * y));&#125;int main() &#123; Point p1(1, 1), p2(4, 5); cout &lt;&lt;\"The distance is: \"; cout &lt;&lt; dist(p1, p2) &lt;&lt; endl; return 0;&#125; friend class12345678910111213141516171819202122232425class A &#123; friend class B;public: void display() &#123; cout &lt;&lt; x &lt;&lt; endl;&#125;private: int x;&#125;class B &#123;public: void set(int i); void display();private: A a;&#125;;void B::set(int i) &#123; a.x=i;&#125;void B::display() &#123; a.display();&#125;; tips: The friend function and class is a one-direction relationship. Shared Data Protectionconst object12345678class A&#123;public: A(int i,int j) &#123;x=i; y=j;&#125; ...private: int x,y;&#125;;A const a(3,4); const function123456789101112131415161718192021222324252627#include&lt;iostream&gt;using namespace std;class R &#123;public: R(int r1, int r2) : r1(r1), r2(r2) &#123; &#125; void print(); void print() const;private: int r1, r2;&#125;;void R::print() &#123; cout &lt;&lt; r1 &lt;&lt; \":\" &lt;&lt; r2 &lt;&lt; endl;&#125;void R::print() const &#123; cout &lt;&lt; r1 &lt;&lt; \";\" &lt;&lt; r2 &lt;&lt; endl;&#125;int main() &#123; R a(5,4); a.print(); //调用void print() const R b(20,52); b.print(); //调用void print() const return 0;&#125; const member123456789101112131415161718192021222324#include &lt;iostream&gt;using namespace std;class A &#123;public: A(int i); void print();private: const int a; static const int b;&#125;;const int A::b=10;A::A(int i) : a(i) &#123; &#125;void A::print() &#123; cout &lt;&lt; a &lt;&lt; \":\" &lt;&lt; b &lt;&lt;endl;&#125;int main() &#123;//建立对象a和b，并以100和0作为初值，分别调用构造函数，//通过构造函数的初始化列表给对象的常数据成员赋初值 A a1(100), a2(0); a1.print(); a2.print(); return 0;&#125; const reference123456789101112131415161718192021222324#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;class Point&#123;public: Point(int x = 0, int y = 0) : x(x), y(y) &#123; &#125; int getX() &#123; return x; &#125; int getY() &#123; return y; &#125; friend float dist(const Point &amp;p1,const Point &amp;p2);private: int x, y;&#125;;float dist(const Point &amp;p1, const Point &amp;p2) &#123; double x = p1.x - p2.x; double y = p1.y - p2.y; return static_cast&lt;float&gt;(sqrt(x*x+y*y));&#125;int main()&#123; const Point myp1(1, 1), myp2(4, 5); cout &lt;&lt; \"The distance is: \"; cout &lt;&lt; dist(myp1, myp2) &lt;&lt; endl; return 0;&#125;","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Programming","slug":"Computer-Science/Programming","permalink":"http://yoursite.com/categories/Computer-Science/Programming/"},{"name":"C++","slug":"Computer-Science/Programming/C","permalink":"http://yoursite.com/categories/Computer-Science/Programming/C/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"},{"name":"MOOC","slug":"MOOC","permalink":"http://yoursite.com/tags/MOOC/"}]},{"title":"Real Number Theory","slug":"Real Number Theory","date":"2019-01-31T05:00:00.000Z","updated":"2020-01-10T16:42:51.303Z","comments":true,"path":"2019/01/31/Real Number Theory/","link":"","permalink":"http://yoursite.com/2019/01/31/Real Number Theory/","excerpt":"","text":"This note contains basic knowledge of Set, Some basic principles of the real number. Completeness of the Real NumbersExistence of supremum and infimumUpper Bound &amp; Lower Bound Upper Bound Let $S$ be a nonempty set of real numbers. If $ \\exists ~ M \\in R$, such that $ \\forall ~ x \\in S$, $x \\leq M $, then $M$ is called an upper bound for $S$, or $S$ has an upper bound. And $S$ is said to be bounded above. A set may have many upper bounds. Lower Bound Similarly, if $ \\exists ~ m \\in R$, such that $ \\forall ~ x \\in S$, $x \\geq m $, then $m$ is called an lower bound for $S$, or $S$ has an lower bound. And $S$ is said to be bounded below. A set may have many upper bounds and lower bounds. If a set $S$ has both upper bounds and lower bounds, then $S$ is called the bounded set. Evidently, it is equivalent to: \\exists ~ X > 0, such ~ that ~ \\forall ~ x \\in S, |x| \\leq XSupremum &amp; Infimum Supremum Let $U$ be a set of upper bounds of $S$. Obviously it has no maximum element. And let the minimum of $U$ be $\\beta$, then $\\beta$ is called the least upper bound of $S$, which is also called the supremum of $S$. It is denoted as \\beta = sup ~ SThere are two properties of supremum $\\beta$ $\\beta$ is an upper bound of $S$: $\\forall ~ x \\in S$, $x \\leq \\beta$. Any number that is less than $\\beta$ is not the upper bound of $S$: $\\forall ~ \\varepsilon &gt; 0$, $\\exists ~ x \\in S$, such that $x &gt; \\beta - \\varepsilon$. Infimum Similarly, let $L$ be a set of upper bounds of $S$. Obviously it has no minimum element. And let the maximum of $L$ be $\\alpha$, then $\\alpha$ is called the greatest lower bound of $S$, which is also called the infimum of $S$. It is denoted as \\alpha = inf ~ SThere are also two properties of infimum $\\alpha$ $\\alpha$ is an lower bound of $S$: $\\forall ~ x \\in S$, $x \\geq \\alpha$. Any number that is greater than $\\alpha$ is not the lower bound of $S$: $\\forall ~ \\varepsilon &gt; 0$, $\\exists ~ x \\in S$, such that $x &lt; \\alpha + \\varepsilon$. Supremum and Infimum Theorem A nonempty set of real numbers that’s bounded above has supremum. A nonempty set of real numbers that’s bounded below has infimum. This theorem, which is crucial for establishing many of the important theorems of calculus and real analysis, is one of the basic theorems of the real number system.","categories":[{"name":"Mathematics","slug":"Mathematics","permalink":"http://yoursite.com/categories/Mathematics/"},{"name":"Analysis","slug":"Mathematics/Analysis","permalink":"http://yoursite.com/categories/Mathematics/Analysis/"}],"tags":[{"name":"Calculus","slug":"Calculus","permalink":"http://yoursite.com/tags/Calculus/"},{"name":"Real Analysis","slug":"Real-Analysis","permalink":"http://yoursite.com/tags/Real-Analysis/"}]},{"title":"Limit and Continuity","slug":"Limit and Continuity","date":"2019-01-31T05:00:00.000Z","updated":"2020-01-10T16:43:17.317Z","comments":true,"path":"2019/01/31/Limit and Continuity/","link":"","permalink":"http://yoursite.com/2019/01/31/Limit and Continuity/","excerpt":"","text":"This note contains basic knowledge of Limit and Continuity. Limits of SequencesDefinitionA sequence is an infinite or finite ordered list of terms base on the positive number index: x_1, x_2,...,x_n,...It is usually denoted as $\\{x_n\\}$, and $x_n$ is called the general term. And the limits of sequences can be rigorously defined as this: Let $\\{ x_n \\}$ is a given sequence, $a$ is a constant. If $\\forall $ given $\\varepsilon &gt; 0$, $\\exists$ a positive integer $N$, such that when $n &gt; N$ there is |x_n - a|","categories":[{"name":"Mathematics","slug":"Mathematics","permalink":"http://yoursite.com/categories/Mathematics/"},{"name":"Analysis","slug":"Mathematics/Analysis","permalink":"http://yoursite.com/categories/Mathematics/Analysis/"}],"tags":[{"name":"Calculus","slug":"Calculus","permalink":"http://yoursite.com/tags/Calculus/"},{"name":"Real Analysis","slug":"Real-Analysis","permalink":"http://yoursite.com/tags/Real-Analysis/"}]},{"title":"Probability Basics","slug":"Probability Basics","date":"2019-01-31T05:00:00.000Z","updated":"2019-08-13T02:35:18.903Z","comments":true,"path":"2019/01/31/Probability Basics/","link":"","permalink":"http://yoursite.com/2019/01/31/Probability Basics/","excerpt":"","text":"This note contains basic knowledge of probability, including events, probability, conditional probability, multiplication theorem of probability, formula of total probability and Bayes’ theorem. Probability SpaceFinite Sample SpaceGenerally, a set of all the possible results of a certain experiment $S$ is call the sample space, which is denoted as $\\Omega$. All the results of the experiment, which are also in the $\\Omega$ are called the sample point, denoted as $\\omega$. \\Omega = \\{\\omega|\\omega ~ \\text{are sample points of the experiment S} \\}Classical Model of ProbabilityConsider an experiment with a finite sample space $\\Omega = \\{\\omega_1,\\omega_2,…,\\omega_m\\}$. Suppose that there are numbers $p_1, p_2, …, p_m​$ with p_i \\geq 0, ~ i = 1, 2,..., m, ~~ and ~~ \\displaystyle{\\sum\\limits_{i=1}^m}p_i = 1 ​and such that $p_i​$ is the probability that $i​$ is the outcome of the experiment $S​$. Any set of possible outcomes of the experiment is called an event. If $P(A)​$ denote the probability that event A occurs, then \\begin{equation*} P(A) = \\sum_{i \\in A} ~ p_i = \\frac{\\text{number of elements in event A}}{\\text{total number of elements in sample space $\\Omega$}} \\end{equation*}If these $p_1,p_2,…,p_m$ all exist with each other, this situation is called the classical model of probability. And we can easily deduce that \\begin{equation*} P(S) = \\sum_{i} ~ p_i = 1 \\end{equation*}For any event $A$, let $A^c$, called the complement of $A$, be the event containing all those outcomes in $S$ that are not in $A$. That is, $A^c$ occurs if and only if $A$ does not. Since \\begin{align*} 1 &= \\displaystyle{\\sum_{i}} ~ p_i \\\\ &= \\displaystyle{\\sum_{i \\in A}} ~ p_i + \\displaystyle{\\sum_{i \\in A^c}} ~ p_i \\\\ &= P(A) + P(A^c) \\\\ \\end{align*}So it implies that \\begin{equation*} P(A^c) = 1 - P(A) \\end{equation*}For $ \\varnothing = S^c $, we can obtain that \\begin{equation*} P(\\varnothing) = 0 \\end{equation*}Based on simple principle of set theory, \\begin{align*} A \\cup B &= A + B\\bar{A} \\\\ A &= AB+A\\bar{B} \\\\ &= A(B+\\bar{B}) \\end{align*}for any events $A$ and $B$, we can write \\begin{align*} P(A \\cup B) &= \\displaystyle{\\sum_{i \\in A \\cup B}} ~ p_i \\\\ P(A) &= \\displaystyle{\\sum_{i \\in A}} ~ p_i \\\\ P(B) &= \\displaystyle{\\sum_{i \\in B}} ~ p_i \\\\ \\end{align*}And the addition theorem of probability for two events can be written that \\begin{align*} P(A \\cup B) &= P(A) + P(B) - P(A \\cap B) \\\\ P(E_1 \\cup E_2 \\cup E_N) &= \\sum_{i=1}^{N}P(E_i)-\\sum_{i_1","categories":[{"name":"Mathematics","slug":"Mathematics","permalink":"http://yoursite.com/categories/Mathematics/"},{"name":"Probability","slug":"Mathematics/Probability","permalink":"http://yoursite.com/categories/Mathematics/Probability/"},{"name":"Probability Theory","slug":"Mathematics/Probability/Probability-Theory","permalink":"http://yoursite.com/categories/Mathematics/Probability/Probability-Theory/"}],"tags":[{"name":"Probability","slug":"Probability","permalink":"http://yoursite.com/tags/Probability/"}]},{"title":"C++ Functions","slug":"C++ Functions","date":"2019-01-27T16:00:00.000Z","updated":"2019-02-01T02:25:03.660Z","comments":true,"path":"2019/01/27/C++ Functions/","link":"","permalink":"http://yoursite.com/2019/01/27/C++ Functions/","excerpt":"","text":"This note contains basic knowledge of functions in C++ including definition, invocation, overloading and so on. definition of functionssyntax: type identifier Name(formal parameter){ statements return} tips: If the type identifier is void, there is no need to include a return statement in the function body. invocation of functions1. declaration prototypesyntax: function prototype: type identifier Name(formal parameter with type notifications) tips: if a function is defined after the invocation point, its prototype must be declared before invocation. if a function is defined before the invocation point, there is no need to declare the prototype. 2. invocationsyntax: Name(argument) 3.1. write a function to compute the n power of x #include &lt;iostream&gt; using namespace std double power(double x, int n){ dowble val = 1.0; while(n--) val *= x; return val; } int main(){ double pow; pow = power(5, 2): cout &lt;&lt; &quot;5 to the power 2 is &quot; &lt;&lt; pow &lt;&lt; endl; return 0; } 3.2. write a function to converse an input number from binary to decimal #include &lt;iostream&gt; using namespace std; double power(double x, int n); int main() { int value = 0; cout &lt;&lt; &quot;Enter an 8 bit binary number: &quot;; for (int i = 7; i &gt;= 0; i--) { char ch; cin &gt;&gt; ch; if (ch == &#39;1&#39;) value += static_cast&lt;int&gt;(power(2, i)); } cout &lt;&lt; &quot;Decimal value is &quot; &lt;&lt; value &lt;&lt; endl; return 0; } //compute the n power of x double power (double x, int n) { double val = 1.0; while (n--) val *= x; return val; } 3.3. write a function to compute the value of Pi #include &lt;iostream&gt; using namespace std; double arctan(double x) { double sqr = x * x; double e = x; double r = 0; int i = 1; while (e / i &gt; 1e-15) { double f = e / i; r = (i % 4 == 1) ? r + f : r - f; e = e * sqr; i += 2; } return r; } int main(){ double a = 16.0 * arctan(1/5.0); double b = 4.0 * arctan(1/239.0); cout &lt;&lt; &quot;Pi = &quot; &lt;&lt; a - b &lt;&lt; endl; return 0; } 3.4. find all the number from 11 to 999 of which the 1, 2 and 3 power are all palindrome numbers #include &lt;iostream&gt; using namespace std; //determin whether n is a palindrome number bool symm(unsigned n) { unsigned i = n; unsigned m = 0; while (i &gt; 0) { m = m * 10 + i % 10; i /= 10; } return m == n; } int main() { for (unsigned m = 11; m &lt; 1000; m++) if (symm(m) &amp;&amp; symm(m * m) &amp;&amp; symm(m * m * m)) { cout &lt;&lt; &quot;m = &quot; &lt;&lt; m; cout &lt;&lt; &quot;m * m = &quot; &lt;&lt; m * m; cout &lt;&lt; &quot;m * m * m = &quot; &lt;&lt; m * m * m &lt;&lt; endl; } return 0; } 3.5. write a function to compute a piecewise function #include &lt;iostream&gt; #include &lt;cmath&gt; using namespace std; const double TINY_VALUE = 1e-10; double tsin(double x) { double g = 0; double t = x; int n = 1; do { g += t; n++; t = -t * x * x / (2 * n - 1) / (2 * n - 2); } while (fabs(t) &gt;= TINY_VALUE); return g; } int main() { double k, r, s; cout &lt;&lt; &quot;r = &quot;; cin &gt;&gt; r; cout &lt;&lt; &quot;s = &quot;; cin &gt;&gt; s; if (r * r &lt;= s * s) k = sqrt(tsin(r) * tsin(r) + tsin(s) * tsin(s)); else k = tsin(r * s) / 2; cout &lt;&lt; k &lt;&lt; endl; return 0; } Random Function nesting invocation of functionsnesting: invoke another function in a function. 3.7. compute the sum of square of the two input integer #include &lt;iostream&gt; using namespace std; int fun2(int m) { return m * m; } int fun1(int x,int y) { return fun2(x) + fun2(y); } int main() { int a, b; cout &lt;&lt; &quot;Please enter two integers(a and b): &quot;; cin &gt;&gt; a &gt;&gt; b; cout &lt;&lt; &quot;The sum of square of a and b: &quot; &lt;&lt; fun1(a, b) &lt;&lt; endl; return 0; } recursive invocation of functionsrecursive: invoke itself in a function 3.8. compute the factorial of n #include &lt;iostream&gt; using namespace std; unsigned fac(unsigned n) { unsigned f; if (n == 0) f = 1; else f = fac(n - 1) * n; return f; } int main() { unsigned n; cout &lt;&lt; &quot;Enter a positive integer: &quot;; cin &gt;&gt; n; unsigned y = fac(n); cout &lt;&lt; n &lt;&lt; &quot;! = &quot; &lt;&lt; y &lt;&lt; endl; return 0; } &gt;3.9. compute the number of combinations of k individuals selected from n individuals&gt; #include &lt;iostream&gt; using namespace std; &gt; int comm(int n, int k) { if (k &gt; n) return 0; else if (n == k || k == 0) return 1; else return comm(n - 1, k) + comm(n - 1, k - 1); } int main() { int n, k; cout &lt;&lt; &quot;Please enter two integers n and k: &quot;; cin &gt;&gt; n &gt;&gt; k; cout &lt;&lt; &quot;C(n, k) = &quot; &lt;&lt; comm(n, k) &lt;&lt; endl; return 0; } 3.10. Solution of Hanoi Tower&gt; #include &lt;iostream&gt; using namespace std; //move the top plate which is on the src to the dest void move(char src, char dest) { cout &lt;&lt; src &lt;&lt; &quot; --&gt; &quot; &lt;&lt; dest &lt;&lt; endl; } //move n plates which is on the src to the dest via medium void hanoi(int n, char src, char medium, char dest) { if (n == 1) move(src, dest); else { hanoi(n - 1, src, dest, medium); move(src, dest); hanoi(n - 1, medium, src, dest); } } int main() { int m; cout &lt;&lt; &quot;Enter the number of diskes: &quot;; cin &gt;&gt; m; cout &lt;&lt; &quot;the steps to moving &quot; &lt;&lt; m &lt;&lt; &quot; diskes:&quot; &lt;&lt; endl; hanoi(m,&#39;A&#39;,&#39;B&#39;,&#39;C&#39;); return 0; } parameter passing1. reference passingsyntax: type identifier &amp; Name &gt; int i,j; int &amp;ri = i; j = 10; ri = j swap two different numbers #include &lt;iostream&gt; using namespace std; void swap(int &amp; a, int &amp; b) { int t = a; a = b; b = t; } int main() { int x = 5, y = 10; cout &lt;&lt; &quot;x = &quot; &lt;&lt; x &lt;&lt; &quot; y = &quot; &lt;&lt; y &lt;&lt; endl; swap(x, y); cout &lt;&lt; &quot;x = &quot; &lt;&lt; x &lt;&lt; &quot; y = &quot; &lt;&lt; y &lt;&lt; endl; return 0; } variable parameter functioninitializer_list inline functionsyntax: inline type identifier Name tips: inline function cannot contain the switch and if statement. compute the area of a circle #include &lt;iostream&gt; using namespace std; const double PI = 3.14159265358979; inline double calArea(double radius) { return PI * radius * radius; } int main() { double r = 3.0; //r is the radius //it will be replaced by the statements in calArea function during compiling. double area = calArea(r); cout &lt;&lt; area &lt;&lt; endl; return 0; } constexpr functionsyntax: constexpr type identifier Name tips: There is only one return statement in a constexpr function, in which the return value should be a constant. example: constexpr int get_size(){ return 20; } constexpr int foo = get_size(); functions with default parameter valuessyntax: type identifier Name(parameter1, parameter2 = value, …) tips: The parameter with default values should be ordered by the right side when defined. The default values should be defined in the front one: function definition or publication. compute the volume of some cuboid boxes #include &lt;iostream&gt; #include &lt;iomanip&gt; using namespace std; int getVolume(int length, int width = 2, int height = 3); int main() { const int X = 10, Y = 12, Z = 15; cout &lt;&lt; &quot;Some box data is &quot; ; cout &lt;&lt; getVolume(X, Y, Z) &lt;&lt; endl; cout &lt;&lt; &quot;Some box data is &quot; ; cout &lt;&lt; getVolume(X, Y) &lt;&lt; endl; cout &lt;&lt; &quot;Some box data is &quot; ; cout &lt;&lt; getVolume(X) &lt;&lt; endl; return 0; } int getVolume(int length, int width/* = 2 */, int height/* = 3 */) { cout &lt;&lt; setw(5) &lt;&lt; length &lt;&lt; setw(5) &lt;&lt; width &lt;&lt; setw(5) &lt;&lt; height &lt;&lt; &#39;\\t&#39;; return length * width * height; } overloading of functionssyntax: type identifier1 Name(type identifier1 parameter1…)type identifier2 Name(type identifier2 parameter2, type identifier3 parameter3…) tips: The number of parameters can be different. Overloading of functions is determined by the type identifier, rather than return values or expression in the functions. computer the sum of square of two numbers #include &lt;iostream&gt; using namespace std; int sumOfSquare(int a, int b) { return a * a + b * b; } double sumOfSquare(double a, double b) { return a * a + b * b; } int main() { int m, n; cout &lt;&lt; &quot;Enter two integer: &quot;; cin &gt;&gt; m &gt;&gt; n; cout &lt;&lt; &quot;Their sum of square: &quot; &lt;&lt; sumOfSquare(m, n) &lt;&lt; endl; double x, y; cout &lt;&lt; &quot;Enter two real number: &quot;; cin &gt;&gt; x &gt;&gt; y; cout &lt;&lt; &quot;Their sum of square: &quot; &lt;&lt; sumOfSquare(x, y) &lt;&lt; endl; return 0; } system functionThe system functions are usually defined in the head files: mathematics: &lt;cmath&gt; **compute the sine, cosine and tangent function value of a input angle. #include &lt;iostream&gt; #include &lt;cmath&gt; using namespace std; const double PI = 3.14159265358979; int main() { double angle; cout &lt;&lt; &quot;Please enter an angle: &quot;; cin &gt;&gt; angle; double radian = angle * PI / 180; cout &lt;&lt; &quot;sin(&quot; &lt;&lt; angle &lt;&lt; &quot;) = &quot; &lt;&lt; sin(radian) &lt;&lt;endl; cout &lt;&lt; &quot;cos(&quot; &lt;&lt; angle &lt;&lt; &quot;) = &quot; &lt;&lt; cos(radian) &lt;&lt;endl; cout &lt;&lt; &quot;tan(&quot; &lt;&lt; angle &lt;&lt; &quot;) = &quot; &lt;&lt; tan(radian) &lt;&lt;endl; return 0; }","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Programming","slug":"Computer-Science/Programming","permalink":"http://yoursite.com/categories/Computer-Science/Programming/"},{"name":"C++","slug":"Computer-Science/Programming/C","permalink":"http://yoursite.com/categories/Computer-Science/Programming/C/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"},{"name":"MOOC","slug":"MOOC","permalink":"http://yoursite.com/tags/MOOC/"}]},{"title":"Top 10 TED Talks of 2018","slug":"TED","date":"2019-01-24T16:00:00.000Z","updated":"2019-02-17T10:15:41.136Z","comments":true,"path":"2019/01/24/TED/","link":"","permalink":"http://yoursite.com/2019/01/24/TED/","excerpt":"","text":"This note is a summary of some TED speeches. How we need to remake the Internetby Jaron Lanier At the beginning of the Internet, most things are free. The business model is with advertisement. With the development, advertisement becomes not social network anymore, but “behavior modification empires“. “It’s a global tragic, astoundingly ridiculous mistake rather than a wave of evil.” To remake the decision: some people pay for internet service like subscription fee, “Peak TV”. “Peak social media” “We cannot have a society in which, if two people wish to communicate, the only way that can happen is if it’s financed by a third person who wishes to manipulate them“ Link:How we need to remake the Internet A healthy economy should be designed to thrive, not growby Kate Raworth Growth seems such a obsession that humanity always have, which comes from: GDP was invented in 1930s. W.W. Rostow‘s book: The stages of Economic Growth: A Non-Communist Manifesto in 1960s. traditional society where output is limited by tech, institutions and mindset preconditions for takeoff (compound interest, national dignity), growth become normal. drive to maturity with any production based on any resource final: any consumption financially addicted to growth designed to pursue the highest rate of monetary return politically addicted to growth politicians want to raise tax revenue without taxes, only by GDP. socially addicted to growth consumer propaganda created by Edward Bernays time to choose higher ambition than growth, which need a dashboard of indicators: like a doughnut. dynamic balance today’s challenge regenerative design clean energy: wind, tide, sun circular: turn the waste for the first to the food for the next regenerate once-barren landscapes distributive design distribute wealth, knowledge and empowerment to many harness today’s technology in service of distribution design. thrive a long time ingenious people turn boundary into the source of their creativity: boundary unleash our potential. Link:A healthy economy should be designed to thrive, not grow What are the most important moral problems of our time?by Will MacAskill economic history of human civilization continue ascend resulting from scientific and industrial revolution. We also need ethic revolution. Of all the problems facing humanity, which should we focus on solving first?There is a framework: big solvable neglected Three priority issues: global health: solvable factory farming: neglected category of existential risks: permanently derail civilization nuclear war global pandemic synthetiic biology geoengineering artificial intelligence big: causing extinction neglected: issues influencing the next generation are often neglected. philanthropy funding solvable: volunteer, career and political engagement Link:What are the most important moral problems of our time? Is the world getting better or worse? A look at the numbersby Steven Pinker Everyday news: the worst year ever. But it is not a good understanding in the 21st century Compare the same data between present and 30 years ago rethink progress Intellectual hate progress. However, progress is a testable hypothesis. Life, heath, sustenance, prosperity, peace, freedom, safety, knowledge, leisure, happiness data shows we have made great progress in last several hundred years. The progress is not included in news, which become steadily glummer. Why don’t people appreciate progress a mental shortcut called “availability heuristic“, which means that the easier it is to recall something from memory, the probable we judge it to be. nature of journalism bad things happen quickly, but good things don’t happen in a day. Isn’t it good to be pessimistic? to safeguard against complacency, to rake the muck, to speak truth to power. However, it’s good to be accurate: not only just morbid things, but also how to change them. fatalism radicalism What cause the progress? not mystical force, not a mysterious arc of history bending toward justice. result of human efforts governed by an idea, Enlightenment. Is progress inevitable? progress does not mean good thing for everyone everywhere all the time. progress is a problem-solving, which solve problems but create new problems which should be solved in turn Does Enlightenment go against human nature? in understanding our tribulations and woes, human nature is the problem. But human nature, channeled by Enlightenment norms and institutions, is also the solution. Link: Is the world getting better or worse? A look at the numbers","categories":[{"name":"Languages","slug":"Languages","permalink":"http://yoursite.com/categories/Languages/"},{"name":"English","slug":"Languages/English","permalink":"http://yoursite.com/categories/Languages/English/"},{"name":"TED Collections","slug":"Languages/English/TED-Collections","permalink":"http://yoursite.com/categories/Languages/English/TED-Collections/"}],"tags":[{"name":"English","slug":"English","permalink":"http://yoursite.com/tags/English/"},{"name":"TED","slug":"TED","permalink":"http://yoursite.com/tags/TED/"}]},{"title":"Verbal Advantage Level 1","slug":"VA Level 1","date":"2019-01-23T05:00:00.000Z","updated":"2019-02-06T00:56:07.671Z","comments":true,"path":"2019/01/23/VA Level 1/","link":"","permalink":"http://yoursite.com/2019/01/23/VA Level 1/","excerpt":"","text":"paraphrase restate / restatement compare quote: paraphrase: ostensible apparent or appearing to be true, professed as true without being proved. compare: plausible: specious: (negative) sth. false appears true antonym: real, actual tips: ostensible advantage digress wander, stray from the point, ramble, deviate, go off in another direction (in speaking or writing) compare: ingress egress tips: sb. digress be full of humorous digressions uncanny eerie, strange, weird, mysterious sth. strange in an unnatural or unearthly way collocation: uncanny experience sth. beyond what is expected, strange in a marvelous way collocation: uncanny resemblance/ability candor frankness, openness, sincere expression, (candid) synonym: straightforwardness, outspokenness, forthrightness, ingenuousness compare: forthrightness a forthright person speaks directly, plainly and sometimes bluntly ingenuousness a ingenuous person speaks honestly and sincerely, with no hint of evasiveness or deception. morose gloomy, moody, glum, grumpy, ill-tempered, (moroseness) synonym: dolorous: mournful, full of sadness lugubrious: extremely gloomy or dismal saturnine: having bitter disposition or sour outlook on life antonym: optimistic, jovial, sanguine compare: sullen: refuse to associate with people because of bad mood morose: depressed and silent because of bitter or resentful feeling misanthropy: hatred of humankind spiteful or pessimistic attitude on human race adept skilled synonym: handy, clever, able, deft, expert, adroit, dexterous, proficient tips: adept [n]: a highly skilled person = expert adept [adj]: be adept at managing one’s investments saturated soaked, thoroughly wet, full of moisture (saturation) synonym: drenched, steeped, permeated, impregnated, imbued, sodden compare: sodden: heavy with moisture, soggy dull, stupefied, expressionless as from drinking too much liquor saturate literally: my french fries are saturated with oil figuratively: the company saturated the media with ads for its new product pragmatic practical, concerned with everyday affairs as opposed to theory or speculation tips: businessman lawyer congenial sympathetic, agreeable, compatible, kindred, harmonious, having the same taste, nature, temperament antonym: alien, dissident, incongruous capricious unpredictable, sudden change of mind or emotions (caprice) synonyms: flighty, impulsive, fickle, erratic, whimsical, volatile, mercurial tips: He is so capricious. New England has a capricious climate. The stock market is notoriously capricious. blatant noisy, disagreeably or offensively loud, boisterous, clamorous tips: the blatant sound of horns honking in heavy traffic sticking out in a glaring way, obtrusive, flagrant a blatant lie a blatant error a blatant attempt to impress the boss conspicuous &amp; disagreeable obligatory required, necessary, binding, mandatory tips: obligatory duties doing miscellaneous paperwork is an obligatory function of the clerical worker. negligible unimportant, trifling, of little consequence tips: a negligible concern: warrants little or no attention. adamant unyielding, immovable, inflexible, unshakable, unrelenting, implacable, refusing to give in tips: She was adamant in her opposition to the plan. adamant [adj] adamant [n]: a hard substance or stone, like a diamond sporadic occasional, infrequent, irregular, not constant, occurring in a scattered or random way tips: a business venture may have sporadic success. gambler’s luck may be sporadic. sporadic crimes/sporadic outbreaks of a disease antonyms: constant, incessant, unremitting vanguard the forefront of an action or movement, leading position or persons in a movement concur to agree, be in accord with, unite in opinion tips: act together: combine in having an effect Time and chance concurred in our success. happen together: occur at the same time, coincide His pay raise concurred with his promotion. agree： your story concurs with theirs we concurred on almost every point of negotiation. precociousness early development or maturity, especially in mental ability. (precocious) tips: precocious: children whose intellectual emotional development is advanced. antonyms: retardation aloof apart, at a distance, removed, withdrawn, not wishing to speak or associate with others tips: aloof person: reserved and keeps a cool distance aloofness: reluctance to get involved or take an interest in sth. synonyms: unsympathetic, unapproachable, standoffish, indifferent creed belief, professed faith or opinion, especially a system of religious belief. synonyms: doctrine, dogma compare: credo: more learned word, a formal declaration of belief creed: more generally tips: credo: source of incredible, credible, credulous credulous: inclined to believe without questioning synonym: gullible a credulous person tawdry cheap, showy, gaudy, garish, sleazy tips: literally: tawdry clothing figuratively: have a tawdry reputation peevish irritable, cross, complaining, fretful, ill-humored, impatient, difficult to please tips: peevish moods, peevish remarks, peevish looks peeve: something that irritates or annoys Her pet peeve is a wet towel left on the bed. arduous very difficult, hard to achieve or accomplish, requiring great effort tips: something is an arduous task. raising children is arduous responsibility. synonyms: strenuous, laborious, toilsome. personable attractive pleasing in appearance, handsome, comely, fair, presentable compare: sociable, affable, amiable: friendly, pleasant, approachable awkward or unbecoming person cannot be personable. personable: either attractive in appearance or in personality or in both. resolute firmly determined, settled, resolved, having a set opinion or purpose, steadfast, unwavering, persevering tips: The lawyers tried to resolve the case out of court. He was resolute about earning master’s degree and starting a successful business. antonyms: irresolute, unsteady, vacillating supposition assumption, theory, hypothesis (suppose) compare: hypothesis: a preliminary or incomplete theory based on insufficient evidence. There are conflicting hypotheses about the origin of the universe. conjecture: a assumption based on so little evidence that it is merely an educated guess. Every week we hear different conjectures about trends in the stock market. supposition: based on ample evidence or no evidence, may be either sensible or irrational His suppostion about the company’s financial condition proved consistent with the facts. arbitrary unreasoned, based on personal feelings or preferences rather than on reason, logic, or law tips: An arbitrary price for a product is not necessarily a fair price. determined or arrived at in a random or illogical manner. An arbitrary decisions: in haphazard way exercising, unrestrained or absolute power An arbitrary government has no regard for individual liberty. monotonous lacking variety, tediously uniform, unvarying and dull (monotony) tips: monotonous speaker, monotonous music, monotonous job legacy something handed down from the past, an inheritance tips: a gift of money or property provided by a will, an inheritance, bequest Her wealthy uncle left her a generous legacy anything inherited or passed down through time The cultural legacy of ancient Greece and Rome has shaped Western civilization. manifold numerous, varied, consisting of many kinds, elements, features, characteristics compare: many: much, a lot manifold: emphasize variety, diversity a job with manifold duties means things are both numerous and varied multifarious: variety and diversity human race is multifarious multitudinous: containing a multitude, a great number of persons or things multitudious administrative chorestips:manifold operations and divisions, manifold responsibilities pliant bending easily, flexible, adaptable, workable compare: pliant: bending or moving easily pliable: objects that are easily workable supple: material things or human body that is flexible and limber retort a quick reply, especially one that is cutting or witty compare: retort: a swift pointed response rejoinder: any answer or response, but specifically a counter-reply, an answer to a reply tips: Phil’s clever retorts kept his opponent on the defensive. obstinate stubborn, inflexible, unwilling to give in or compromise, not yielding to argument or persuasion tips: obstinate person stubbornly adheres to a purpose or opinion, often regardless of the consequences First we reasoned with him, then we pleaded with him, but no matter what we said he remained obstinate and determined to have his way. lacerate tear, cut roughly, rend, mangle tips: literally The sharp thorn lacerated his thumb. figuratively: wound, afflict, cause pain Her husband’s vicious retort lacerated her pride and made her burst into tears. omnipotent all-powerful, almighty, having unlimited power or authority compare: omnidirectional: all-directional omnipresent omniscient: all-knowing omnivorous: eating all kinds of food She is an avid reader with an omnivorous mind. unscrupulous untrustworthy, dishonorable, deceitful, corrupt, lacking integrity or moral principles compare: scruple: something that causes hesitation or doubt in determining what is appropriate and proper. scrupulous: having scruples The scruplous person is precise, careful, and honest. unscrupulous unscrupulous business practices renaissance a revival, rebirth, resurgence, renewal of life or vigor tips: a cultural renaissance, moral renaissance, spiritual renaissance, a renaissance in the economy genesis a coming into being, beginning, origin, birth, creation tips: the genesis of an idea/ a work of art/ an important social movement/ distinguished career. warrant justify, give good reason for, authorize, sanction the circumstances do not warrant such extraordinary measures. the evidence warrants further investigation these safety procedures are warranted by company regulations tips: guarantee, promise give formal assurance of the Postal Service will not warrant delivery on a specific day the manufacturer warrants the safety of the product cantankerous difficult to deal with, disagreeable, argumentative, quick to quarrel or to exhibit ill will tips: cantankerous old man, cantankerous relatives synonyms: contentious: quarrelsome, prone to argue or dispute malicious: mean-spirited, nasty, spiteful irascible: quick-tempered, easily angered, extremely irritable flippant disrespectful in a frivolous way, treating something serious in a trivial manner tips: expression causing dismay or offense flippant language, flippant remark humorous flippant comments of talk show host synonyms: cheeky, fresh, thoughtless, impertinent antonyms: solemn, sober, sedate, grave subjugate conquer, defeat, vanquish, overwhelm completely, bring under rigid, control, make submissive, dominate, enslave compare: defeat: winning, beating, or opponent in a single engagement defeat a person in an argument/contest/game/fight conquer: achieving a final victory or gaining complete control over an opponent after a series of contests After a long and arduous campaign, Caesar conquered the Gauls. subjugate: domination, bringing the vanquished opponent under complete and rigid control Hitler brutally subjugated people. subjugation war psychological domination subjugate an addiction, subjugate a impulse / an emotion - yoke it, make it submit to your will, bring it under complete control. wry twisted, crooked, lopsided, askew, distorted in an odd, amusing way tips: twisted twisted in a peculiar and humorous manner a wry simile or grin: crooked, lopsided,comical a wry remark: funny or sarcastic twist to it a person with a wry sense of humor: twisting or distorting things in a laughable way urbane polished, sophisticated, suave, cosmopolitan tips: Mary’s stunning designer dresses and witty, urbane conversation made her a popular guest at all the high-society parties. jargon specialized and pretentious language; speech or writing that is highly technical and difficult to understand tips: a means for members of a particular group to communicate precisely and efficiently medical jargon; computerese; legal jargon any pretentious speech or writing that seems unnecessarily difficult to understand savvy businesspeople know that using a lot of professional jargon will only alienate clients. prudent cautious, careful, planning wisely, exercising sound judgment in practical matters synonyms: discreet, judicious, circumspect spending carefully, using one’s resources wisely thrifty, economical and frugal compare circumspect circumspect person: looks around carefully to make sure that no unforseen circumstance will frustrate a plan of action. prudent prudent people: concerned with protecting their personal interest and providing for a rainy day.(sound, careful judgment in handling practical matters, especially money) inviolable secure, safe from assault, infringement or destruction, sacred, untouchable, unassailable, incorruptible tips: inviolable peace inviolable contract inviolable oath or promise inviolable place commodious spacious, having plenty of room, comfortably convenient synonyms: ample, capacious compare: accommodate, accommodations: sleeping quarters, lodging proximity nearness, closeness, state of being in the vicinity of something tips: the proximity of their houses the proximity of historic events the proximity of two ideas In modern society, marriage between first cousins is forbidden because of their proximity of blood relation. marriage with the girl or boy next door, proximity was the deciding factor.","categories":[{"name":"Languages","slug":"Languages","permalink":"http://yoursite.com/categories/Languages/"},{"name":"English","slug":"Languages/English","permalink":"http://yoursite.com/categories/Languages/English/"},{"name":"Verbal Advantage","slug":"Languages/English/Verbal-Advantage","permalink":"http://yoursite.com/categories/Languages/English/Verbal-Advantage/"}],"tags":[{"name":"English","slug":"English","permalink":"http://yoursite.com/tags/English/"},{"name":"Vocabularies","slug":"Vocabularies","permalink":"http://yoursite.com/tags/Vocabularies/"}]},{"title":"WSJ Collections","slug":"WSJ 2019","date":"2019-01-23T05:00:00.000Z","updated":"2019-02-11T10:40:21.286Z","comments":true,"path":"2019/01/23/WSJ 2019/","link":"","permalink":"http://yoursite.com/2019/01/23/WSJ 2019/","excerpt":"","text":"This note contains some summaries of news from the Wall Street Journal. Stocks Decline as Growth Concerns ResurfaceDate: Jan. 22, 2019; By Michael Wursthorn and Avantika Chilkoti Points: The main index in US market fell down, seemly halting the recoveries. IMF reduced its forecast for global economic growth in 2019. Chinese economy decelerate faster than expected, with growth at the slowest annual pace in 2018 since 1990. FT said Trump administration turned down an offer hold preparatory trade talks with China, which was denied by officials. US economy outlook was muddied by recent housing data, which showed existing-home sales fell in Dec. to the weakest level in more than 3 years. Idiom &amp; Phrase &amp; Sentence: “We are in a positive, but slower, meandering path of growth,” with US-China trade tensions, the continuing government shutdown and the overall impact on corporate profits all acting as wild cards for investors that could drastically alter the investment landscape, He added. Links:Stocks Decline as Growth Concerns Resurface Scamming Grandma: Financial Abuse of Seniors Hits RecordDate: Jan. 24, 2019; By Yuka Hayashi Points: Cases of elder financial abuse was reported more than double the amount five years earlier. New law was enacted to prompt banks to address frauds and scams. Bankers attribute a increase in social media use by the older for a surge in fraud cases targeting seniors. Idiom &amp; Phrase &amp; Sentence: Only later did he find out that there was no DUI and his grandson hadn’t been in an accident. Besides the grandchild scam, there are romance or online dating schemes in which victims are deceived into online relationships before being swindled out of their savings. Links:Scamming Grandma: Financial Abuse of Seniors Hits Record As China Trade Talks Begin, Trump Faces Pressure to Make a DealDate: Jan. 29, 2019; By Vivian Salama Points: Recent: Trump gets pressure. Chinese tariffs imposed to counter U.S. levies have a negative impact on business groups and his staunchest supporters and constituencies. Background: Trump made a pledge. Trump are on a pledge to renegotiate trade deals with the aim of protecting American workers. If optimistic, it is a big victory and create real momentum across the globe. However: risk for Republicans, if it is failure. Another source of pressure: Concerns that the fight drag on indefinitely Next: Talk will begin Wednesday and conclude Thursday. Talk aimed at staving off the plans of raising tariffs. Two sides remain far apart, with Chinese little sign of a change. China hawks and business groups are concerned that Trump seek a quick win. Idiom &amp; Phrase &amp; Sentence: As stocks swooned, Mr. Trump anxiously called advisers both inside and outside the White House, seeking reassurances that his stance on China wasn’t driving the selloff. Links:As China Trade Talks Begin, Trump Faces Pressure to Make a Deal","categories":[{"name":"Languages","slug":"Languages","permalink":"http://yoursite.com/categories/Languages/"},{"name":"English","slug":"Languages/English","permalink":"http://yoursite.com/categories/Languages/English/"},{"name":"Wall Street Journal","slug":"Languages/English/Wall-Street-Journal","permalink":"http://yoursite.com/categories/Languages/English/Wall-Street-Journal/"}],"tags":[{"name":"English","slug":"English","permalink":"http://yoursite.com/tags/English/"},{"name":"WSJ","slug":"WSJ","permalink":"http://yoursite.com/tags/WSJ/"}]},{"title":"Derivatives Basics","slug":"Derivatives Basics","date":"2019-01-21T05:00:00.000Z","updated":"2020-02-16T18:26:32.568Z","comments":true,"path":"2019/01/21/Derivatives Basics/","link":"","permalink":"http://yoursite.com/2019/01/21/Derivatives Basics/","excerpt":"","text":"This note contains basic conceptions of financial instruments and derivatives including stock, bonds, forward contracts, swaps, options. Classification of financial instruments basic securities fixed income bonds bank account loans equities stocks derivatives and contracts options (nonlinear function of a stock) calls &amp; pulls exotic options swaps futures &amp; forwards credit risk derivatives stocks issued by firms to finance operations represent ownership of the firm price known today, but not in the future may or may not pay diviends bonds price known today future payoffs known at fixed dates otherwise the price movement is random final payoff at maturity: face value/ nominal value/principal intermediate payoffs: coupons exposed to default/credit risk derivatives Sell for a price/value/premium today. Future value derived from the value of theunderlying securities (as a function ofthose). Traded at exchanges – standardizedcontracts, no credit risk; Over-the-counter (OTC) – a network ofdealers and institutions, can be nonstandard, some credit risk. Why derivatives? To hedge risk (primary reason) To speculate To attain “arbitrage” profit To exchange one type of payoff for another To circumvent regulations (flexible) Forward Contract An agreement to buy (long) or sell (short) a given underlying asset S: Underlying asset could be stock or merchandise At a predetermined future date T (maturity). At a predetermined price F (forward price). F is chosen so that the contract has zero value today. a kind of zero sum game Today: gain &amp; loss are 0 (different from options) Delivery takes place at maturity T: Payoff at maturity: Long: S(T) - F Short: F - S(T) Price F set when the contract is established. S(T) = spot (market) price at maturity Long position: obligation to buy Short position: obligation to sell Differences with options: Delivery has to take place. Zero value today. Example On May 13, a firm enters into a longforward contract to buy one million euros insix months at an exchange rate of 1.3. On November 13, the firm pays F=$1,300,000 and receives S(T)= one million euros. How does the payoff look like at time T as afunction of the dollar value of S(T) spotexchange rate? graphs SwapsAgreement between two parties to exchange two series of payments. Classic interest rate swap: One party pays fixed interest rate payments on a notional amount. Counterparty pays floating (random) interest rate payments on the same notional amount. Floating rate is often linked to LIBOR (London Interbank Offer Rate), reset at every payment date. The two parties may be exposed to different interest rates in different markets, or to different institutional restrictions, or to different regulations. a swap example New pension regulations require higher investment in fixed income securities by pension funds, creating a problem: liabilities are long-term while new holdings of fixed income securities may be short-term. Instead of selling assets such as stocks, a pension fund can enter a swap, exchanging returns from stocks for fixed income returns. Or, if it wants to have an option not to exchange, it can buy swaptions instead. Example: Swap Comparative AdvantageUS firm B wants to borrow AUD, Australian firm A wants to borrow USD: Firm B can borrow at 5% in USD, 12.6% AUD Firm A can borrow at 7% USD, 13% AUD Expected gain = (7-5) – (13-12.6) = 1.6% Swaps: Bank gains 1.3% on USD, loses 1.1% on AUD, gain=0.2% Firm B gains (12.6-11.9) = 0.7% Firm A gains (7-6.3) = 0.7% Part of the reason for the gain is credit risk involved","categories":[{"name":"Economics","slug":"Economics","permalink":"http://yoursite.com/categories/Economics/"},{"name":"Finance","slug":"Economics/Finance","permalink":"http://yoursite.com/categories/Economics/Finance/"},{"name":"Derivatives","slug":"Economics/Finance/Derivatives","permalink":"http://yoursite.com/categories/Economics/Finance/Derivatives/"}],"tags":[{"name":"Derivatives","slug":"Derivatives","permalink":"http://yoursite.com/tags/Derivatives/"},{"name":"Finance","slug":"Finance","permalink":"http://yoursite.com/tags/Finance/"}]},{"title":"C++ Basics","slug":"C++ Basics","date":"2019-01-15T16:00:00.000Z","updated":"2019-03-18T08:05:25.546Z","comments":true,"path":"2019/01/15/C++ Basics/","link":"","permalink":"http://yoursite.com/2019/01/15/C++ Basics/","excerpt":"","text":"This note contains basic structures of C++ including Iostream, if, while, for controlling statements. IOstreamStream class: standard I/O read &amp; write files Standard I/O Input: screen Output: keyboard notations 1.input: &gt;&gt;; output: &lt;&lt; cout &lt;&lt; expression &lt;&lt; expression cin &gt;&gt; expression &gt;&gt; *expression” 12int a, b;cin &gt;&gt; a &gt;&gt; b 2. manipulator dec: decimal hex: hexadecimal oct: octal ws: extract blank character endl: change a line and refresh current ends: insert blank character setsprecision(int): set the number of decimals of floats setw(int): set width cout &lt;&lt; setw(5) &lt;&lt; setprecision(3) &lt;&lt; 3.1415 if statementsyntax: if(expression) statement 1if (x &gt; y) cout &lt;&lt; x; if(expression) statement1else statement2 12if ( x &gt; y) cout &lt;&lt; x;else cout &lt;&lt; y; if(expression1) statement1else if(expression2) statement2else if(expression3) statement3…else statementn determine whether a year is a leap year 1234567891011121314#include &lt;iostream&gt; using namespace stdint main()&#123;int year;bool isLeapYear;cout &lt;&lt; &quot;Enter the year: &quot;;cin &gt;&gt; year;isLeapYear = ((year % 4 == 0 &amp;&amp; year &amp; 100 != 0) || (year % 400 == 0));if (isLeapYear) cout &lt;&lt; year &lt;&lt; &quot;is a leap year&quot; &lt;&lt; endl;else cout &lt;&lt; year &lt;&lt; &quot;is not a leap year&quot; &lt;&lt; endl;return 0;&#125; nesting: if(expression1) if(expression2) statement1 else statement2else if(expression3) statement3 else statement4 tips: match each if and else, or use {} compare 2 input integers 123456789101112131415#include&lt;iostream&gt;using namespace std;int main()&#123; int x, y; cout &lt;&lt; \"Enter x and y: \"; cin &gt;&gt; x &gt;&gt; y; if (x != y) if (x &gt; y) cout &lt;&lt; \"x &gt; y\" &lt;&lt; endl; else cout &lt;&lt; \"x &lt; y\" &lt;&lt; endl; else cout &lt;&lt; \"x = y\" &lt;&lt; endl;return 0;&#125; switch statementsyntax: switch(expression){case expression1 : statement1 calculate the area of a graph while statementsyntax: while (expression) statement tips: The statement must contain what changes the conditions of loop, which can be composite. order: calculate the expression first. If it is true, do the statement calculate the sum of natural number 1 ~ 10 123456789101112&gt; #include &lt;iostream&gt;&gt; using namespace std;&gt; int main()&#123;&gt; int i = 1, sum = 0;&gt; while (i &lt;= 10)&#123;&gt; sum += i; //sum = sum + i;&gt; i++;&gt; &#125;&gt; cout &lt;&lt; \"sum = \" &lt;&lt; sum &lt;&lt; endl;&gt; return 0;&gt; &#125;&gt; do-while statementsyntax: calculate the sum of natural number 1 ~ 1012345678910111213#include &lt;iostream&gt;using namespace std;int main()&#123; int i = 1, sum = 0; do &#123; sum += i; i++; &#125; while (i &lt;= 10); cout &lt;&lt; \"sum = \" &lt;&lt; sum &lt;&lt; endl; return 0;&#125;&gt; for statementsyntax: for(initial statement; expression1; expression2) statement tips: If expression1 is true, do the loop. After the loop, do the expression2. The for statement can replace the while and do-while statement. calculate the sum of natural number 1 ~ 101234567891011#include &lt;iostream&gt;using namespace std;int main()&#123; int i = 1, sum = 0; for(i=1;i&lt;=10;i++) &#123; sum += i; &#125; cout &lt;&lt; \"sum = \" &lt;&lt; sum &lt;&lt; endl; return 0;&#125; find all the factors of an input integer nesting &amp; other statementsyntax: break continue goto input an array of integers, determine whether each is positive or negative and count the number of them respectively definition of type1. definition typedef using 2. enumeration enum TypeName {list of values} 12enum Weekday&#123;SUN, MON, TUE, WED, THU, FRI, SAT&#125; tips: they cannot be evaluated to new values. they can be matched with new values when defined. 12enum Weekday&#123;SUN=7, MON=1,&#125; they can be caluated. 3. initial auto decltype","categories":[{"name":"Computer Science","slug":"Computer-Science","permalink":"http://yoursite.com/categories/Computer-Science/"},{"name":"Programming","slug":"Computer-Science/Programming","permalink":"http://yoursite.com/categories/Computer-Science/Programming/"},{"name":"C++","slug":"Computer-Science/Programming/C","permalink":"http://yoursite.com/categories/Computer-Science/Programming/C/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"},{"name":"MOOC","slug":"MOOC","permalink":"http://yoursite.com/tags/MOOC/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-12-30T16:00:00.000Z","updated":"2019-01-24T08:14:01.579Z","comments":true,"path":"2018/12/30/hello-world/","link":"","permalink":"http://yoursite.com/2018/12/30/hello-world/","excerpt":"","text":"“Hello World” is a magic sentence for programmers, since it is said that Brian Kernighan first wrote and ran it in a tutorial of language B in 1973, which was referred again in his book The C Programming Language in 1978. Because of the prevalence of this book, other programmers gradually started to write how to print “Hello World” in their books as the very first program. Afterwards it becomes such a tradition that almostall the programming books will follow it. So does the first web-page of my personal blog when generated automatically by github. Personally speaking, I find that “Hello World” is amazing. For every beginner of programming like me, not only does “Hello World” sound like an appropriate greeting to the new code-world, but indicates the curiosity and a spirit of exploration, which fascinates me a lot. Moreover, it is also a kind of encouragement both for my exploration on this online platform and for my educational journey in several years. Therefore, I believe “Hello World” will be a good start for my personal blog and my life at the near end of the age 22. I plan to make this blog an academics and profession oriented place, with some summarization of Mathematics, Computer Science, Finance or Business idea, which is part of the reason why I call it Guangnan’s Notes. Of course, I will post some stories and retrospect of my life, in a relatively formal way, on the blog. If you are interested in and curious about the other sides about me, please feel free to contact me on the social media. So, Let’s start. Welcome to Guangnan’s Notes!","categories":[{"name":"Thoughts","slug":"Thoughts","permalink":"http://yoursite.com/categories/Thoughts/"},{"name":"Other","slug":"Thoughts/Other","permalink":"http://yoursite.com/categories/Thoughts/Other/"}],"tags":[{"name":"Journal","slug":"Journal","permalink":"http://yoursite.com/tags/Journal/"}]}]}