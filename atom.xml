<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Guangnan&#39;s Notes</title>
  
  <subtitle>I rest, I rust</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-30T20:18:26.272Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ygnmax</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Asset Pricing - Derivatives</title>
    <link href="http://yoursite.com/2020/01/30/Summary%20of%20Asset%20Pricing%20Derivatives/"/>
    <id>http://yoursite.com/2020/01/30/Summary of Asset Pricing Derivatives/</id>
    <published>2020-01-30T05:00:00.000Z</published>
    <updated>2020-01-30T20:18:26.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Option"><a href="#Option" class="headerlink" title="Option"></a>Option</h1><h2 id="Real-Option-Valuation-in-Multiple-Dimensions-Using-Poisson-Optional-Stopping-Times"><a href="#Real-Option-Valuation-in-Multiple-Dimensions-Using-Poisson-Optional-Stopping-Times" class="headerlink" title="Real-Option Valuation in Multiple Dimensions Using Poisson Optional Stopping Times"></a>Real-Option Valuation in Multiple Dimensions Using Poisson Optional Stopping Times</h2><p>28 January 2020 from JFQA<br><a href="http://pdfs.semanticscholar.org/94a1/56cdc6359a0c90061bb678fa9ef32ed5be6c.pdf" target="_blank" rel="noopener">http://pdfs.semanticscholar.org/94a1/56cdc6359a0c90061bb678fa9ef32ed5be6c.pdf</a><br>We provide <strong>a new framework for valuing multidimensional real options</strong> where opportunities to exercise the option are generated by an exogenous Poisson process, which can be viewed as a liquidity constraint on decision times. This approach, which we call the Poisson optional stopping times (POST) method, finds the value function as a monotone sequence of lower bounds. </p><ul><li>In a case study, we demonstrate that the frequently used quasi-analytic method yields a suboptimal policy and an inaccurate value function. </li><li>The proposed method is demonstrably correct, straightforward to implement, reliable in computation, and broadly applicable in analyzing multidimensional option-valuation problems.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Option&quot;&gt;&lt;a href=&quot;#Option&quot; class=&quot;headerlink&quot; title=&quot;Option&quot;&gt;&lt;/a&gt;Option&lt;/h1&gt;&lt;h2 id=&quot;Real-Option-Valuation-in-Multiple-Dimensions-Usin
      
    
    </summary>
    
      <category term="Economics" scheme="http://yoursite.com/categories/Economics/"/>
    
      <category term="Literature Review" scheme="http://yoursite.com/categories/Economics/Literature-Review/"/>
    
      <category term="Asset pricing" scheme="http://yoursite.com/categories/Economics/Literature-Review/Asset-pricing/"/>
    
    
      <category term="Asset Pricing" scheme="http://yoursite.com/tags/Asset-Pricing/"/>
    
      <category term="Papers" scheme="http://yoursite.com/tags/Papers/"/>
    
  </entry>
  
  <entry>
    <title>Asset Pricing - Fixed Income</title>
    <link href="http://yoursite.com/2020/01/30/Summary%20of%20Asset%20Pricing%20Fixed%20Income/"/>
    <id>http://yoursite.com/2020/01/30/Summary of Asset Pricing Fixed Income/</id>
    <published>2020-01-30T05:00:00.000Z</published>
    <updated>2020-01-30T15:23:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Theory"><a href="#Theory" class="headerlink" title="Theory"></a>Theory</h1><h2 id="An-incomplete-equilibrium-with-a-stochastic-annuity"><a href="#An-incomplete-equilibrium-with-a-stochastic-annuity" class="headerlink" title="An incomplete equilibrium with a stochastic annuity"></a>An incomplete equilibrium with a stochastic annuity</h2><p>29 January 2020 from FS<br><a href="http://link.springer.com/article/10.1007/s00780-020-00415-6?utm_source=researcher_app&amp;utm_medium=referral&amp;utm_campaign=RESR_MRKT_Researcher_inbound" target="_blank" rel="noopener">http://link.springer.com/article/10.1007/s00780-020-00415-6?utm_source=researcher_app&amp;utm_medium=referral&amp;utm_campaign=RESR_MRKT_Researcher_inbound</a><br>We prove the global existence of an incomplete, continuous-time finite-agent Radner equilibrium in which exponential agents optimise their expected utility over both running consumption and terminal wealth. </p><ul><li>The market consists of a traded annuity, and along with unspanned income, the market is incomplete. </li><li>Set in a Brownian framework, the income is driven by a multidimensional diffusion and in particular includes mean-reverting dynamics. </li><li>The equilibrium is characterised by a system of fully coupled quadratic backward stochastic differential equations, a solution to which is proved to exist under Markovian assumptions. </li><li>We also show that the equilibrium allocations lead to Pareto-optimal allocations only in exceptional situations.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Theory&quot;&gt;&lt;a href=&quot;#Theory&quot; class=&quot;headerlink&quot; title=&quot;Theory&quot;&gt;&lt;/a&gt;Theory&lt;/h1&gt;&lt;h2 id=&quot;An-incomplete-equilibrium-with-a-stochastic-annui
      
    
    </summary>
    
      <category term="Economics" scheme="http://yoursite.com/categories/Economics/"/>
    
      <category term="Literature Review" scheme="http://yoursite.com/categories/Economics/Literature-Review/"/>
    
      <category term="Asset pricing" scheme="http://yoursite.com/categories/Economics/Literature-Review/Asset-pricing/"/>
    
    
      <category term="Asset Pricing" scheme="http://yoursite.com/tags/Asset-Pricing/"/>
    
      <category term="Papers" scheme="http://yoursite.com/tags/Papers/"/>
    
      <category term="Fixed Income" scheme="http://yoursite.com/tags/Fixed-Income/"/>
    
  </entry>
  
  <entry>
    <title>Python Regular Expression Basics</title>
    <link href="http://yoursite.com/2020/01/29/Python%20Regular%20Expression%20Basics/"/>
    <id>http://yoursite.com/2020/01/29/Python Regular Expression Basics/</id>
    <published>2020-01-29T05:00:00.000Z</published>
    <updated>2020-01-29T20:54:47.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Regular-Expression-Quick-Link"><a href="#Regular-Expression-Quick-Link" class="headerlink" title="Regular Expression Quick Link"></a>Regular Expression Quick Link</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">^        Matches the beginning of a line</span><br><span class="line">$        Matches the end of the line</span><br><span class="line">.        Matches any character</span><br><span class="line">\s       Matches whitespace</span><br><span class="line">\S       Matches any non-whitespace character</span><br><span class="line">*        Repeats a character zero <span class="keyword">or</span> more times</span><br><span class="line">*?       Repeats a character zero or more times </span><br><span class="line">         (non-greedy)</span><br><span class="line">+        Repeats a character one <span class="keyword">or</span> more times</span><br><span class="line">+?       Repeats a character one or more times </span><br><span class="line">         (non-greedy)</span><br><span class="line">[aeiou]  Matches a single character <span class="keyword">in</span> the listed set</span><br><span class="line">[^XYZ]   Matches a single character <span class="keyword">not</span> <span class="keyword">in</span> the listed set</span><br><span class="line">[a-z0<span class="number">-9</span>] The set of characters can include a range</span><br><span class="line">(        Indicates where string extraction <span class="keyword">is</span> to start</span><br><span class="line">)        Indicates where string extraction <span class="keyword">is</span> to end</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Regular-Expression-Quick-Link&quot;&gt;&lt;a href=&quot;#Regular-Expression-Quick-Link&quot; class=&quot;headerlink&quot; title=&quot;Regular Expression Quick Link&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Computer Science" scheme="http://yoursite.com/categories/Computer-Science/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Computer-Science/Programming/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/Computer-Science/Programming/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Regular Expression" scheme="http://yoursite.com/tags/Regular-Expression/"/>
    
  </entry>
  
  <entry>
    <title>Monetary Papers</title>
    <link href="http://yoursite.com/2020/01/28/Summary%20of%20Monetary%20and%20Bank%20Papers/"/>
    <id>http://yoursite.com/2020/01/28/Summary of Monetary and Bank Papers/</id>
    <published>2020-01-28T05:00:00.000Z</published>
    <updated>2020-01-30T15:31:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Monetary-Policy"><a href="#Monetary-Policy" class="headerlink" title="Monetary Policy"></a>Monetary Policy</h1><h2 id="Optimal-Monetary-Policy-with-Informational-Frictions"><a href="#Optimal-Monetary-Policy-with-Informational-Frictions" class="headerlink" title="Optimal Monetary Policy with Informational Frictions"></a>Optimal Monetary Policy with Informational Frictions</h2><p>28 January 2020 from JPE<br><a href="https://dspace.mit.edu/bitstream/1721.1/66950/1/Marios1122.pdf" target="_blank" rel="noopener">https://dspace.mit.edu/bitstream/1721.1/66950/1/Marios1122.pdf</a><br>We study optimal policy in a business-cycle setting in which firms hold dispersed private information about, or are rationally inattentive to, the state of the economy. The informational friction is the source of both nominal and real rigidity. </p><ul><li>Because of the latter, the optimal monetary policy does not target price stability. Instead, it targets a negative relation between the nominal price level and real economic activity. </li><li>Such leaning against the wind helps maximize production efficiency. An additional contribution is the adaptation of the primal approach of the Ramsey literature to a flexible form of informational friction.</li></ul><h2 id="Banks’-Balance-Sheets-and-Liquidation-Values-Evidence-from-Real-Estate-Collateral"><a href="#Banks’-Balance-Sheets-and-Liquidation-Values-Evidence-from-Real-Estate-Collateral" class="headerlink" title="Banks’ Balance Sheets and Liquidation Values: Evidence from Real Estate Collateral"></a>Banks’ Balance Sheets and Liquidation Values: Evidence from Real Estate Collateral</h2><p>17 June 2019 from RFS<br><a href="https://academic.oup.com/rfs/article/33/2/504/5512487?rss=1&amp;utm_source=researcher_app&amp;utm_medium=referral&amp;utm_campaign=RESR_MRKT_Researcher_inbound" target="_blank" rel="noopener">https://academic.oup.com/rfs/article/33/2/504/5512487?rss=1&amp;utm_source=researcher_app&amp;utm_medium=referral&amp;utm_campaign=RESR_MRKT_Researcher_inbound</a><br>This paper finds that <strong>declining bank equity or liquidity</strong> reduces <strong>liquidation values of bank-owned real estate and accelerates the pace of asset sales</strong>. </p><ul><li>Buyers of these assets earn significant returns for providing liquidity to banks, as prices tend to rebound sharply after sales by illiquid banks. </li><li>Lower liquidation values also depress the prices of nearby real estate transactions. </li><li>Policy interventions, such as equity injections and central bank asset purchases, increase liquidation values by providing institutions with the balance sheet capacity to slow asset sales. </li><li>This evidence suggests that <strong>balance sheet adjustments at financial institutions can explain real asset price dynamics</strong>.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Monetary-Policy&quot;&gt;&lt;a href=&quot;#Monetary-Policy&quot; class=&quot;headerlink&quot; title=&quot;Monetary Policy&quot;&gt;&lt;/a&gt;Monetary Policy&lt;/h1&gt;&lt;h2 id=&quot;Optimal-Monet
      
    
    </summary>
    
      <category term="Economics" scheme="http://yoursite.com/categories/Economics/"/>
    
      <category term="Literature Review" scheme="http://yoursite.com/categories/Economics/Literature-Review/"/>
    
      <category term="Monetary" scheme="http://yoursite.com/categories/Economics/Literature-Review/Monetary/"/>
    
    
      <category term="Macroeconomics" scheme="http://yoursite.com/tags/Macroeconomics/"/>
    
      <category term="Papers" scheme="http://yoursite.com/tags/Papers/"/>
    
      <category term="Monetary" scheme="http://yoursite.com/tags/Monetary/"/>
    
  </entry>
  
  <entry>
    <title>Behavioral Finance Papers</title>
    <link href="http://yoursite.com/2020/01/28/Summary%20of%20Behavioral%20Finance%20Papers/"/>
    <id>http://yoursite.com/2020/01/28/Summary of Behavioral Finance Papers/</id>
    <published>2020-01-28T05:00:00.000Z</published>
    <updated>2020-01-30T20:19:22.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Empirical-Behavioral-Asset-Pricing"><a href="#Empirical-Behavioral-Asset-Pricing" class="headerlink" title="Empirical Behavioral Asset Pricing"></a>Empirical Behavioral Asset Pricing</h1><h2 id="Googling-Investor-Sentiment-around-the-World"><a href="#Googling-Investor-Sentiment-around-the-World" class="headerlink" title="Googling Investor Sentiment around the World"></a>Googling Investor Sentiment around the World</h2><p>28 January 2020 from JFQA<br><a href="http://pdfs.semanticscholar.org/d881/c405d186d0f15c22c258555f024f03401cf7.pdf" target="_blank" rel="noopener">http://pdfs.semanticscholar.org/d881/c405d186d0f15c22c258555f024f03401cf7.pdf</a><br>We study <strong>how investor sentiment affects stock prices</strong> around the world. Relying on households’ Google search behavior, we construct a <strong>weekly measure of sentiment for 38 countries during 2004–2014</strong>. We validate the sentiment index in tests using sports outcomes</p><ul><li>the sentiment measure is a contrarian predictor of country-level market returns. </li><li>Furthermore, we document an important role of global sentiment in stock markets.</li></ul><h2 id="Security-analysts-and-capital-market-anomalies"><a href="#Security-analysts-and-capital-market-anomalies" class="headerlink" title="Security analysts and capital market anomalies"></a>Security analysts and capital market anomalies</h2><p>28 January 2020 from JFE<br><a href="https://www.sciencedirect.com/science/article/pii/S0304405X20300192?dgcid=rss_sd_all&amp;utm_source=researcher_app&amp;utm_medium=referral&amp;utm_campaign=RESR_MRKT_Researcher_inbound" target="_blank" rel="noopener">https://www.sciencedirect.com/science/article/pii/S0304405X20300192?dgcid=rss_sd_all&amp;utm_source=researcher_app&amp;utm_medium=referral&amp;utm_campaign=RESR_MRKT_Researcher_inbound</a><br>We examine the value and efficiency of analyst recommendations through the lens of capital market anomalies. </p><ul><li>We find that analysts do not fully use the information in anomaly signals when making recommendations. <ul><li>Analysts tend to give more favorable consensus recommendations to stocks classified as overvalued and, more important, these stocks subsequently tend to have particularly negative abnormal returns. </li><li>Analysts whose recommendations are better aligned with <strong>anomaly signals</strong> are more skilled and <strong>elicit stronger recommendation announcement returns</strong>. </li></ul></li><li>Our findings suggest that <strong>analysts’ biased recommendations</strong> could be a <strong>source of market friction</strong> that <strong>impedes the efficient correction of mispricing</strong>.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Empirical-Behavioral-Asset-Pricing&quot;&gt;&lt;a href=&quot;#Empirical-Behavioral-Asset-Pricing&quot; class=&quot;headerlink&quot; title=&quot;Empirical Behavioral Ass
      
    
    </summary>
    
      <category term="Economics" scheme="http://yoursite.com/categories/Economics/"/>
    
      <category term="Literature Review" scheme="http://yoursite.com/categories/Economics/Literature-Review/"/>
    
      <category term="Behavioral Finance" scheme="http://yoursite.com/categories/Economics/Literature-Review/Behavioral-Finance/"/>
    
    
      <category term="Papers" scheme="http://yoursite.com/tags/Papers/"/>
    
      <category term="Behavioral Finance" scheme="http://yoursite.com/tags/Behavioral-Finance/"/>
    
  </entry>
  
  <entry>
    <title>Economic Growth Papers</title>
    <link href="http://yoursite.com/2020/01/28/Summary%20of%20Economic%20Growth%20Papers/"/>
    <id>http://yoursite.com/2020/01/28/Summary of Economic Growth Papers/</id>
    <published>2020-01-28T05:00:00.000Z</published>
    <updated>2020-01-30T20:19:54.061Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Economics" scheme="http://yoursite.com/categories/Economics/"/>
    
      <category term="Literature Review" scheme="http://yoursite.com/categories/Economics/Literature-Review/"/>
    
      <category term="Economic Growth" scheme="http://yoursite.com/categories/Economics/Literature-Review/Economic-Growth/"/>
    
    
      <category term="Papers" scheme="http://yoursite.com/tags/Papers/"/>
    
      <category term="Economic Growth" scheme="http://yoursite.com/tags/Economic-Growth/"/>
    
  </entry>
  
  <entry>
    <title>Summary of Monetary Papers</title>
    <link href="http://yoursite.com/2020/01/28/Summary%20of%20Monetary%20Papers/"/>
    <id>http://yoursite.com/2020/01/28/Summary of Monetary Papers/</id>
    <published>2020-01-28T05:00:00.000Z</published>
    <updated>2020-01-28T18:56:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Monetary-Policy"><a href="#Monetary-Policy" class="headerlink" title="Monetary Policy"></a>Monetary Policy</h1><h2 id="Optimal-Monetary-Policy-with-Informational-Frictions"><a href="#Optimal-Monetary-Policy-with-Informational-Frictions" class="headerlink" title="Optimal Monetary Policy with Informational Frictions"></a>Optimal Monetary Policy with Informational Frictions</h2><p>28 January 2020 from JPE<br><a href="https://dspace.mit.edu/bitstream/1721.1/66950/1/Marios1122.pdf" target="_blank" rel="noopener">https://dspace.mit.edu/bitstream/1721.1/66950/1/Marios1122.pdf</a><br>We study optimal policy in a business-cycle setting in which firms hold dispersed private information about, or are rationally inattentive to, the state of the economy. The informational friction is the source of both nominal and real rigidity. </p><ul><li>Because of the latter, the optimal monetary policy does not target price stability. Instead, it targets a negative relation between the nominal price level and real economic activity. </li><li>Such leaning against the wind helps maximize production efficiency. An additional contribution is the adaptation of the primal approach of the Ramsey literature to a flexible form of informational friction.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Monetary-Policy&quot;&gt;&lt;a href=&quot;#Monetary-Policy&quot; class=&quot;headerlink&quot; title=&quot;Monetary Policy&quot;&gt;&lt;/a&gt;Monetary Policy&lt;/h1&gt;&lt;h2 id=&quot;Optimal-Monet
      
    
    </summary>
    
      <category term="Economics" scheme="http://yoursite.com/categories/Economics/"/>
    
      <category term="Literature Review" scheme="http://yoursite.com/categories/Economics/Literature-Review/"/>
    
      <category term="Monetary" scheme="http://yoursite.com/categories/Economics/Literature-Review/Monetary/"/>
    
    
      <category term="Macroeconomics" scheme="http://yoursite.com/tags/Macroeconomics/"/>
    
      <category term="Papers" scheme="http://yoursite.com/tags/Papers/"/>
    
      <category term="Monetary" scheme="http://yoursite.com/tags/Monetary/"/>
    
  </entry>
  
  <entry>
    <title>Financial Market Papers</title>
    <link href="http://yoursite.com/2020/01/27/Summary%20of%20Financial%20Market%20Papers/"/>
    <id>http://yoursite.com/2020/01/27/Summary of Financial Market Papers/</id>
    <published>2020-01-27T05:00:00.000Z</published>
    <updated>2020-01-30T20:20:06.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="High-Frequency-Trading"><a href="#High-Frequency-Trading" class="headerlink" title="High-Frequency Trading"></a>High-Frequency Trading</h1><h2 id="High‐Frequency-Trading-and-Market-Performance"><a href="#High‐Frequency-Trading-and-Market-Performance" class="headerlink" title="High‐Frequency Trading and Market Performance"></a>High‐Frequency Trading and Market Performance</h2><p>23 January 2020 from JF<br><a href="https://onlinelibrary.wiley.com/doi/pdfdirect/10.1111/jofi.12882" target="_blank" rel="noopener">https://onlinelibrary.wiley.com/doi/pdfdirect/10.1111/jofi.12882</a><br>We study the consequences of, and potential policy responses to, high‐frequency trading (HFT) via the <strong>tradeoff between liquidity and information production</strong>. Faster speeds facilitate HFT, with consequences for this tradeoff: </p><ul><li>information production decreases because informed traders have less time to trade before HFTs react, </li><li>but liquidity (measured by the bid‐ask spread) improves because informational asymmetries decline.</li><li>HFT also pushes outcomes inside the frontier of this tradeoff. However, outcomes can be restored to the frontier by replacing the limit order book with one of two alternative mechanisms: <ul><li>delaying all orders except cancellations or </li><li>implementing frequent batch auctions.</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;High-Frequency-Trading&quot;&gt;&lt;a href=&quot;#High-Frequency-Trading&quot; class=&quot;headerlink&quot; title=&quot;High-Frequency Trading&quot;&gt;&lt;/a&gt;High-Frequency Tradi
      
    
    </summary>
    
      <category term="Economics" scheme="http://yoursite.com/categories/Economics/"/>
    
      <category term="Literature Review" scheme="http://yoursite.com/categories/Economics/Literature-Review/"/>
    
      <category term="Financial Market" scheme="http://yoursite.com/categories/Economics/Literature-Review/Financial-Market/"/>
    
    
      <category term="Papers" scheme="http://yoursite.com/tags/Papers/"/>
    
      <category term="Financial Market" scheme="http://yoursite.com/tags/Financial-Market/"/>
    
  </entry>
  
  <entry>
    <title>Vim Basics</title>
    <link href="http://yoursite.com/2020/01/27/Vim%20Basics/"/>
    <id>http://yoursite.com/2020/01/27/Vim Basics/</id>
    <published>2020-01-27T05:00:00.000Z</published>
    <updated>2020-01-27T15:44:46.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction-to-vim"><a href="#Introduction-to-vim" class="headerlink" title="Introduction to vim"></a>Introduction to vim</h1><h2 id="3-modes-for-vim"><a href="#3-modes-for-vim" class="headerlink" title="3 modes for vim"></a>3 modes for vim</h2><ul><li><p>insert <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ normal  ```esc</span><br></pre></td></tr></table></figure></p></li><li><p>visual <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Search</span><br><span class="line">In the normal mode, type ```/```, then type what you want to search</span><br><span class="line"></span><br><span class="line">## Replace</span><br><span class="line">+ replace one character / word:</span><br><span class="line">    + in the normal mode, type ```:s```, then type ```/x```, “x” is what you want to replace, then type ```/y```, “y” is what you want to be replaced with. Then type ```enter</span><br></pre></td></tr></table></figure></p><ul><li><p>eg: <figure class="highlight plain"><figcaption><span>then hello will be replaced with hi.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ replace all the target characters / words in one line: </span><br><span class="line">    + in the normal mode, type ```:s```, then type ```/x```, “x” is what you want to replace, then type ```/y```, “y” is what you want to be replaced with, then type ```/g```. Then type ```enter</span><br></pre></td></tr></table></figure></p></li><li><p>eg: <figure class="highlight plain"><figcaption><span>then all the hello in one line will be replaced with hi.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ replace all the target characters / words in the whole file: </span><br><span class="line">    + in the normal mode, type ```:%s```, then type ```/x```, “x” is what you want to replace, then type ```/y```, “y” is what you want to be replaced with, then type ```/g```. Then type ```enter</span><br></pre></td></tr></table></figure></p></li><li><p>eg: <figure class="highlight plain"><figcaption><span>then all the hello in the whole file will be replaced with hi.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Copy and Paste</span><br><span class="line">+ copy one line:</span><br><span class="line">    + in the normal mode, type ```yy``` </span><br><span class="line">    + start a new line, type ```o``` or ```O``` (here you will enter the insert mode)</span><br><span class="line">    + type ```esc``` and back to normal mode</span><br><span class="line">    + type ```p``` to paste</span><br><span class="line">## Delete</span><br><span class="line">+ delete one line:</span><br><span class="line">    + in the normal mode, delete the line you are in, type ```dd</span><br></pre></td></tr></table></figure></p></li></ul></li><li><p>delete multiple lines:</p><ul><li>in the normal mode, type numbers, like <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ then type ```dd</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Revoke"><a href="#Revoke" class="headerlink" title="Revoke"></a>Revoke</h2><ul><li>backward: return to the stage before some commands<ul><li>in the normal mode, type: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ forward: return to the stage before revoking</span><br><span class="line">    + in the normal mode, control: ```control + R</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Loop"><a href="#Loop" class="headerlink" title="Loop"></a>Loop</h2><ul><li><p>insert a great number of an indentical word</p><ul><li><p>eg: insert 100 “hello”s</p><ul><li><p>in the normal mode, type: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ then enter the insert mode, type: ```hello```, and then press ```enter</span><br></pre></td></tr></table></figure></p></li><li><p>then back to normal mode by pressing <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## comment</span><br><span class="line">    + comment one line:</span><br><span class="line">        + type ```#</span><br></pre></td></tr></table></figure></p></li></ul></li><li><p>comment multiple line </p><ul><li><figure class="highlight plain"><figcaption><span>block```, ```space```, ```#``` </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## help</span><br><span class="line">+ in the normal mode, type ```:help</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>in the normal mode, type <code>:usr_01.txt</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Introduction-to-vim&quot;&gt;&lt;a href=&quot;#Introduction-to-vim&quot; class=&quot;headerlink&quot; title=&quot;Introduction to vim&quot;&gt;&lt;/a&gt;Introduction to vim&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="Computer Science" scheme="http://yoursite.com/categories/Computer-Science/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Computer-Science/Programming/"/>
    
      <category term="Vim" scheme="http://yoursite.com/categories/Computer-Science/Programming/Vim/"/>
    
    
      <category term="Vim" scheme="http://yoursite.com/tags/Vim/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Summary of Asset Pricing Papers</title>
    <link href="http://yoursite.com/2020/01/27/Summary%20of%20Asset%20Pricing%20Papers/"/>
    <id>http://yoursite.com/2020/01/27/Summary of Asset Pricing Papers/</id>
    <published>2020-01-27T05:00:00.000Z</published>
    <updated>2020-01-29T06:57:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Equity"><a href="#Equity" class="headerlink" title="Equity"></a>Equity</h1><h2 id="Taming-the-Factor-Zoo-A-Test-of-New-Factors"><a href="#Taming-the-Factor-Zoo-A-Test-of-New-Factors" class="headerlink" title="Taming the Factor Zoo: A Test of New Factors"></a>Taming the Factor Zoo: A Test of New Factors</h2><p>24 January 2020 from JF<br><a href="https://onlinelibrary.wiley.com/doi/pdfdirect/10.1111/jofi.12883" target="_blank" rel="noopener">https://onlinelibrary.wiley.com/doi/pdfdirect/10.1111/jofi.12883</a><br>We propose a model selection method to systematically evaluate the contribution to asset pricing of any new factor, above and beyond what a high‐dimensional set of existing factors explains. </p><ul><li>Our methodology accounts for <strong>model selection mistakes</strong> that produce a bias due to omitted variables, unlike standard approaches that assume perfect variable selection. </li><li>We apply our procedure to a set of factors recently discovered in the literature. While <strong>most of these new factors are shown to be redundant</strong> relative to the existing factors, <strong>a few have statistically significant explanatory power</strong> beyond the hundreds of factors proposed in the past.</li></ul><h2 id="Stock-Return-Asymmetry-Beyond-Skewness"><a href="#Stock-Return-Asymmetry-Beyond-Skewness" class="headerlink" title="Stock Return Asymmetry: Beyond Skewness"></a>Stock Return Asymmetry: Beyond Skewness</h2><p>28 January 2020 form JFQA<br><a href="https://dx.doi.org/10.1017/S0022109019000206?urlappend=%3Fsource%3Drss&amp;utm_source=researcher_app&amp;utm_medium=referral&amp;utm_campaign=RESR_MRKT_Researcher_inbound" target="_blank" rel="noopener">https://dx.doi.org/10.1017/S0022109019000206?urlappend=%3Fsource%3Drss&amp;utm_source=researcher_app&amp;utm_medium=referral&amp;utm_campaign=RESR_MRKT_Researcher_inbound</a><br>We propose two asymmetry measures for stock returns. Unlike the popular skewness measure, our measures are based on the distribution function of the data rather than just the third central moment. </p><ul><li>We present empirical evidence that the greater upside asymmetries calculated using our new measures imply lower average returns in the cross section of stocks.</li><li>In contrast, when using the skewness measure, the relationship between asymmetry and returns is inconclusive.</li></ul><h2 id="Left-Behind-Creative-Destruction-Inequality-and-the-Stock-Market"><a href="#Left-Behind-Creative-Destruction-Inequality-and-the-Stock-Market" class="headerlink" title="Left Behind: Creative Destruction, Inequality, and the Stock Market"></a>Left Behind: Creative Destruction, Inequality, and the Stock Market</h2><p>25 January 2020 from JPE<br><a href="http://pdfs.semanticscholar.org/be07/eb9c6ff27f8fee51f98f44d82e29164d6ab2.pdf" target="_blank" rel="noopener">http://pdfs.semanticscholar.org/be07/eb9c6ff27f8fee51f98f44d82e29164d6ab2.pdf</a><br>We develop a general equilibrium model of asset prices in which <strong>benefits of technological innovation are distributed asymmetrically</strong>. </p><ul><li>Financial market participants <strong>do not capture all economic gains</strong> from innovation even when they own shares in innovating firms. Such gains accrue partly to the innovators, who cannot sell claims on proceeds from their future ideas. </li><li>We show how <strong>the resulting inequality</strong> among agents can give rise to <strong>a high risk premium</strong> on the aggregate stock market, return comovement and average return differences among firms,</li><li>and the failure of traditional representative agent asset pricing models to account for cross-sectional differences in risk premia.</li></ul><h1 id="Option"><a href="#Option" class="headerlink" title="Option"></a>Option</h1><h2 id="Real-Option-Valuation-in-Multiple-Dimensions-Using-Poisson-Optional-Stopping-Times"><a href="#Real-Option-Valuation-in-Multiple-Dimensions-Using-Poisson-Optional-Stopping-Times" class="headerlink" title="Real-Option Valuation in Multiple Dimensions Using Poisson Optional Stopping Times"></a>Real-Option Valuation in Multiple Dimensions Using Poisson Optional Stopping Times</h2><p>28 January 2020 from JFQA<br><a href="http://pdfs.semanticscholar.org/94a1/56cdc6359a0c90061bb678fa9ef32ed5be6c.pdf" target="_blank" rel="noopener">http://pdfs.semanticscholar.org/94a1/56cdc6359a0c90061bb678fa9ef32ed5be6c.pdf</a><br>We provide <strong>a new framework for valuing multidimensional real options</strong> where opportunities to exercise the option are generated by an exogenous Poisson process, which can be viewed as a liquidity constraint on decision times. This approach, which we call the Poisson optional stopping times (POST) method, finds the value function as a monotone sequence of lower bounds. </p><ul><li>In a case study, we demonstrate that the frequently used quasi-analytic method yields a suboptimal policy and an inaccurate value function. </li><li>The proposed method is demonstrably correct, straightforward to implement, reliable in computation, and broadly applicable in analyzing multidimensional option-valuation problems.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Equity&quot;&gt;&lt;a href=&quot;#Equity&quot; class=&quot;headerlink&quot; title=&quot;Equity&quot;&gt;&lt;/a&gt;Equity&lt;/h1&gt;&lt;h2 id=&quot;Taming-the-Factor-Zoo-A-Test-of-New-Factors&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="Economics" scheme="http://yoursite.com/categories/Economics/"/>
    
      <category term="Literature Review" scheme="http://yoursite.com/categories/Economics/Literature-Review/"/>
    
      <category term="Asset pricing" scheme="http://yoursite.com/categories/Economics/Literature-Review/Asset-pricing/"/>
    
    
      <category term="Asset Pricing" scheme="http://yoursite.com/tags/Asset-Pricing/"/>
    
      <category term="Papers" scheme="http://yoursite.com/tags/Papers/"/>
    
  </entry>
  
  <entry>
    <title>Asset Pricing - Equity</title>
    <link href="http://yoursite.com/2020/01/27/Summary%20of%20Asset%20Pricing%20Equities/"/>
    <id>http://yoursite.com/2020/01/27/Summary of Asset Pricing Equities/</id>
    <published>2020-01-27T05:00:00.000Z</published>
    <updated>2020-01-30T20:18:42.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Theory"><a href="#Theory" class="headerlink" title="Theory"></a>Theory</h1><h2 id="Left-Behind-Creative-Destruction-Inequality-and-the-Stock-Market"><a href="#Left-Behind-Creative-Destruction-Inequality-and-the-Stock-Market" class="headerlink" title="Left Behind: Creative Destruction, Inequality, and the Stock Market"></a>Left Behind: Creative Destruction, Inequality, and the Stock Market</h2><p>25 January 2020 from JPE<br><a href="http://pdfs.semanticscholar.org/be07/eb9c6ff27f8fee51f98f44d82e29164d6ab2.pdf" target="_blank" rel="noopener">http://pdfs.semanticscholar.org/be07/eb9c6ff27f8fee51f98f44d82e29164d6ab2.pdf</a><br>We develop a general equilibrium model of asset prices in which <strong>benefits of technological innovation are distributed asymmetrically</strong>. </p><ul><li>Financial market participants <strong>do not capture all economic gains</strong> from innovation even when they own shares in innovating firms. Such gains accrue partly to the innovators, who cannot sell claims on proceeds from their future ideas. </li><li>We show how <strong>the resulting inequality</strong> among agents can give rise to <strong>a high risk premium</strong> on the aggregate stock market, return co-movement and average return differences among firms,</li><li>and the failure of traditional representative agent asset pricing models to account for cross-sectional differences in risk premia.</li></ul><h1 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h1><h2 id="Stock-Return-Asymmetry-Beyond-Skewness"><a href="#Stock-Return-Asymmetry-Beyond-Skewness" class="headerlink" title="Stock Return Asymmetry: Beyond Skewness"></a>Stock Return Asymmetry: Beyond Skewness</h2><p>28 January 2020 form JFQA<br><a href="https://dx.doi.org/10.1017/S0022109019000206?urlappend=%3Fsource%3Drss&amp;utm_source=researcher_app&amp;utm_medium=referral&amp;utm_campaign=RESR_MRKT_Researcher_inbound" target="_blank" rel="noopener">https://dx.doi.org/10.1017/S0022109019000206?urlappend=%3Fsource%3Drss&amp;utm_source=researcher_app&amp;utm_medium=referral&amp;utm_campaign=RESR_MRKT_Researcher_inbound</a><br>We propose two asymmetry measures for stock returns. Unlike the popular skewness measure, our measures are based on the distribution function of the data rather than just the third central moment. </p><ul><li>We present empirical evidence that the greater upside asymmetries calculated using our new measures imply lower average returns in the cross section of stocks.</li><li>In contrast, when using the skewness measure, the relationship between asymmetry and returns is inconclusive.</li></ul><h1 id="Factor"><a href="#Factor" class="headerlink" title="Factor"></a>Factor</h1><h2 id="Taming-the-Factor-Zoo-A-Test-of-New-Factors"><a href="#Taming-the-Factor-Zoo-A-Test-of-New-Factors" class="headerlink" title="Taming the Factor Zoo: A Test of New Factors"></a>Taming the Factor Zoo: A Test of New Factors</h2><p>24 January 2020 from JF<br><a href="https://onlinelibrary.wiley.com/doi/pdfdirect/10.1111/jofi.12883" target="_blank" rel="noopener">https://onlinelibrary.wiley.com/doi/pdfdirect/10.1111/jofi.12883</a><br>We propose a model selection method to systematically evaluate the contribution to asset pricing of any new factor, above and beyond what a high‐dimensional set of existing factors explains. </p><ul><li>Our methodology accounts for <strong>model selection mistakes</strong> that produce a bias due to omitted variables, unlike standard approaches that assume perfect variable selection. </li><li>We apply our procedure to a set of factors recently discovered in the literature. While <strong>most of these new factors are shown to be redundant</strong> relative to the existing factors, <strong>a few have statistically significant explanatory power</strong> beyond the hundreds of factors proposed in the past.</li></ul><h2 id="Lazy-Prices"><a href="#Lazy-Prices" class="headerlink" title="Lazy Prices"></a>Lazy Prices</h2><p>29 January 2020 from JF<br><a href="https://onlinelibrary.wiley.com/doi/pdfdirect/10.1111/jofi.12885" target="_blank" rel="noopener">https://onlinelibrary.wiley.com/doi/pdfdirect/10.1111/jofi.12885</a><br>Using the complete history of regular quarterly and annual filings by U.S. corporations, we show that <strong>changes to the language and construction of financial reports</strong> have strong implications for firms’ future returns and operations. </p><ul><li>A portfolio that <em>shorts “changers”</em> and buys <em>“nonchangers”</em> earns up to 188 basis points per month in alpha (over 22% per year) in the future. </li><li>Moreover, changes to 10‐Ks predict future earnings, profitability, future news announcements, and even future firm‐level bankruptcies. </li><li>Unlike typical underreaction patterns, we find <strong>no announcement effect</strong>, suggesting that investors are inattentive to these simple changes across the universe of public firms.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Theory&quot;&gt;&lt;a href=&quot;#Theory&quot; class=&quot;headerlink&quot; title=&quot;Theory&quot;&gt;&lt;/a&gt;Theory&lt;/h1&gt;&lt;h2 id=&quot;Left-Behind-Creative-Destruction-Inequality-and-t
      
    
    </summary>
    
      <category term="Economics" scheme="http://yoursite.com/categories/Economics/"/>
    
      <category term="Literature Review" scheme="http://yoursite.com/categories/Economics/Literature-Review/"/>
    
      <category term="Asset pricing" scheme="http://yoursite.com/categories/Economics/Literature-Review/Asset-pricing/"/>
    
    
      <category term="Asset Pricing" scheme="http://yoursite.com/tags/Asset-Pricing/"/>
    
      <category term="Papers" scheme="http://yoursite.com/tags/Papers/"/>
    
  </entry>
  
  <entry>
    <title>SQL Intermediate</title>
    <link href="http://yoursite.com/2020/01/25/SQL%20Intermediate/"/>
    <id>http://yoursite.com/2020/01/25/SQL Intermediate/</id>
    <published>2020-01-25T05:00:00.000Z</published>
    <updated>2020-01-27T15:38:34.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Speed-Up-Querying"><a href="#Speed-Up-Querying" class="headerlink" title="Speed Up Querying"></a>Speed Up Querying</h1><h2 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h2><h3 id="General-Index"><a href="#General-Index" class="headerlink" title="General Index"></a>General Index</h3><p>For a <code>students</code> table:</p><div class="table-container"><table><thead><tr><th>id</th><th>class_id</th><th>name</th><th>gender</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>Alex</td><td>M</td><td>90</td></tr><tr><td>2</td><td>1</td><td>Bob</td><td>M</td><td>95</td></tr><tr><td>3</td><td>1</td><td>Cindy</td><td>F</td><td>88</td></tr></tbody></table></div><p>If we want to query by score quickly, we can create an index for score.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">INDEX</span> idx_score (score);</span><br></pre></td></tr></table></figure><p>The name of index <code>idx_score</code> could be anything. If there are multiple indexes, then</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">INDEX</span> idx_name_score (<span class="keyword">name</span>, score);</span><br></pre></td></tr></table></figure><ul><li>The index should be updated when inserting or deleting the records.</li></ul><h2 id="Unique-Index"><a href="#Unique-Index" class="headerlink" title="Unique Index"></a>Unique Index</h2><p>The unique column which is not primary key can be assigned with a unique index</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> uni_name (<span class="keyword">name</span>);</span><br></pre></td></tr></table></figure><p>We can also add unique constraint to a column rather than unique index</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> uni_name <span class="keyword">UNIQUE</span> (<span class="keyword">name</span>);</span><br></pre></td></tr></table></figure><h2 id="Get-more-complex"><a href="#Get-more-complex" class="headerlink" title="Get more complex"></a>Get more complex</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Track.title, Genre.name <span class="keyword">FROM</span> Track <span class="keyword">JOIN</span> Genre <span class="keyword">ON</span> Track.genre_id = Genre.genre_id</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> Track.title, Artist.name, Album.title, Genre.name <span class="keyword">FROM</span> Track <span class="keyword">JOIN</span> Genre <span class="keyword">JOIN</span> Album <span class="keyword">JOIN</span> Artist <span class="keyword">ON</span> Track.genre_id = Genre.genre_id <span class="keyword">AND</span> Track.album_id = Album.album_id <span class="keyword">AND</span> Album.artist_id = Artist.artist_id</span><br></pre></td></tr></table></figure><h2 id="ON-DELETE-CASCADE"><a href="#ON-DELETE-CASCADE" class="headerlink" title="ON DELETE CASCADE"></a>ON DELETE CASCADE</h2><ul><li>Default / Restrict - Don’t allow changes that break the constraint</li><li>CASCADE – Adjust child rows by removing or updating to maintain consistency</li><li>SET NULL – Set the foreign key columns in the child rows to null</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Genre <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'Metal'</span></span><br></pre></td></tr></table></figure><h1 id="Many-to-Many-Relationships"><a href="#Many-to-Many-Relationships" class="headerlink" title="Many to Many Relationships"></a>Many to Many Relationships</h1><ul><li>Sometimes we need to model a relationship that is many to many.</li><li>We need to add a “connection” table with two foreign keys.</li><li>There is usually no separate primary key</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">User</span> (</span><br><span class="line">user_id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">email <span class="built_in">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">128</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Course (</span><br><span class="line">course_id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">title <span class="built_in">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">UNIQUE</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span>=utf8;</span><br></pre></td></tr></table></figure><h2 id="Combination-Keys"><a href="#Combination-Keys" class="headerlink" title="Combination Keys"></a>Combination Keys</h2><ul><li>Combination key is unique</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">Member</span> (</span><br><span class="line">user_id <span class="built_in">INTEGER</span>,</span><br><span class="line">course_id <span class="built_in">INTEGER</span>,</span><br><span class="line"><span class="keyword">role</span> <span class="built_in">INTEGER</span>,</span><br><span class="line"><span class="keyword">CONSTRAINT</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (user_id) <span class="keyword">REFERENCES</span> <span class="keyword">User</span> (user_id)</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span>,</span><br><span class="line"><span class="keyword">CONSTRAINT</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (course_id) <span class="keyword">REFERENCES</span> Course (course_id)</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (user_id, course_id)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span>=utf8;</span><br></pre></td></tr></table></figure><ul><li>Insert contents:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">User</span> (<span class="keyword">name</span>, email) <span class="keyword">VALUES</span> (<span class="string">'Jane'</span>, <span class="string">'jane@tsugi.org'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">User</span> (<span class="keyword">name</span>, email) <span class="keyword">VALUES</span> (<span class="string">'Ed'</span>, <span class="string">'ed@tsugi.org'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">User</span> (<span class="keyword">name</span>, email) <span class="keyword">VALUES</span> (<span class="string">'Sue'</span>, <span class="string">'sue@tsugi.org'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Course (title) <span class="keyword">VALUES</span> (<span class="string">'Python'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Course (title) <span class="keyword">VALUES</span> (<span class="string">'SQL'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Course (title) <span class="keyword">VALUES</span> (<span class="string">'PHP'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Member</span> (user_id, course_id, <span class="keyword">role</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Member</span> (user_id, course_id, <span class="keyword">role</span>) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Member</span> (user_id, course_id, <span class="keyword">role</span>) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Member</span> (user_id, course_id, <span class="keyword">role</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Member</span> (user_id, course_id, <span class="keyword">role</span>) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Member</span> (user_id, course_id, <span class="keyword">role</span>) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Member</span> (user_id, course_id, <span class="keyword">role</span>) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><ul><li>Select rows you want: </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> User.name, Member.role, Course.title</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">User</span> <span class="keyword">JOIN</span> <span class="keyword">Member</span> <span class="keyword">JOIN</span> Course</span><br><span class="line"><span class="keyword">ON</span> Member.user_id = User.user_id <span class="keyword">AND</span></span><br><span class="line">Member.course_id = Course.course_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Course.title, Member.role <span class="keyword">DESC</span>, User.name</span><br></pre></td></tr></table></figure><h1 id="Complexity-Enables-Speeds"><a href="#Complexity-Enables-Speeds" class="headerlink" title="Complexity Enables Speeds"></a>Complexity Enables Speeds</h1><ul><li>Complexity makes speed possible and allows you to get very fast results as the data size grows.</li><li>By normalizing the data and linking it with integer keys, the overall amount of data which the relational database must scan is far lower than if the data were simply flattened out.</li><li>It might seem like a tradeoff - spend some time designing your database so it continues to be fast when your application is a success.</li></ul><h1 id="Other-Usage"><a href="#Other-Usage" class="headerlink" title="Other Usage"></a>Other Usage</h1><h2 id="UNION-ALL"><a href="#UNION-ALL" class="headerlink" title="UNION ALL"></a>UNION ALL</h2><p><code>UNION</code> is used to merge two or multiple resulting set of SELECT. The Name, datatype and order of column should be identical. <code>UNION</code> is used to select the different records from both SELECT.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table2;</span><br></pre></td></tr></table></figure><p>If allowing the duplicated records, we should use UNION ALL.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table2;</span><br></pre></td></tr></table></figure><p>With <code>where</code> operation:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">WHERE</span> column_name(<span class="number">1</span>)=<span class="string">'xx'</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table2</span><br><span class="line"><span class="keyword">WHERE</span> column_name(<span class="number">1</span>)=<span class="string">'xx'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column_name(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Speed-Up-Querying&quot;&gt;&lt;a href=&quot;#Speed-Up-Querying&quot; class=&quot;headerlink&quot; title=&quot;Speed Up Querying&quot;&gt;&lt;/a&gt;Speed Up Querying&lt;/h1&gt;&lt;h2 id=&quot;Index
      
    
    </summary>
    
      <category term="Computer Science" scheme="http://yoursite.com/categories/Computer-Science/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Computer-Science/Programming/"/>
    
      <category term="SQL" scheme="http://yoursite.com/categories/Computer-Science/Programming/SQL/"/>
    
    
      <category term="MOOC" scheme="http://yoursite.com/tags/MOOC/"/>
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
      <category term="Database" scheme="http://yoursite.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>SQL Keys</title>
    <link href="http://yoursite.com/2020/01/25/SQL%20Keys/"/>
    <id>http://yoursite.com/2020/01/25/SQL Keys/</id>
    <published>2020-01-25T05:00:00.000Z</published>
    <updated>2020-01-26T19:09:14.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Key-Terminology"><a href="#Key-Terminology" class="headerlink" title="Key Terminology"></a>Key Terminology</h1><h2 id="Three-Kinds-of-Keys"><a href="#Three-Kinds-of-Keys" class="headerlink" title="Three Kinds of Keys"></a>Three Kinds of Keys</h2><h3 id="Primary-key"><a href="#Primary-key" class="headerlink" title="Primary key"></a>Primary key</h3><ul><li><p>generally an integer autoincrement field, indicating the row.</p></li><li><p>Relationships that are based on matching string fields are less efficient than integers.</p></li></ul><h3 id="Logical-key"><a href="#Logical-key" class="headerlink" title="Logical key"></a>Logical key</h3><ul><li>what the outside world uses for lookup.</li><li><strong>Never use your logical key as the primary key</strong>.</li><li>Logical keys can and do change, albeit slowly.</li></ul><h3 id="Foreign-key"><a href="#Foreign-key" class="headerlink" title="Foreign key"></a>Foreign key</h3><ul><li>A foreign key is when a table has a column containing a key that points to the primary key of another table.</li></ul><h1 id="One-to-Many-Many-to-One"><a href="#One-to-Many-Many-to-One" class="headerlink" title="One to Many / Many to One"></a>One to Many / Many to One</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> Music <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">USE</span> Music;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Artist (</span><br><span class="line">  artist_id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>(artist_id)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Album (</span><br><span class="line">  album_id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  title <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  artist_id <span class="built_in">INTEGER</span>,</span><br><span class="line"></span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>(album_id),</span><br><span class="line">  <span class="keyword">INDEX</span> <span class="keyword">USING</span> BTREE (title),</span><br><span class="line"></span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (artist_id)</span><br><span class="line">    <span class="keyword">REFERENCES</span> Artist (artist_id)</span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Genre (</span><br><span class="line">  genre_id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>(genre_id)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Track (</span><br><span class="line">  track_id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  title <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  <span class="keyword">len</span> <span class="built_in">INTEGER</span>,</span><br><span class="line">  rating <span class="built_in">INTEGER</span>,</span><br><span class="line">  <span class="keyword">count</span> <span class="built_in">INTEGER</span>,</span><br><span class="line">  album_id <span class="built_in">INTEGER</span>,</span><br><span class="line">  genre_id <span class="built_in">INTEGER</span>,</span><br><span class="line"></span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>(track_id),</span><br><span class="line">  <span class="keyword">INDEX</span> <span class="keyword">USING</span> BTREE (title),</span><br><span class="line"></span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (album_id) <span class="keyword">REFERENCES</span> Album (album_id)</span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span>,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (genre_id) <span class="keyword">REFERENCES</span> Genre (genre_id)</span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span></span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>;</span><br></pre></td></tr></table></figure><h2 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h2><p>The JOIN operation links across several tables as part of a SELECT operation;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Album.title, Artist.name <span class="keyword">FROM</span> Album <span class="keyword">JOIN</span> Artist <span class="keyword">ON</span>;</span><br></pre></td></tr></table></figure><ul><li>You must tell the JOIN how to use the keys that make the connection between the tables <strong>using an ON clause</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Album.title, Album.artist_id, Artist.artist_id,Artist.name</span><br><span class="line"><span class="keyword">FROM</span> Album <span class="keyword">JOIN</span> Artist <span class="keyword">ON</span> Album.artist_id = Artist.artist_id</span><br></pre></td></tr></table></figure><ul><li>Joining two tables <strong>without an ON clause</strong> gives all possible combinations of rows</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Track.title, Track.genre_id, Genre.genre_id, Genre.name <span class="keyword">FROM</span> Track <span class="keyword">JOIN</span> Genre</span><br></pre></td></tr></table></figure><h2 id="Get-more-complex"><a href="#Get-more-complex" class="headerlink" title="Get more complex"></a>Get more complex</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Track.title, Genre.name <span class="keyword">FROM</span> Track <span class="keyword">JOIN</span> Genre <span class="keyword">ON</span> Track.genre_id = Genre.genre_id</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> Track.title, Artist.name, Album.title, Genre.name <span class="keyword">FROM</span> Track <span class="keyword">JOIN</span> Genre <span class="keyword">JOIN</span> Album <span class="keyword">JOIN</span> Artist <span class="keyword">ON</span> Track.genre_id = Genre.genre_id <span class="keyword">AND</span> Track.album_id = Album.album_id <span class="keyword">AND</span> Album.artist_id = Artist.artist_id</span><br></pre></td></tr></table></figure><h2 id="ON-DELETE-CASCADE"><a href="#ON-DELETE-CASCADE" class="headerlink" title="ON DELETE CASCADE"></a>ON DELETE CASCADE</h2><ul><li>Default / Restrict - Don’t allow changes that break the constraint</li><li>CASCADE – Adjust child rows by removing or updating to maintain consistency</li><li>SET NULL – Set the foreign key columns in the child rows to null</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Genre <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'Metal'</span></span><br></pre></td></tr></table></figure><h1 id="Many-to-Many-Relationships"><a href="#Many-to-Many-Relationships" class="headerlink" title="Many to Many Relationships"></a>Many to Many Relationships</h1><ul><li>Sometimes we need to model a relationship that is many to many.</li><li>We need to add a “connection” table with two foreign keys.</li><li>There is usually no separate primary key</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">User</span> (</span><br><span class="line">user_id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">email <span class="built_in">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">128</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Course (</span><br><span class="line">course_id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">title <span class="built_in">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">UNIQUE</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span>=utf8;</span><br></pre></td></tr></table></figure><h2 id="Combination-Keys"><a href="#Combination-Keys" class="headerlink" title="Combination Keys"></a>Combination Keys</h2><ul><li>Combination key is unique</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">Member</span> (</span><br><span class="line">user_id <span class="built_in">INTEGER</span>,</span><br><span class="line">course_id <span class="built_in">INTEGER</span>,</span><br><span class="line"><span class="keyword">role</span> <span class="built_in">INTEGER</span>,</span><br><span class="line"><span class="keyword">CONSTRAINT</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (user_id) <span class="keyword">REFERENCES</span> <span class="keyword">User</span> (user_id)</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span>,</span><br><span class="line"><span class="keyword">CONSTRAINT</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (course_id) <span class="keyword">REFERENCES</span> Course (course_id)</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CASCADE</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (user_id, course_id)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span>=utf8;</span><br></pre></td></tr></table></figure><ul><li>Insert contents:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">User</span> (<span class="keyword">name</span>, email) <span class="keyword">VALUES</span> (<span class="string">'Jane'</span>, <span class="string">'jane@tsugi.org'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">User</span> (<span class="keyword">name</span>, email) <span class="keyword">VALUES</span> (<span class="string">'Ed'</span>, <span class="string">'ed@tsugi.org'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">User</span> (<span class="keyword">name</span>, email) <span class="keyword">VALUES</span> (<span class="string">'Sue'</span>, <span class="string">'sue@tsugi.org'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Course (title) <span class="keyword">VALUES</span> (<span class="string">'Python'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Course (title) <span class="keyword">VALUES</span> (<span class="string">'SQL'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Course (title) <span class="keyword">VALUES</span> (<span class="string">'PHP'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Member</span> (user_id, course_id, <span class="keyword">role</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Member</span> (user_id, course_id, <span class="keyword">role</span>) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Member</span> (user_id, course_id, <span class="keyword">role</span>) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Member</span> (user_id, course_id, <span class="keyword">role</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Member</span> (user_id, course_id, <span class="keyword">role</span>) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Member</span> (user_id, course_id, <span class="keyword">role</span>) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Member</span> (user_id, course_id, <span class="keyword">role</span>) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><ul><li>Select rows you want: </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> User.name, Member.role, Course.title</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">User</span> <span class="keyword">JOIN</span> <span class="keyword">Member</span> <span class="keyword">JOIN</span> Course</span><br><span class="line"><span class="keyword">ON</span> Member.user_id = User.user_id <span class="keyword">AND</span></span><br><span class="line">Member.course_id = Course.course_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Course.title, Member.role <span class="keyword">DESC</span>, User.name</span><br></pre></td></tr></table></figure><h1 id="Complexity-Enables-Speeds"><a href="#Complexity-Enables-Speeds" class="headerlink" title="Complexity Enables Speeds"></a>Complexity Enables Speeds</h1><ul><li>Complexity makes speed possible and allows you to get very fast results as the data size grows.</li><li>By normalizing the data and linking it with integer keys, the overall amount of data which the relational database must scan is far lower than if the data were simply flattened out.</li><li>It might seem like a tradeoff - spend some time designing your database so it continues to be fast when your application is a success.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Key-Terminology&quot;&gt;&lt;a href=&quot;#Key-Terminology&quot; class=&quot;headerlink&quot; title=&quot;Key Terminology&quot;&gt;&lt;/a&gt;Key Terminology&lt;/h1&gt;&lt;h2 id=&quot;Three-Kinds-o
      
    
    </summary>
    
      <category term="Computer Science" scheme="http://yoursite.com/categories/Computer-Science/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Computer-Science/Programming/"/>
    
      <category term="SQL" scheme="http://yoursite.com/categories/Computer-Science/Programming/SQL/"/>
    
    
      <category term="MOOC" scheme="http://yoursite.com/tags/MOOC/"/>
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
      <category term="Database" scheme="http://yoursite.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>SQL Basic</title>
    <link href="http://yoursite.com/2020/01/24/SQL%20Basics/"/>
    <id>http://yoursite.com/2020/01/24/SQL Basics/</id>
    <published>2020-01-24T05:00:00.000Z</published>
    <updated>2020-01-26T19:10:21.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Basic-Syntax"><a href="#Basic-Syntax" class="headerlink" title="Basic Syntax"></a>Basic Syntax</h1><h2 id="CREATE"><a href="#CREATE" class="headerlink" title="CREATE"></a>CREATE</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> People </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">Users</span>(</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">128</span>),</span><br><span class="line">email <span class="built_in">VARCHAR</span>(<span class="number">128</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DESCRIBE</span> People;</span><br></pre></td></tr></table></figure><h2 id="DROP"><a href="#DROP" class="headerlink" title="DROP"></a>DROP</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">Users</span>;</span><br></pre></td></tr></table></figure><h2 id="INSERT-INTO"><a href="#INSERT-INTO" class="headerlink" title="INSERT INTO"></a>INSERT INTO</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Users</span> (<span class="keyword">name</span>, email) <span class="keyword">VALUES</span> (<span class="string">'Chuck'</span>, <span class="string">'csev@umich.edu'</span>) ;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Users</span> (<span class="keyword">name</span>, email) <span class="keyword">VALUES</span> (<span class="string">'Somesh'</span>, <span class="string">'somesh@umich.edu'</span>) ;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Users</span> (<span class="keyword">name</span>, email) <span class="keyword">VALUES</span> (<span class="string">'Caitlin'</span>, <span class="string">'cait@umich.edu'</span>) ;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Users</span> (<span class="keyword">name</span>, email) <span class="keyword">VALUES</span> (<span class="string">'Ted'</span>, <span class="string">'ted@umich.edu'</span>) ;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Users</span> (<span class="keyword">name</span>, email) <span class="keyword">VALUES</span> (<span class="string">'Sally'</span>, <span class="string">'sally@umich.edu'</span>) ;</span><br></pre></td></tr></table></figure><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">Users</span> <span class="keyword">WHERE</span> email=<span class="string">'ted@umich.edu'</span></span><br></pre></td></tr></table></figure><h2 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h2><p>Replace / Change the values</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">Users</span> <span class="keyword">SET</span> <span class="keyword">name</span>=<span class="string">'Charles'</span> <span class="keyword">WHERE</span> email=<span class="string">'csev@umich.edu'</span></span><br></pre></td></tr></table></figure><h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><p>Retrieving Records</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">Users</span></span><br></pre></td></tr></table></figure><h3 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">Users</span> <span class="keyword">WHERE</span> email=<span class="string">'csev@umich.edu'</span></span><br></pre></td></tr></table></figure><p>here, <code>*</code> is for all the columns</p><h3 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">Users</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> email</span><br></pre></td></tr></table></figure><h3 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h3><p>Include or some characteristics</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">Users</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> <span class="string">'%e%'</span></span><br></pre></td></tr></table></figure><h3 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">Users</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> email <span class="keyword">DESC</span> <span class="keyword">LIMIT</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">Users</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> email <span class="keyword">LIMIT</span> <span class="number">1</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT"></a>COUNT</h3><p>Counting rows with select</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> <span class="keyword">Users</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> <span class="keyword">Users</span> <span class="keyword">WHERE</span> email=<span class="string">'csev@umich.edu'</span>;</span><br></pre></td></tr></table></figure><h1 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h1><h2 id="String-Fields"><a href="#String-Fields" class="headerlink" title="String Fields"></a>String Fields</h2><p>String Fields are indexable for searching</p><h3 id="CHAR"><a href="#CHAR" class="headerlink" title="CHAR"></a>CHAR</h3><p><strong>CHAR</strong> allocates the entire space (faster for small strings where length is known)</p><h3 id="VARCHAR"><a href="#VARCHAR" class="headerlink" title="VARCHAR"></a>VARCHAR</h3><p><strong>VARCHAR</strong> allocates a variable amount of space depending on the data length (less space)</p><h2 id="Text-Fields"><a href="#Text-Fields" class="headerlink" title="Text Fields"></a>Text Fields</h2><p>Have a character set - paragraphs or HTML pages</p><p>Generally not used with indexing or sorting - and only then limited to a prefix</p><ul><li><p>TINYTEXT</p></li><li><p>TEXT</p></li><li><p>MEDIUMTEXT</p></li><li><p>LONGTEXT</p></li></ul><h2 id="Binary-Types-rarely-used"><a href="#Binary-Types-rarely-used" class="headerlink" title="Binary Types (rarely used)"></a>Binary Types (rarely used)</h2><p>Character = 8 - 32 bits of information depending on character set</p><h2 id="Binary-Large-Object-BLOB"><a href="#Binary-Large-Object-BLOB" class="headerlink" title="Binary Large Object (BLOB)"></a>Binary Large Object (BLOB)</h2><p>Large raw data, files, images, word documents, PDFs, movies, etc.</p><p>No translation, indexing, or character set.</p><h2 id="Integer-Numbers"><a href="#Integer-Numbers" class="headerlink" title="Integer Numbers"></a>Integer Numbers</h2><ul><li>TINYINT (-128, 128)</li><li>SMALLINT (-32768, +32768)</li><li>INT or INTEGER (2 Billion)</li><li>BIGINT - (10**18 ish)</li></ul><h2 id="Floating-Point-Numbers"><a href="#Floating-Point-Numbers" class="headerlink" title="Floating Point Numbers"></a>Floating Point Numbers</h2><ul><li>FLOAT (32-bit) 10**38 with seven digits of accuracy</li><li>DOUBLE (64-bit) 10**308 with 14 digits of accuracy</li></ul><h2 id="Dates"><a href="#Dates" class="headerlink" title="Dates"></a>Dates</h2><ul><li>TIMESTAMP - ‘YYYY-MM-DD HH:MM:SS’ (1970, 2037)</li><li>DATETIME - ‘YYYY-MM-DD HH:MM:SS’</li><li>DATE - ‘YYYY-MM-DD’</li><li>TIME - ‘HH:MM:SS’</li><li>Built-in MySQL function <code>NOW()</code></li></ul><h1 id="Database-Keys-and-Indexes"><a href="#Database-Keys-and-Indexes" class="headerlink" title="Database Keys and Indexes"></a>Database Keys and Indexes</h1><h2 id="AUTO-INCREMENT"><a href="#AUTO-INCREMENT" class="headerlink" title="AUTO_INCREMENT"></a>AUTO_INCREMENT</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">Users</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">Users</span> (</span><br><span class="line">user_id <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">128</span>),</span><br><span class="line">email <span class="built_in">VARCHAR</span>(<span class="number">128</span>),</span><br><span class="line">PRIMARY <span class="keyword">KEY</span>(user_id),</span><br><span class="line"><span class="keyword">INDEX</span>(<span class="keyword">name</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Users</span> (<span class="keyword">name</span>, email) <span class="keyword">VALUES</span> (<span class="string">'Chuck'</span>, <span class="string">'csev@umich.edu'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Users</span> (<span class="keyword">name</span>, email) <span class="keyword">VALUES</span> (<span class="string">'Somesh'</span>, <span class="string">'somesh@umich.edu'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Users</span> (<span class="keyword">name</span>, email) <span class="keyword">VALUES</span> (<span class="string">'Caitlin'</span>, <span class="string">'cait@umich.edu'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Users</span> (<span class="keyword">name</span>, email) <span class="keyword">VALUES</span> (<span class="string">'Ted'</span>, <span class="string">'ted@umich.edu'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Users</span> (<span class="keyword">name</span>, email) <span class="keyword">VALUES</span> (<span class="string">'Sally'</span>, <span class="string">'sally@umich.edu'</span>);</span><br></pre></td></tr></table></figure><h2 id="Specifying-Indexes"><a href="#Specifying-Indexes" class="headerlink" title="Specifying Indexes"></a>Specifying Indexes</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">Users</span> <span class="keyword">ADD</span> <span class="keyword">INDEX</span> ( email ) <span class="keyword">USING</span> BTREE</span><br></pre></td></tr></table></figure><p>Relation, B-Tree and Hashes</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Basic-Syntax&quot;&gt;&lt;a href=&quot;#Basic-Syntax&quot; class=&quot;headerlink&quot; title=&quot;Basic Syntax&quot;&gt;&lt;/a&gt;Basic Syntax&lt;/h1&gt;&lt;h2 id=&quot;CREATE&quot;&gt;&lt;a href=&quot;#CREATE&quot;
      
    
    </summary>
    
      <category term="Computer Science" scheme="http://yoursite.com/categories/Computer-Science/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Computer-Science/Programming/"/>
    
      <category term="SQL" scheme="http://yoursite.com/categories/Computer-Science/Programming/SQL/"/>
    
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
      <category term="Data Science" scheme="http://yoursite.com/tags/Data-Science/"/>
    
      <category term="Database" scheme="http://yoursite.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Binary Model</title>
    <link href="http://yoursite.com/2019/12/15/BinModel/"/>
    <id>http://yoursite.com/2019/12/15/BinModel/</id>
    <published>2019-12-15T05:00:00.000Z</published>
    <updated>2020-01-26T16:08:13.879Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Binary-Tree"><a href="#Binary-Tree" class="headerlink" title="Binary Tree"></a>Binary Tree</h1><h2 id="Replication-Pricing"><a href="#Replication-Pricing" class="headerlink" title="Replication Pricing"></a>Replication Pricing</h2><p>Under the condition:</p><script type="math/tex; mode=display">u > e^{r(T-t)}>d</script><p>Construct a portfolio which receive risk free rate: </p><ul><li>short 1 call option</li><li>long $\Delta$ stocks</li></ul><p>Then </p><script type="math/tex; mode=display">\Delta S u - f_u = \Delta S d - f_d \\\Delta = \frac{f_u-f_d}{Su - Sd}</script><p>Because $S\Delta - f$ is a risk free asset, it will receive risk free rate whenever it increases or decreases:</p><script type="math/tex; mode=display">S\Delta - f = (\Delta S u - f_u)e^{-r(T-t)}</script><p>and we can get the formula of $f$:</p><script type="math/tex; mode=display">\begin{eqnarray*}f &=& S \Delta - (\Delta S u - f_u)e^{-r(T-t)} \\  &=& e^{-r(T-t)}[e^{r(T-t)}S\Delta - (\Delta Su - f_u)] \\  &=& e^{-r(T-t)}[(e^{r(T-t)}S-Su)\Delta  + f_u)] \\  &=& e^{-r(T-t)}[(e^{r(T-t)}S-Su)\frac{f_u-f_d}{Su - Sd}  + f_u)] \\  &=& e^{-r(T-t)}[\frac{e^{r(T-t)}-u}{u-d}(f_u-f_d)  + f_u)] \\  &=& e^{-r(T-t)}[(\frac{e^{r(T-t)}-u}{u-d}+1)f_u  +(- \frac{e^{r(T-t)}-u}{u-d})f_d)] \\  &=& e^{-r(T-t)}[pf_u  +(1- p)f_d] \\\end{eqnarray*}</script><p>where</p><script type="math/tex; mode=display">p =\frac{e^{r(T-t)}-d}{u-d}</script><h1 id="Codes-for-Binary-Tree"><a href="#Codes-for-Binary-Tree" class="headerlink" title="Codes for Binary Tree"></a>Codes for Binary Tree</h1><h2 id="in-C"><a href="#in-C" class="headerlink" title="in C++"></a>in C++</h2><h3 id="The-thought"><a href="#The-thought" class="headerlink" title="The thought"></a>The thought</h3><p>header file</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BinModel01_h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BinModel01_h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//computing risk-neutral probability</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">RiskNeutProb</span><span class="params">(doube U, <span class="keyword">double</span> D, <span class="keyword">double</span> R)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//computing the stock price at node n,i</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">S</span><span class="params">(<span class="keyword">double</span> S0, <span class="keyword">double</span> U, <span class="keyword">double</span> D, <span class="keyword">int</span> n, <span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//inputting, displaying and checking model data</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetInputData</span><span class="params">(<span class="keyword">double</span>&amp; S0, <span class="keyword">double</span>&amp; U, <span class="keyword">double</span>&amp; D, <span class="keyword">double</span>&amp; R)</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Binary-Tree&quot;&gt;&lt;a href=&quot;#Binary-Tree&quot; class=&quot;headerlink&quot; title=&quot;Binary Tree&quot;&gt;&lt;/a&gt;Binary Tree&lt;/h1&gt;&lt;h2 id=&quot;Replication-Pricing&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Economics" scheme="http://yoursite.com/categories/Economics/"/>
    
      <category term="Finance" scheme="http://yoursite.com/categories/Economics/Finance/"/>
    
      <category term="Financial Engineering" scheme="http://yoursite.com/categories/Economics/Finance/Financial-Engineering/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="Finance" scheme="http://yoursite.com/tags/Finance/"/>
    
      <category term="Asset Pricing" scheme="http://yoursite.com/tags/Asset-Pricing/"/>
    
  </entry>
  
  <entry>
    <title>Binary Model</title>
    <link href="http://yoursite.com/2019/11/23/BSM%20Model/"/>
    <id>http://yoursite.com/2019/11/23/BSM Model/</id>
    <published>2019-11-23T05:00:00.000Z</published>
    <updated>2020-01-26T16:10:33.213Z</updated>
    
    <content type="html"><![CDATA[<p>The Episode 4</p><p>Assumptions:</p><ul><li><p>The short-term interest rate is known and is constant through time. (The interest term structure is flat.) (not restrict)</p></li><li><p>The stock price follows a random walk in continuous time with a variance rate proportional to the square of the stock price. Thus the distribution of stock prices is lognormal. The variance rate of the return on the stock is constant.(Geometric Brownian Motion.) ($\mu$ is a constant, and $\sigma$ is a constant.) (not restrict)</p><script type="math/tex; mode=display">dS = \mu S d t + \sigma S d W_t</script></li><li><p>Pays no dividends (not restrict)</p></li><li><p>No transaction costs. (restrict)</p></li><li><p>European</p></li><li><p>possible to borrow money to buy stocks / no penalties to short selling.</p></li></ul><p>Deduction:</p><p>$S$ is the stock price, $W_t$ is Standard Brownian Motion, $\mu$ is drift, $\sigma $ is volatility, $f$ is the price of a derivative of Stock.</p><script type="math/tex; mode=display">\Delta S = \mu S \Delta t + \sigma S \Delta W_t</script><p>According to Ito lemma,</p><script type="math/tex; mode=display">\begin{eqnarray*}df &=& \frac{\partial f}{\partial t}dt + \frac{\partial f}{\partial S}dS + \frac{1}{2}\frac{\partial^2 f}{\partial S^2}dS \times dS \\&=& \frac{\partial f}{\partial t}dt + \frac{\partial f}{\partial S}(\mu S d t + \sigma S d W_t) + \frac{1}{2}\frac{\partial^2 f}{\partial S^2}\sigma^2 S^2 dt \\&=& (\frac{\partial f}{\partial t} + \frac{\partial f}{\partial S}\mu S + \frac{1}{2}\frac{\partial^2 f}{\partial S^2}\sigma^2 S^2) dt + \frac{\partial f}{\partial S}\sigma S d W_t\end{eqnarray*}</script><p>therefore, in discrete form</p><script type="math/tex; mode=display">\Delta f = (\frac{\partial f}{\partial t} + \frac{\partial f}{\partial S}\mu S + \frac{1}{2}\frac{\partial^2 f}{\partial S^2}\sigma^2 S^2) \Delta t + \frac{\partial f}{\partial S}\sigma S \Delta W_t</script><p>Now that the stock and the derivative both have uncertainty term $\Delta W_t$, we want to  build a portfolio of  stock and derivative to eliminate the uncertainty in a short time:</p><ul><li><p>$\text{short} ~ 1 ~ \text{derivative} ~ (f)$</p></li><li><p>$\text{long} ~ \frac{\partial f}{\partial S} ~ \text{shares} ~ (S)$</p><p>In a short time, it is a risk-free portfolio, the value of which is</p><script type="math/tex; mode=display">\Pi = -f + \frac{\partial f}{\partial S} S</script><p>On the one hand, it has to have the risk-free return:</p><script type="math/tex; mode=display">\begin{eqnarray*}\Pi_t &=& \Pi_0 e ^{rt} \\\mathbb{ln}\Pi_t &=& \mathbb{ln}\Pi_0 + rt \\\frac{d\Pi}{\Pi} &=& rdt\end{eqnarray*}</script><p>Therefore,</p><script type="math/tex; mode=display">\Delta \Pi = r \Pi \Delta t</script><p>On the other hand, the change of its value is:</p><script type="math/tex; mode=display">\Delta \Pi = - \Delta f + \frac{\partial f}{\partial S} \Delta S</script><p>Then we can get an equation, </p><script type="math/tex; mode=display">r \Pi \Delta t =- \Delta f + \frac{\partial f}{\partial S} \Delta S</script><p>with substituting for $\Delta f$, $\Delta S$ and $\Pi$</p><script type="math/tex; mode=display">\begin{eqnarray*}r\Delta t (-f + \frac{\partial f}{\partial S} S) = &-&(\frac{\partial f}{\partial t} + \frac{\partial f}{\partial S}\mu S + \frac{1}{2}\frac{\partial^2 f}{\partial S^2}\sigma^2 S^2) \Delta t + \frac{\partial f}{\partial S}\sigma S \Delta W_t \\&+&  \frac{\partial f}{\partial S}(\mu S \Delta t + \sigma S \Delta W_t)\end{eqnarray*}</script><p>After simplifying the equation, we get the famous differential equation</p><script type="math/tex; mode=display">\frac{\partial f}{\partial t} + rS\frac{\partial f}{\partial S}+\frac{1}{2}\sigma^2S^2\frac{\partial^2 f}{\partial S^2} = rf</script><p>We need to find a $f$ which satisfies the above equation.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The Episode 4&lt;/p&gt;
&lt;p&gt;Assumptions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The short-term interest rate is known and is constant through time. (The interest term 
      
    
    </summary>
    
      <category term="Economics" scheme="http://yoursite.com/categories/Economics/"/>
    
      <category term="Finance" scheme="http://yoursite.com/categories/Economics/Finance/"/>
    
      <category term="Financial Engineering" scheme="http://yoursite.com/categories/Economics/Finance/Financial-Engineering/"/>
    
    
      <category term="Finance" scheme="http://yoursite.com/tags/Finance/"/>
    
      <category term="Asset Pricing" scheme="http://yoursite.com/tags/Asset-Pricing/"/>
    
  </entry>
  
  <entry>
    <title>C++ Class</title>
    <link href="http://yoursite.com/2019/10/04/C++%20Pointer/"/>
    <id>http://yoursite.com/2019/10/04/C++ Pointer/</id>
    <published>2019-10-04T04:00:00.000Z</published>
    <updated>2020-01-26T16:14:43.641Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define without initialized</span></span><br><span class="line"><span class="keyword">int</span> *p</span><br><span class="line"></span><br><span class="line"><span class="comment">// define</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>; <span class="keyword">int</span> *p = &amp;n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a a[<span class="number">8</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;; <span class="keyword">int</span> * p = a;</span><br></pre></td></tr></table></figure><p>p as a pointer will point to the first element of array a</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Pointer Assignment </span><br><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>; <span class="keyword">int</span> *p = &amp;n, *q; q = p;</span><br></pre></td></tr></table></figure><p>“&amp;”: get the address</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> m, n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> *q = &amp; n;</span><br><span class="line">m = *q;</span><br></pre></td></tr></table></figure><ul><li>Swap 2 integers</li></ul><p>example 1: swap 2 integers by changing integer values</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//exchange m and n, without changing the pointer p and q    </span></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">10</span>， n = <span class="number">20</span>； t;</span><br><span class="line"><span class="keyword">int</span> *p = &amp;m;</span><br><span class="line"><span class="keyword">int</span> *q = &amp;n;</span><br><span class="line"></span><br><span class="line">t = *p;</span><br><span class="line">*p = *q;</span><br><span class="line">*q = t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>example 2: swap 2 integers by changing pointer</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m =<span class="number">10</span>, n = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> *p = &amp;m, *q = &amp;n, *t;</span><br><span class="line">    </span><br><span class="line">    t = p;</span><br><span class="line">p = q;</span><br><span class="line">q = t;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>example 3: swap 3 integers by function</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">10</span>, n = <span class="number">20</span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> NDEBUG</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"main (before swapped): m = "</span> &lt;&lt; m &lt;&lt; <span class="string">"; n = "</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    Swap(&amp;m, &amp;n);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> NDEBUG</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"main (after swapped): m = "</span> &lt;&lt; m &lt;&lt; <span class="string">"; n = "</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span>    </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">if</span> (! x || !y)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Constant-Pointer"><a href="#Constant-Pointer" class="headerlink" title="Constant Pointer"></a>Constant Pointer</h2><ul><li>Constant Pointer</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>; <span class="keyword">const</span> <span class="keyword">int</span> *p = &amp;n;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintObject</span><span class="params">( <span class="keyword">const</span> <span class="keyword">int</span> *p)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>Pointer pointing to a constant</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>; <span class="keyword">int</span> * <span class="keyword">const</span> p = &amp;n;</span><br></pre></td></tr></table></figure><ul><li>Constant pointer pointing to a constant</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">10</span>; <span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p = &amp;n;</span><br></pre></td></tr></table></figure><h2 id="pointer-and-return-value"><a href="#pointer-and-return-value" class="headerlink" title="pointer and return value"></a>pointer and return value</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> global = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">ReturnPointer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;global;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pointer-and-complicated-data-type"><a href="#Pointer-and-complicated-data-type" class="headerlink" title="Pointer and complicated data type"></a>Pointer and complicated data type</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">8</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> *p; p =&amp;a[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *p; p = a</span><br><span class="line"><span class="keyword">int</span> *q; q = &amp;a[<span class="number">2</span>]; <span class="comment">// q point to a[2]</span></span><br></pre></td></tr></table></figure><h3 id="pointer-operation"><a href="#pointer-operation" class="headerlink" title="pointer operation"></a>pointer operation</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">*p = a</span><br><span class="line">p+<span class="number">2</span></span><br><span class="line">*p = a[<span class="number">3</span>]; p<span class="number">-2</span></span><br><span class="line">q = p+<span class="number">2</span></span><br><span class="line">p++</span><br><span class="line">--p</span><br><span class="line">*p = a[<span class="number">0</span>]; *q = a[<span class="number">2</span>]; q-p = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">p == q</span><br><span class="line">p = <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">if</span>(p != <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">if</span>(p)</span><br></pre></td></tr></table></figure><h2 id="pointer-and-array"><a href="#pointer-and-array" class="headerlink" title="pointer and array"></a>pointer and array</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Definition</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GenerateIntegers</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">unsigned</span> <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">    Randomize();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        a[i] = GenerateRandomNumber(Lower, Upper);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Call</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM_OF_ELEMENTS 8</span></span><br><span class="line"><span class="keyword">int</span> a[NUM_OF_ELEMENTS];</span><br><span class="line">GenerateIntegers(a, NUM_OF_ELEMENTS);</span><br></pre></td></tr></table></figure><p>Pointers as parameter</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Definition</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GenerateIntegers</span><span class="params">(<span class="keyword">int</span> *p, <span class="keyword">unsigned</span> <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">    Randomize();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        *p++ = GenerateRandomNumber(Lower, Upper);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Call</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM_OF_ELEMENTS 8</span></span><br><span class="line"><span class="keyword">int</span> a[NUM_OF_ELEMENTS];</span><br><span class="line">GenerateIntegers(a, NUM_OF_ELEMENTS);</span><br></pre></td></tr></table></figure><p>example:</p><h3 id="Similarity-of-pointer-and-array"><a href="#Similarity-of-pointer-and-array" class="headerlink" title="Similarity of pointer and array"></a>Similarity of pointer and array</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;; <span class="keyword">int</span> *p = &amp;a; <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i  = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (i  = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(a+i) &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><ul><li>multidimensional array </li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintTwoDimensinalArray</span><span class="params">( <span class="keyword">int</span> a[<span class="number">8</span>][<span class="number">8</span>], <span class="keyword">unsigned</span> <span class="keyword">int</span> m, <span class="keyword">unsigned</span> <span class="keyword">int</span> n )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintTwoDimensinalArray</span><span class="params">( <span class="keyword">int</span> a[][], <span class="keyword">unsigned</span> <span class="keyword">int</span> m, <span class="keyword">unsigned</span> <span class="keyword">int</span> n )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintTwoDimensinalArray</span><span class="params">( <span class="keyword">int</span> * a, <span class="keyword">unsigned</span> <span class="keyword">int</span> m, <span class="keyword">unsigned</span> <span class="keyword">int</span> n )</span></span>;</span><br><span class="line"><span class="comment">// a + n * i + j</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintTwoDimensinalArray</span><span class="params">(<span class="keyword">int</span> * a, <span class="keyword">unsigned</span> <span class="keyword">int</span> m, <span class="keyword">unsigned</span> <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; m; i++ )</span><br><span class="line"><span class="keyword">for</span>( j = <span class="number">0</span>; j &lt; n; j++ )</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(a + n * i + j) &lt;&lt; <span class="string">"; "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123; &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;, &#123; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125; &#125;;</span><br><span class="line">PrintTwoDimensinalArray( a, <span class="number">2</span>, <span class="number">3</span> );</span><br></pre></td></tr></table></figure><h2 id="pointer-and-structure"><a href="#pointer-and-structure" class="headerlink" title="pointer and structure"></a>pointer and structure</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">STUDENT</span>&#123;</span> <span class="keyword">int</span> id; STRING name; <span class="keyword">int</span> age; &#125;;</span><br><span class="line">STUDENT student = &#123; <span class="number">2007010367</span>, <span class="string">"Name"</span>, <span class="number">19</span> &#125;;</span><br><span class="line">STUDENT * pstudent = &amp;student;</span><br><span class="line"></span><br><span class="line">(*pstudent).id = <span class="number">2007010367</span>;</span><br><span class="line">(*pstudent).name = DuplicateString( <span class="string">"Name"</span> );</span><br><span class="line">(*pstudent).age = <span class="number">19</span>;</span><br><span class="line"></span><br><span class="line">pstudent-&gt;id = <span class="number">2007010367</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ARRAY</span>&#123;</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> count; <span class="keyword">int</span> * elements; &#125;;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">8</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> &#125;;</span><br><span class="line">ARRAY <span class="built_in">array</span> = &#123; <span class="number">8</span>, &amp;a &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//访问 elements 的第 i 个元素: array.elements[i]</span></span><br><span class="line"><span class="comment">//若有定义:ARRAY * parray = &amp;array;</span></span><br><span class="line"><span class="comment">//访问 parray 指向的结构体对象 elements 的第 i 个元素:</span></span><br><span class="line">(*parray).elements[i]</span><br><span class="line">parray-&gt;elements[i]</span><br></pre></td></tr></table></figure><ul><li>dynamic array</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ARRAY</span> &#123;</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> count; <span class="keyword">int</span> *</span><br><span class="line">elements; &#125;;</span><br></pre></td></tr></table></figure><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="String-array"><a href="#String-array" class="headerlink" title="String array"></a>String array</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> s[<span class="number">8</span>] = &#123; <span class="string">'C'</span>, <span class="string">'P'</span>, <span class="string">'P'</span>, <span class="string">'-'</span>, <span class="string">'P'</span>, <span class="string">'r'</span>, <span class="string">'o'</span>, <span class="string">'g'</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> t[<span class="number">5</span>] = &#123; <span class="string">'H'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span> &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add '\0' at the end of string array</span></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">9</span>] = &#123; <span class="string">'C'</span>, <span class="string">'P'</span>, <span class="string">'P'</span>, <span class="string">'-'</span>, <span class="string">'P'</span>, <span class="string">'r'</span>, <span class="string">'o'</span>, <span class="string">'g'</span>, <span class="string">'\0'</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> t[<span class="number">6</span>] = &#123; <span class="string">'H'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>, <span class="string">'\0'</span> &#125;;</span><br></pre></td></tr></table></figure><p>example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">FindCharFirst</span><span class="params">( <span class="keyword">char</span> c, <span class="keyword">char</span> s[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>( !s )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"FindCharFirst: Illegal string.\n"</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">for</span>( i = <span class="number">0</span>; s[i] != <span class="string">'\0'</span>; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( s[i] == c )</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inexistent_index; <span class="comment">// 0xFFFFFFFF</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">FindCharFirst</span><span class="params">( <span class="keyword">char</span> c, <span class="keyword">char</span> * s )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> * t;</span><br><span class="line">    <span class="keyword">if</span>( !s )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"FindCharFirst: Illegal string.\n"</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">for</span>( t = s; *t != <span class="string">'\0'</span>; t++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( *t == c )</span><br><span class="line">        <span class="keyword">return</span> t - s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inexistent_index; <span class="comment">// 0xFFFFFFFF</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="abstract-string"><a href="#abstract-string" class="headerlink" title="abstract string"></a>abstract string</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> * STRING;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keyword">char</span> * CSTRING;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">FindCharFirst</span><span class="params">( <span class="keyword">char</span> c, <span class="keyword">char</span> s[] )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">FindCharFirst</span><span class="params">( <span class="keyword">char</span> c, <span class="keyword">char</span>* s )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">FindCharFirst</span><span class="params">( <span class="keyword">char</span> c, STRING s )</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> s[<span class="number">9</span>] = &#123; <span class="string">'C'</span>, <span class="string">'P'</span>, <span class="string">'P'</span>, <span class="string">'-'</span>, <span class="string">'P'</span>, <span class="string">'r'</span>, <span class="string">'o'</span>, <span class="string">'g'</span>, <span class="string">'\0'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * s = <span class="string">"CPP-Prog"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * s; s = <span class="string">"CPP-Prog"</span>; <span class="comment">//correct</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">9</span>]; s = <span class="string">"CPP-Prog"</span>; <span class="comment">//wrong</span></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">9</span>] = <span class="string">"CPP-Prog"</span> <span class="comment">//correct</span></span><br></pre></td></tr></table></figure><p>example</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">STRING <span class="title">TransformCharIntoString</span><span class="params">( <span class="keyword">char</span> c )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STRING _s = (STRING)<span class="built_in">malloc</span>( <span class="number">2</span> );</span><br><span class="line">    _s[<span class="number">0</span>] = c;</span><br><span class="line">    _s[<span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//wrong</span></span><br><span class="line"><span class="function">STRING <span class="title">TransformCharIntoString</span><span class="params">( <span class="keyword">char</span> c )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> _s[<span class="number">2</span>];</span><br><span class="line">    _s[<span class="number">0</span>] = c;</span><br><span class="line">_s[<span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="keyword">return</span> _s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="standard-string-library"><a href="#standard-string-library" class="headerlink" title="standard string library"></a>standard string library</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">strcat</span><span class="params">( <span class="keyword">char</span> * dest, <span class="keyword">const</span> <span class="keyword">char</span> * src )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strcmp</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> * s1, <span class="keyword">const</span> <span class="keyword">char</span> * s2 )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">strcpy</span><span class="params">( <span class="keyword">char</span> * dest, <span class="keyword">const</span> <span class="keyword">char</span> * src )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strlen</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> * s )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">strtok</span><span class="params">( <span class="keyword">char</span> * token, <span class="keyword">const</span> <span class="keyword">char</span> * delimiters )</span></span>;</span><br></pre></td></tr></table></figure><h1 id="String-Class"><a href="#String-Class" class="headerlink" title="String Class"></a>String Class</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s = <span class="string">"abcdefg"</span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">( <span class="string">"abcdefg"</span> )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s; </span><br><span class="line">getline( <span class="built_in">cin</span>, s, <span class="string">'\n'</span> );</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s = <span class="string">"abcdefg"</span>;</span><br><span class="line"><span class="keyword">int</span> a = s.length();</span><br><span class="line">s.resize(<span class="number">32</span>); <span class="comment">// 将s设为32字符长,多余舍弃,不足空闲</span></span><br><span class="line">s.resize(<span class="number">32</span>, <span class="string">'='</span>); <span class="comment">// 多余舍弃,不足补‘=’</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s1 = <span class="string">"abcd"</span>, s2 = <span class="string">"efg"</span>;</span><br><span class="line">s1.append( s2 ); <span class="comment">// 将字符串s2追加到s1尾部</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s1 = <span class="string">"abcdefg"</span>, s2 = <span class="string">"abcdxyz"</span>;</span><br><span class="line"><span class="keyword">int</span> a = s1.compare( s2, <span class="number">0</span> ); <span class="comment">// 从0号位字符开始比较</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s1 = <span class="string">"abcdefg"</span>, s2 = <span class="string">"bcd"</span>;</span><br><span class="line"><span class="keyword">int</span> a = s1.find( s2, <span class="number">0</span> );</span><br></pre></td></tr></table></figure><h1 id="Dynamic-Storage-Allocation"><a href="#Dynamic-Storage-Allocation" class="headerlink" title="Dynamic Storage Allocation"></a>Dynamic Storage Allocation</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmalloc&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">malloc</span><span class="params">( <span class="keyword">unsigned</span> <span class="keyword">int</span> size )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">( <span class="keyword">void</span> * memblock )</span></span>;</span><br></pre></td></tr></table></figure><h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> * p;</span><br><span class="line">p = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">11</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">DuplicateString</span><span class="params">( <span class="keyword">char</span> * s )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> * t;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span>( !s )</span><br><span class="line">    &#123; </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"DuplicateString: Parameter Illegal."</span>; </span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    n = <span class="built_in">strlen</span>( s );</span><br><span class="line">    t = ( <span class="keyword">char</span> * )<span class="built_in">malloc</span>( n + <span class="number">1</span> );</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; n; i++ )</span><br><span class="line">    t[i] = s[i];</span><br><span class="line">    t[n] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> * p;</span><br><span class="line">p = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">11</span>);</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> * p = ( <span class="keyword">int</span> * )<span class="built_in">malloc</span>( <span class="number">10</span> * <span class="keyword">sizeof</span>( <span class="keyword">int</span> ) );</span><br><span class="line"><span class="built_in">free</span>( p );</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>( p ); p = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * p; p = <span class="keyword">new</span> <span class="keyword">int</span>; *p = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> * p; p = <span class="keyword">new</span>( <span class="keyword">int</span> ); *p = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> * p; p = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>); <span class="comment">// 将 *p 初始化为 10</span></span><br><span class="line"><span class="keyword">int</span> * p; p = <span class="keyword">new</span>(<span class="keyword">int</span>)(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> * p; p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>]; <span class="comment">// 分配 8 个元素的整数数组</span></span><br></pre></td></tr></table></figure><h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * p; p = <span class="keyword">new</span> <span class="keyword">int</span>; *p = <span class="number">10</span>; <span class="keyword">delete</span> p;</span><br><span class="line"><span class="keyword">int</span> * p; p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>]; <span class="keyword">delete</span>[] p;</span><br><span class="line"><span class="comment">// not delete p[ ]!</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p, *q;</span><br><span class="line">q = ( <span class="keyword">int</span>* )<span class="built_in">malloc</span>( <span class="keyword">sizeof</span>(<span class="keyword">int</span>) );</span><br><span class="line">p = q;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>( p ); </span><br><span class="line">p = <span class="literal">NULL</span>; <span class="comment">// q is dangling pointer</span></span><br></pre></td></tr></table></figure><h2 id="storage-leak"><a href="#storage-leak" class="headerlink" title="storage leak"></a>storage leak</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">int</span> * p = <span class="keyword">new</span> <span class="keyword">int</span>; </span><br><span class="line">    *p = <span class="number">10</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a; <span class="keyword">int</span> &amp; ref = a;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> &amp; ref = a;</span><br><span class="line">    a = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a: "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>; <span class="built_in">cout</span> &lt;&lt; <span class="string">"ref: "</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    ref = <span class="number">8</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a: "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>; <span class="built_in">cout</span> &lt;&lt; <span class="string">"ref: "</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="call-by-reference"><a href="#call-by-reference" class="headerlink" title="call by reference"></a>call by reference</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">( <span class="keyword">int</span> &amp; x, <span class="keyword">int</span> &amp; y )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t; t = x; x = y; y = t; <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>; </span><br><span class="line">    Swap( a, b ); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="constant-reference"><a href="#constant-reference" class="headerlink" title="constant reference"></a>constant reference</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> &amp; <span class="title">Inc</span><span class="params">( <span class="keyword">int</span> &amp; dest, <span class="keyword">const</span> <span class="keyword">int</span> &amp; alpha )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> &amp; <span class="title">Inc</span><span class="params">( <span class="keyword">int</span> &amp; dest, <span class="keyword">const</span> <span class="keyword">int</span> &amp; alpha )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dest += alpha; </span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>, c; </span><br><span class="line">    Inc( a, b ); </span><br><span class="line">    c = Inc(a, b)++; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Function-Pointer"><a href="#Function-Pointer" class="headerlink" title="Function Pointer"></a>Function Pointer</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> * ADT; <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keyword">void</span> * CADT;</span><br></pre></td></tr></table></figure><p>data type ()()</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> * ( * as_string )( ADT object );</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">DoTransformObjectIntoString</span><span class="params">( ADT object )</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> PtTransformIntoString( (PPOINT)object ); &#125;</span><br><span class="line">as_string = DoTransformObjectIntoString;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> * returned_value;</span><br><span class="line">PPOINT pt = PtCreate( <span class="number">10</span>, <span class="number">20</span> );</span><br><span class="line">as_string = DoTransformObjectIntoString;</span><br><span class="line">returned_value = as_string( (ADT)pt );</span><br></pre></td></tr></table></figure><p>example: qsort</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">qsort</span><span class="params">( <span class="keyword">void</span> * base, <span class="keyword">unsigned</span> <span class="keyword">int</span> number_of_elements,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">unsigned</span> <span class="keyword">int</span> size_of_elements,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> ( * compare )( <span class="keyword">const</span> <span class="keyword">void</span> *, <span class="keyword">const</span> <span class="keyword">void</span> * ) )</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"arrmanip.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUMBER_OF_ELEMENTS 8</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DoCompareObject</span><span class="params">( <span class="keyword">const</span> <span class="keyword">void</span> * e1, <span class="keyword">const</span> <span class="keyword">void</span> * e2 )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[NUMBER_OF_ELEMENTS];</span><br><span class="line">    GenerateIntegers( a, NUMBER_OF_ELEMENTS );</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Array generated at random as follows: \n"</span>;</span><br><span class="line">    PrintIntegers( a, NUMBER_OF_ELEMENTS );</span><br><span class="line">    qsort( a, NUMBER_OF_ELEMENTS, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), DoCompareObject );</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"After sorted: \n"</span>;</span><br><span class="line">    PrintIntegers( a, NUMBER_OF_ELEMENTS );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DoCompareObject</span><span class="params">( <span class="keyword">const</span> <span class="keyword">void</span> * e1, <span class="keyword">const</span> <span class="keyword">void</span> * e2 )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> CompareInteger( *(<span class="keyword">const</span> <span class="keyword">int</span> *)e1, *(<span class="keyword">const</span> <span class="keyword">int</span> *)e2 );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="Computer Science" scheme="http://yoursite.com/categories/Computer-Science/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Computer-Science/Programming/"/>
    
      <category term="C++" scheme="http://yoursite.com/categories/Computer-Science/Programming/C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="MOOC" scheme="http://yoursite.com/tags/MOOC/"/>
    
  </entry>
  
  <entry>
    <title>Python NumPy Basics</title>
    <link href="http://yoursite.com/2019/08/05/Python%20NumPy%20Basics/"/>
    <id>http://yoursite.com/2019/08/05/Python NumPy Basics/</id>
    <published>2019-08-05T04:00:00.000Z</published>
    <updated>2019-08-07T16:56:27.214Z</updated>
    
    <content type="html"><![CDATA[<p>This is a class note of NYU MFE Bootcamp, including contains basic knowledge of Python NumPy syntax and techniques. Understanding Data Types in Python to part of Operations of NumPy arrays was on Aug 5th; The rest was on Aug 6th.</p><h1 id="Understanding-Data-Types-in-Python"><a href="#Understanding-Data-Types-in-Python" class="headerlink" title="Understanding Data Types in Python"></a>Understanding Data Types in Python</h1><h2 id="Statically-typing-amp-Dynamic-typing"><a href="#Statically-typing-amp-Dynamic-typing" class="headerlink" title="Statically-typing &amp; Dynamic typing"></a>Statically-typing &amp; Dynamic typing</h2><p>A statically-typed language like C or Java requires each variable to be explicitly declared, while Python skips this specification.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    result += i</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>This means we can assign any kind of data to any variable.</p><h2 id="Behind-the-python-flexibility"><a href="#Behind-the-python-flexibility" class="headerlink" title="Behind the python: flexibility"></a>Behind the python: flexibility</h2><p>The standard Python implementation is written in C, which means every Python object is simply a cleverly-disguised C structure, not only its value, but other information as well.</p><h3 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h3><p>A single integer in Python 3.4 contains four pieces.</p><ul><li><code>ob_refcnt</code></li><li><code>ob_type</code></li><li><code>ob_size</code></li><li><code>ob_digit</code></li></ul><p>A python integer is a pointer to a position in memory containing all the Python object information, including the bytes that contain the integer value.</p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>List is almost the most flexibility type in Python.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = list(range(<span class="number">10</span>))</span><br><span class="line">L</span><br><span class="line">type(L[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]int</code></pre><p><strong>Change it to a list of strings:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L2 = [str(c) <span class="keyword">for</span> c <span class="keyword">in</span> L]</span><br><span class="line">L2</span><br><span class="line">type(L2[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>[&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;]str</code></pre><p>Or we can create heterogeneous lists:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L3 = [<span class="keyword">True</span>, <span class="string">"2"</span>, <span class="number">3.0</span>, <span class="number">4</span>]</span><br><span class="line">[type(item) <span class="keyword">for</span> item <span class="keyword">in</span> L3]</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>[bool, str, float, int]</code></pre><p>Flexibility comes with a cost (<strong>loss of storage and efficiency</strong>). In the special case that all variables are of the same type, much of this flexibility is redundant. Then comes with fixed-type NumPy-style array.</p><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p>The built in array module can be used to create dense arrays of a uniform type:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> array</span><br><span class="line">L = list(range(<span class="number">10</span>))</span><br><span class="line">A = array.array(<span class="string">'i'</span>, L)</span><br><span class="line">A</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array(&#39;i&#39;, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre><p>However, the NumPy Array is more efficient than array because of the operations on data.</p><h1 id="Overlook-of-NumPy-arrays"><a href="#Overlook-of-NumPy-arrays" class="headerlink" title="Overlook of NumPy arrays"></a>Overlook of NumPy arrays</h1><h2 id="Basic-NumPy-array-syntax"><a href="#Basic-NumPy-array-syntax" class="headerlink" title="Basic NumPy array syntax:"></a>Basic NumPy array syntax:</h2><p><strong>basic syntax:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.array([<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([1, 4, 2, 5, 3])</code></pre><p><strong>The type of elements in array should, but does not have to, be the same.  If the types do not match, Numpy will upcast if possible.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.array([<span class="number">3.14</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([3.14, 4.  , 2.  , 3.  ])</code></pre><p>Here, integers are up-cast to floating point. <strong>And we can use dtype keyword to set the data type:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], dtype=<span class="string">'float32'</span>)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([1., 2., 3., 4.], dtype=float32)</code></pre><h2 id="NumPy-array-as-matrix"><a href="#NumPy-array-as-matrix" class="headerlink" title="NumPy array as matrix"></a>NumPy array as matrix</h2><p><strong>Numpy arrays can explicity be muti-dimensional, using a list of lists:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nested lists result in multi-dimensional arrays</span></span><br><span class="line">np.array([range(i, i+<span class="number">3</span>) <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]])</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[2, 3, 4],       [4, 5, 6],       [6, 7, 8]])</code></pre><p>for better understanding, we can run a 2*2 array:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.array([range(i, i+<span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">2</span>, <span class="number">4</span>]])</span><br></pre></td></tr></table></figure><p>output</p><pre><code>array([[2, 3],       [4, 5]])</code></pre><p>or a 3*10 array:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.array([range(i, i+<span class="number">10</span>) <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]])</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11],       [ 4,  5,  6,  7,  8,  9, 10, 11, 12, 13],       [ 6,  7,  8,  9, 10, 11, 12, 13, 14, 15]])</code></pre><p><strong>It is more efficient to create arrays from scratch using routines built into Numpy:</strong></p><p><strong>zero array</strong> with 10 integer:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.zeros(<span class="number">10</span>, dtype=int)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])</code></pre><p><strong>one array:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.ones((<span class="number">3</span>,<span class="number">5</span>), dtype=float)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[1., 1., 1., 1., 1.],       [1., 1., 1., 1., 1.],       [1., 1., 1., 1., 1.]])</code></pre><p><strong>An array with some identical elements:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.full((<span class="number">3</span>, <span class="number">5</span>), <span class="number">3.14</span>)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[3.14, 3.14, 3.14, 3.14, 3.14],       [3.14, 3.14, 3.14, 3.14, 3.14],       [3.14, 3.14, 3.14, 3.14, 3.14]])</code></pre><p><strong>A linear sequence</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create an array filled with a linear sequence</span></span><br><span class="line"><span class="comment"># starting at 0, this is similar to the built-in range() function</span></span><br><span class="line">np.arange(<span class="number">0</span>, <span class="number">20</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])</code></pre><p><strong>linspace</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create an array of five values evenly spaced</span></span><br><span class="line"><span class="comment"># between 0 and 1</span></span><br><span class="line">np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([0.  , 0.25, 0.5 , 0.75, 1.  ])</code></pre><p><strong>uniformly distributed random value</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create a 3*e arrayof uniformly distributed random values between 0 and 1</span></span><br><span class="line">np.random.random((<span class="number">3</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[0.57226098, 0.56849713, 0.63410602],       [0.88335333, 0.46056684, 0.95494879],       [0.22305721, 0.18478839, 0.78352821]])</code></pre><p><strong>normal distributed random value</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.normal(<span class="number">0</span>, <span class="number">1</span>, (<span class="number">3</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[ 1.05100904,  1.71407429,  0.75356105],       [-0.61885082,  0.43198626,  0.63819954],       [-0.53911965,  1.07533192, -0.27227068]])</code></pre><p><strong>random value</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create a 3*3 array of random integers in the interval [0, 10]</span></span><br><span class="line">np.random.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">3</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[0, 7, 1],       [2, 7, 6],       [7, 8, 5]])</code></pre><p><strong>create identity matrix</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create a 3*3 identity matrix</span></span><br><span class="line">np.eye(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[1., 0., 0.],       [0., 1., 0.],       [0., 0., 1.]])</code></pre><p><strong>uninitialized array</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create an uninitialized array of three integers</span></span><br><span class="line"><span class="comment"># the values will be whatever happens to </span></span><br><span class="line"><span class="comment"># already exist at that memory location</span></span><br><span class="line">np.empty(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([1., 1., 1.])</code></pre><p><strong>Standard Data Types</strong></p><p>numpy is also built in C, the data type  can be specified using a string:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.zeros(<span class="number">10</span>, dtype = <span class="string">'int16'</span>)</span><br><span class="line">np.zeros(<span class="number">10</span>, dtype = np.int16) <span class="comment">#same</span></span><br></pre></td></tr></table></figure><p>output</p><pre><code>array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int16)</code></pre><h1 id="Operations-of-NumPy-arrays"><a href="#Operations-of-NumPy-arrays" class="headerlink" title="Operations of NumPy arrays"></a>Operations of NumPy arrays</h1><ul><li>attributes of arrays</li><li>indexing of arrays</li><li>slicing of arrays</li><li>reshaping of arrays</li><li>joining and splitting of arrays</li></ul><h2 id="Attributes-of-arrays"><a href="#Attributes-of-arrays" class="headerlink" title="Attributes of arrays"></a>Attributes of arrays</h2><p><strong>determining the size, shape, memory consumption, and data types of arrays</strong></p><p>We can use random number generator, which we will seed with a set value in order to ensure that the same random arrays are generated each time this code is run:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">0</span>)<span class="comment"># seed for reproducibility</span></span><br><span class="line">x1 = np.random.randint(<span class="number">10</span>, size=<span class="number">6</span>)</span><br><span class="line">x2 = np.random.randint(<span class="number">10</span>, size=(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">x3 = np.random.randint(<span class="number">10</span>, size=(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">print(x1)</span><br><span class="line">print(x2)</span><br><span class="line">print(x3)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>[5 0 3 3 7 9][[3 5 2 4] [7 6 8 8] [1 6 7 7]]([[[8, 1, 5, 9, 8],[9, 4, 3, 0, 3],[5, 0, 2, 3, 8],[1, 3, 3, 3, 7]],[[0, 1, 9, 9, 0],[4, 7, 3, 2, 7],[2, 0, 0, 4, 5],[5, 6, 8, 4, 1]],[[4, 9, 8, 1, 1],[7, 9, 9, 3, 6],[7, 2, 0, 3, 5],[9, 4, 4, 6, 4]]])</code></pre><p><strong>each array has attributes ndim, shape and size:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"x3 ndim: "</span>, x3.ndim)</span><br><span class="line">print(<span class="string">"x3 shape: "</span>, x3.shape)</span><br><span class="line">print(<span class="string">"x3 size: "</span>, x3.size)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>x3 ndim:  3x3 shape:  (3, 4, 5)x3 size:  60</code></pre><p><strong>we can check the type of x3</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"dtype:"</span>, x3.dtype)</span><br></pre></td></tr></table></figure><pre><code>dtype: int32</code></pre><p><strong><code>itemsize</code> is another attribute, which list the size in bytes of each array element, and <code>nbytes</code> list the total size of the array:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"itemsize: "</span>, x3.itemsize, <span class="string">"bytes"</span>)</span><br></pre></td></tr></table></figure><pre><code>itemsize:  4</code></pre><p>In general, we expect that <strong>nbytes is equal to itemsize times size</strong>.</p><h2 id="Array-Indexing"><a href="#Array-Indexing" class="headerlink" title="Array Indexing"></a>Array Indexing</h2><p><strong>Getting and setting the value of individual array elements</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(x1[<span class="number">0</span>])</span><br><span class="line">print(x1[<span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>57</code></pre><p><strong>use negative indices:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(x1[<span class="number">-1</span>])</span><br><span class="line">print(x1[<span class="number">-2</span>])</span><br></pre></td></tr></table></figure><p>ouptut:</p><pre><code>97</code></pre><p><strong>items can be accessed using a comma-separated tuple of indices:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(x2)</span><br><span class="line">print(x2[<span class="number">2</span>, <span class="number">0</span>])</span><br><span class="line">print(x2[<span class="number">2</span>, <span class="number">-1</span>])</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>[[3 5 2 4] [7 6 8 8] [1 6 7 7]]17</code></pre><p><strong>Values can be modified using any of the above index notation:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(x2)</span><br><span class="line">x2[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">12</span></span><br><span class="line">print(x2)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>[[3 5 2 4] [7 6 8 8] [1 6 7 7]][[12  5  2  4] [ 7  6  8  8] [ 1  6  7  7]]</code></pre><p>Numpy arrays have a fixed type. The different type will be <strong>silently truncated automatically</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x1[<span class="number">0</span>] = <span class="number">3.14159</span> <span class="comment"># this will be truncated!</span></span><br><span class="line">x1</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([3, 0, 3, 3, 7, 9])</code></pre><h2 id="Array-Slicing"><a href="#Array-Slicing" class="headerlink" title="Array Slicing"></a>Array Slicing</h2><p><strong>Getting and setting smaller subarrays within a larger array</strong></p><p>The standard Python list slicing is:</p><p>​    <code>x[start:stop:step]</code></p><p>The default to the values start = 0, stop = size of dimension, step = 1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">10</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre><h3 id="One-dimension"><a href="#One-dimension" class="headerlink" title="One-dimension"></a>One-dimension</h3><p><strong>This is operation of one-dimensional subarrays</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x[:<span class="number">5</span>] <span class="comment"># first five elements</span></span><br><span class="line">x[<span class="number">5</span>:]</span><br><span class="line">x[<span class="number">4</span>:<span class="number">7</span>] <span class="comment"># middle sub-array</span></span><br><span class="line">x[::<span class="number">2</span>] <span class="comment"># every other element</span></span><br><span class="line">x[<span class="number">1</span>::<span class="number">2</span>] <span class="comment"># every other element, starting at index1</span></span><br><span class="line">x[::<span class="number">-1</span>] <span class="comment"># reversed</span></span><br><span class="line">x[<span class="number">5</span>::<span class="number">-2</span>] <span class="comment"># reversed every other from index 5</span></span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([0, 1, 2, 3, 4])array([5, 6, 7, 8, 9])array([4, 5, 6])array([0, 2, 4, 6, 8])array([1, 3, 5, 7, 9])array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])array([5, 3, 1])</code></pre><h3 id="Multi-dimension"><a href="#Multi-dimension" class="headerlink" title="Multi-dimension"></a>Multi-dimension</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x2</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[12,  5,  2,  4],       [ 7,  6,  8,  8],       [ 1,  6,  7,  7]])</code></pre><p><strong>Some operations of multi-dimensional subarrays</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x2[:<span class="number">2</span>, :<span class="number">3</span>] <span class="comment"># first two rows, three columns</span></span><br><span class="line">x2[:<span class="number">3</span>, ::<span class="number">2</span>] <span class="comment">#all rows, every other column</span></span><br><span class="line">x2[::<span class="number">-1</span>, ::<span class="number">-1</span>] <span class="comment"># subarray dimensions can even be reversed together</span></span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[12,  5,  2],       [ 7,  6,  8]])array([[12,  2],       [ 7,  8],       [ 1,  7]])array([[ 7,  7,  6,  1],       [ 8,  8,  6,  7],       [ 4,  2,  5, 12]])</code></pre><p><strong>Accessing of single rows or columns of an array can be done by combining indexing and slicing, using an empty slice marked by a single colon (:):</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(x2[:,<span class="number">0</span>]) <span class="comment">#first column of x2</span></span><br><span class="line">print(x2[<span class="number">0</span>,:]) <span class="comment">#first row of x2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># In the case of row access, the empty slice can be omitted for a more compact syntax</span></span><br><span class="line"></span><br><span class="line">print(x2[<span class="number">0</span>]) <span class="comment">#equivalent</span></span><br></pre></td></tr></table></figure><p>output:</p><pre><code>[12  7  1][12  5  2  4][12  5  2  4]</code></pre><h3 id="Copy-amp-No-Copy-Subarrays"><a href="#Copy-amp-No-Copy-Subarrays" class="headerlink" title="Copy &amp; No-Copy Subarrays"></a>Copy &amp; No-Copy Subarrays</h3><p><strong>NumPy array slice return views rather than copies of the array data. However, Python list slicing will be copies.</strong></p><ul><li><p>Changed Example</p><p>Extract a 2*2 subarray from this:</p></li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x2_sub = x2[:<span class="number">2</span>, :<span class="number">2</span>]</span><br><span class="line">print(x2_sub)</span><br></pre></td></tr></table></figure><pre><code>  [[12  5]   [ 7  6]]</code></pre><p>  <strong>The original array is changed:</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x2_sub[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">99</span></span><br><span class="line">print(x2_sub)</span><br><span class="line">print(x2)</span><br></pre></td></tr></table></figure><p>  output:</p><pre><code>  [[99  5]   [ 7  6]]  [[99  5  2  4]   [ 7  6  8  8]   [ 1  6  7  7]]</code></pre><p>  it is a useful property, we can access and process pieces of these datasets without the need to copy the underlying data buffer.</p><ul><li><p>Unchanged Example</p><p>we can also create a explicitly copy the data within an array or a subarray.</p></li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x2_sub_copy = x2[:<span class="number">2</span>,:<span class="number">2</span>].copy()</span><br><span class="line">print(x2_sub_copy)</span><br><span class="line">print(x2)</span><br></pre></td></tr></table></figure><p>  output:</p><pre><code>  [[99  5]   [ 7  6]]  [[99  5  2  4]   [ 7  6  8  8]   [ 1  6  7  7]]</code></pre><p>  If we modify this subarray, <strong>the original array is not touched:</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x2_sub_copy[<span class="number">0</span>,<span class="number">0</span>] = <span class="number">42</span></span><br><span class="line">print(x2_sub_copy)</span><br><span class="line">print(x2)</span><br></pre></td></tr></table></figure><p>  output:</p><pre><code>  [[42  5]   [ 7  6]]  [[99  5  2  4]   [ 7  6  8  8]   [ 1  6  7  7]]</code></pre><h2 id="Array-Reshaping"><a href="#Array-Reshaping" class="headerlink" title="Array Reshaping"></a>Array Reshaping</h2><p><strong>Changing the shape of a given array</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># put number 1-9 in a 3*3 grid:</span></span><br><span class="line">grid = np.arange(<span class="number">1</span>,<span class="number">10</span>).reshape((<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">print(grid)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>[[1 2 3] [4 5 6] [7 8 9]]</code></pre><p>The size of the initial array must match the size of the reshaped array. The reshape method will use a no-copy view of the initial array.</p><p>We can use <code>newaxis</code> method to realize the reshape effect.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">x.reshape((<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">x[np.newaxis, :]</span><br><span class="line"></span><br><span class="line">x.reshape((<span class="number">3</span>,<span class="number">1</span>))</span><br><span class="line">x[:, np.newaxis]</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[1, 2, 3]])array([[1, 2, 3]])array([[1],       [2],       [3]])array([[1],       [2],       [3]])</code></pre><h2 id="Array-concatenation-and-splitting"><a href="#Array-concatenation-and-splitting" class="headerlink" title="Array concatenation and splitting"></a>Array concatenation and splitting</h2><p><strong>Combining multiple arrays into one, and splitting one array into many</strong></p><h3 id="Concatenation"><a href="#Concatenation" class="headerlink" title="Concatenation"></a>Concatenation</h3><p><strong><code>concatenation</code>: combine multiple arrays into one</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">y = np.array([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line">np.concatenate([x, y])</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([1, 2, 3, 3, 2, 1])</code></pre><p>In two-dimensional situation, default is zero-indexed.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grid = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">               [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="comment"># concatenate along the first axis</span></span><br><span class="line">np.concatenate([grid, grid])</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[1, 2, 3],       [4, 5, 6],       [1, 2, 3],       [4, 5, 6]])</code></pre><p>We can concatenate along the second axis (zero-indexed).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># zero-indexed</span></span><br><span class="line">np.concatenate([grid, grid], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[1, 2, 3, 1, 2, 3],       [4, 5, 6, 4, 5, 6]])</code></pre><p><strong><code>vstack</code>:  vertically stack the arrays</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">grid = np.array([[<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>],</span><br><span class="line">                [<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>]])</span><br><span class="line">np.vstack([x, grid])</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[1, 2, 3],       [9, 8, 7],       [6, 5, 4]])</code></pre><p><strong><code>hstack</code>: horizontally stack the arrays</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># horizontal</span></span><br><span class="line">y = np.array([[<span class="number">99</span>],</span><br><span class="line">             [<span class="number">99</span>]])</span><br><span class="line">np.hstack([grid, y])</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[ 9,  8,  7, 99],       [ 6,  5,  4, 99]])</code></pre><h3 id="Spliting"><a href="#Spliting" class="headerlink" title="Spliting"></a>Spliting</h3><p><strong><code>split</code>: opposite of concatenation.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">x1, x2, x3 = np.split(x, [<span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line">print(x1, x2, x3)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>[1 2 3] [99 99] [3 2 1]</code></pre><p>Notice that <em>N</em> split-points, leads to <em>N+1</em> subarrays.</p><p><code>np.hsplit</code> and <code>np.vsplit</code> are similar. In multi-dimensional situation:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grid = np.arange(<span class="number">16</span>).reshape((<span class="number">4</span>, <span class="number">4</span>))</span><br><span class="line">grid</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[ 0,  1,  2,  3],       [ 4,  5,  6,  7],       [ 8,  9, 10, 11],       [12, 13, 14, 15]])</code></pre><p><code>np.vsplit</code> and <code>np.hsplit</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">upper, lower = np.vsplit(grid, [<span class="number">2</span>])</span><br><span class="line">print(upper)</span><br><span class="line">print(lower)</span><br><span class="line"></span><br><span class="line">left, right = np.hsplit(grid, [<span class="number">2</span>])</span><br><span class="line">print(left)</span><br><span class="line">print(right)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>[[0 1 2 3] [4 5 6 7]][[ 8  9 10 11] [12 13 14 15]][[ 0  1] [ 4  5] [ 8  9] [12 13]][[ 2  3] [ 6  7] [10 11] [14 15]]</code></pre><h1 id="Computation-and-Functions-in-NumPy"><a href="#Computation-and-Functions-in-NumPy" class="headerlink" title="Computation and Functions in NumPy"></a>Computation and Functions in NumPy</h1><h2 id="The-speed-of-computation-on-Numpy"><a href="#The-speed-of-computation-on-Numpy" class="headerlink" title="The speed of computation on Numpy"></a>The speed of computation on Numpy</h2><p>Computation can be very fast or very slow. The key to making it fast is to use vectorized operations, generally implemented through universal functions(ufuncs).</p><h3 id="The-Slowness-of-Loops"><a href="#The-Slowness-of-Loops" class="headerlink" title="The Slowness of Loops"></a>The Slowness of Loops</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># slowness of loops</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_reciprocals</span><span class="params">(values)</span>:</span></span><br><span class="line">    output = np.empty(len(values))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(values)):</span><br><span class="line">        output[i] = <span class="number">1.0</span> / values[i]</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">values = np.random.randint(<span class="number">1</span>, <span class="number">10</span>, size = <span class="number">5</span>)</span><br><span class="line">compute_reciprocals(values)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([0.16666667, 1.        , 0.25      , 0.25      , 0.125     ])</code></pre><p>If we use  this code for a large input, the operation is very slow.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># IPython's %timeit</span></span><br><span class="line">big_array = np.random.randint(<span class="number">1</span>, <span class="number">100.</span> size=<span class="number">1000000</span>)</span><br><span class="line">%timeit compute_reciprocals(big_array)</span><br></pre></td></tr></table></figure><p>It turns out that the bottleneck here is not the operations themselves, but the type-checking and function dispatches that CPython must do at each cycle of the loop.</p><h3 id="Vectorized-Operation"><a href="#Vectorized-Operation" class="headerlink" title="Vectorized Operation"></a>Vectorized Operation</h3><p>However, Numpy provides a convenient interface to compile routine, which is named as a vectorized operation.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(compute_reciprocals(values))</span><br><span class="line">print(<span class="number">1.0</span> / values)</span><br><span class="line">%timeit (<span class="number">1.0</span> / big_array)</span><br></pre></td></tr></table></figure><p><strong>Vectorized operations in Numpy are implemented via ufuncs, whose main purpose is to quickly execute repeated operations or values in Numpy arrays.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.arange(<span class="number">5</span>) / np.arange(<span class="number">1</span>,<span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([0.        , 0.5       , 0.66666667, 0.75      , 0.8       ])</code></pre><p><strong>Here is the multi-dimensional situation:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"><span class="number">2</span> ** x</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[  1,   2,   4],       [  8,  16,  32],       [ 64, 128, 256]], dtype=int32)</code></pre><p>We can use these ufuncs to realize various purpose.</p><h2 id="Computation-via-NumPy-UFuncs"><a href="#Computation-via-NumPy-UFuncs" class="headerlink" title="Computation via NumPy UFuncs"></a>Computation via NumPy UFuncs</h2><p>Ufuncs exist in two flavors:</p><ul><li>unary ufuncs, which operate on a single input</li><li>binary ufuncs, which operate on two inputs</li></ul><p>We can use uFuncs to achieve arithmetic purpose.</p><h3 id="Array-arithmetic"><a href="#Array-arithmetic" class="headerlink" title="Array arithmetic"></a>Array arithmetic</h3><p><strong>The basic arithmetic operations</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x=np.arange(<span class="number">4</span>)</span><br><span class="line">print(<span class="string">"x     ="</span>, x)</span><br><span class="line">print(<span class="string">"x + 5 ="</span>, x + <span class="number">5</span>)</span><br><span class="line">print(<span class="string">"x - 5 ="</span>, x - <span class="number">5</span>)</span><br><span class="line">print(<span class="string">"x + 5 ="</span>, x + <span class="number">5</span>)</span><br><span class="line">print(<span class="string">"x + 5 ="</span>, x + <span class="number">5</span>)</span><br><span class="line">print(<span class="string">"x + 5 ="</span>, x + <span class="number">5</span>)</span><br><span class="line">print(<span class="string">"-x    ="</span>, -x) <span class="comment"># negation</span></span><br><span class="line">print(<span class="string">"x ** 2 ="</span>, x ** <span class="number">2</span>) <span class="comment"># exponentiation</span></span><br><span class="line">print(<span class="string">"x % 2 ="</span>, x &amp; <span class="number">2</span>) <span class="comment"># modulus</span></span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x     = [0 1 2 3]</span><br><span class="line">x + 5 = [5 6 7 8]</span><br><span class="line">x - 5 = [-5 -4 -3 -2]</span><br><span class="line">x + 5 = [5 6 7 8]</span><br><span class="line">x + 5 = [5 6 7 8]</span><br><span class="line">x + 5 = [5 6 7 8]</span><br><span class="line">-x    = [ 0 -1 -2 -3]</span><br><span class="line">x ** 2 = [0 1 4 9]</span><br><span class="line">x % 2 = [0 0 2 2]</span><br></pre></td></tr></table></figure><p>We can also combine them together. these arithmetic are simply wrappers specific functions built into NumPy.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(-(<span class="number">0.5</span>* + <span class="number">1</span>)**<span class="number">2</span>)</span><br><span class="line">print(np.add(x, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-0.25</span><br><span class="line">[2 3 4 5]</span><br></pre></td></tr></table></figure><p>Other arithmetic operators and functions include:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">abx(x)</span><br><span class="line">np.exp(x)</span><br><span class="line">np.log(x)</span><br><span class="line">np.sin(x)</span><br></pre></td></tr></table></figure><p><strong>Specialized functions used in statistics exist in scipy</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> special</span><br><span class="line">x = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>]</span><br><span class="line">print(<span class="string">"gamma(x)      ="</span>, special.gamma(x))</span><br><span class="line">print(<span class="string">"ln|gamma(x)|  ="</span>, special.gammaln(x))</span><br><span class="line">print(<span class="string">"beta(x, 2)    ="</span>, special.beta(x, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gamma(x)      = [1.0000e+00 2.4000e+01 3.6288e+05]</span><br><span class="line">ln|gamma(x)|  = [ 0.          3.17805383 12.80182748]</span><br><span class="line">beta(x, 2)    = [0.5        0.03333333 0.00909091]</span><br></pre></td></tr></table></figure><p><strong>To summarize the typical values in a dataset, we can use aggregates function.</strong> NumPy’s aggregate function version is computed much more quickly.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = np.random.random(<span class="number">100</span>)</span><br><span class="line">print(sum(L))</span><br><span class="line">print(np.sum(L))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">47.620210778723894</span><br><span class="line">47.620210778723894</span><br></pre></td></tr></table></figure><p>Timing the different functions:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">big_array = np.random.rand(<span class="number">1000000</span>)</span><br><span class="line">%timeit sum(big_array)</span><br><span class="line">%timeit np.sum(big_array)</span><br></pre></td></tr></table></figure><p>ouptut:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">113 ms ± 7.37 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</span><br><span class="line">1.28 ms ± 69.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)</span><br></pre></td></tr></table></figure><p><strong>For min, max, sum, and several other NumPy aggregates, a shorter syntax is to use methods of the array object itself:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">min(big_array), max(big_array)</span><br><span class="line">np.min(big_array), np.max(big_array)</span><br><span class="line">print(big_array.min(), big_array.max(), big_array.sum())</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(7.476608001599772e-07, 0.9999999017465359)</span><br><span class="line">(7.476608001599772e-07, 0.9999999017465359)</span><br><span class="line">7.476608001599772e-07 0.9999999017465359 499703.64780246833</span><br></pre></td></tr></table></figure><p><strong>For multi-dimensional aggregates, there are three situation: the entire array, the row and the column.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">M = np.random.random((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">print(M)</span><br><span class="line">print(M.sum())</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[[0.31678953 0.12015542 0.47115746 0.91046151]</span><br><span class="line"> [0.66547603 0.36825635 0.79325825 0.2072341 ]</span><br><span class="line"> [0.73285524 0.39698562 0.5593977  0.514694  ]]</span><br><span class="line">6.0567212054611375</span><br></pre></td></tr></table></figure><p>To calculate aggregate from an axis.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(M.min(axis=<span class="number">0</span>))</span><br><span class="line">print(M.max(axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[0.31678953 0.12015542 0.47115746 0.2072341 ]</span><br><span class="line">[0.91046151 0.79325825 0.73285524]</span><br></pre></td></tr></table></figure><p><strong>The axis keyword specifies the dimension of the array will be collapsed, rather than the dimension that will be returned.</strong></p><p>additionally, most aggregates have a NaN-safe counterpart that computes the result while ignoring values, for example, <code>np.sum</code> and <code>np.nansum</code>.</p><h2 id="Example-What-is-Average-Height-of-US-Presidents"><a href="#Example-What-is-Average-Height-of-US-Presidents" class="headerlink" title="Example: What is Average Height of US Presidents?"></a>Example: What is Average Height of US Presidents?</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(<span class="string">'E:/NYU/BootCamp/Bootcamp Onsite/Afternoon/python/president_heights.csv'</span>)</span><br><span class="line"><span class="comment"># data.head()</span></span><br><span class="line">heights = np.array(data[<span class="string">'height(cm)'</span>])</span><br><span class="line">print(heights)</span><br><span class="line">print(<span class="string">"Mean height: "</span>, heights.mean())</span><br><span class="line">print(<span class="string">"Standard deviation:"</span>, heights.std())</span><br><span class="line">print(<span class="string">"Minimum height: "</span>, heights.min())</span><br><span class="line">print(<span class="string">"Maximum height: "</span>, heights.max())</span><br><span class="line">print(<span class="string">"25th percentile: "</span>, np.percentile(heights, <span class="number">25</span>))</span><br><span class="line">print(<span class="string">"Median: "</span>, np.median(heights))</span><br><span class="line">print(<span class="string">"75th percentile: "</span>, np.percentile(heights, <span class="number">75</span>))</span><br></pre></td></tr></table></figure><p>output:</p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>order</th>      <th>name</th>      <th>height(cm)</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>George Washington</td>      <td>189</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>John Adams</td>      <td>170</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>Thomas Jefferson</td>      <td>189</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>James Madison</td>      <td>163</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>James Monroe</td>      <td>183</td>    </tr>  </tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[189 170 189 163 183 171 185 168 173 183 173 173 175 178 183 193 178 173</span><br><span class="line"> 174 183 183 168 170 178 182 180 183 178 182 188 175 179 183 193 182 183</span><br><span class="line"> 177 185 188 188 182 185]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn; seaborn.set() <span class="comment"># set  plot style</span></span><br><span class="line"></span><br><span class="line">plt.hist(heights)</span><br><span class="line">plt.title(<span class="string">'Height Distributtion of US Presidents'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'height (cm)'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'number'</span>)</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Text(0, 0.5, &apos;number&apos;)</span><br></pre></td></tr></table></figure><p><img src="E:/Blog/source/_posts/output_3_1.png" alt="png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is a class note of NYU MFE Bootcamp, including contains basic knowledge of Python NumPy syntax and techniques. Understanding Data Ty
      
    
    </summary>
    
      <category term="Computer Science" scheme="http://yoursite.com/categories/Computer-Science/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Computer-Science/Programming/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/Computer-Science/Programming/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="NYU" scheme="http://yoursite.com/tags/NYU/"/>
    
      <category term="Numpy" scheme="http://yoursite.com/tags/Numpy/"/>
    
      <category term="Bootcamp" scheme="http://yoursite.com/tags/Bootcamp/"/>
    
  </entry>
  
  <entry>
    <title>The Unamiable but Worthwhile Age of 22</title>
    <link href="http://yoursite.com/2019/03/28/The%20Unamiable%20but%20Worthwhile%20Age%20of%2022/"/>
    <id>http://yoursite.com/2019/03/28/The Unamiable but Worthwhile Age of 22/</id>
    <published>2019-03-28T16:00:00.000Z</published>
    <updated>2019-03-29T13:32:01.967Z</updated>
    
    <content type="html"><![CDATA[<p>It appears to me that, by flipping the screen at the tail of the age of 22, I only posted 10 moments on WeChat in the pasted year. Having no idea how I will estimate it after many years, I would like to write my frustration and growth, compared to the wonderful life created by the images on the social media, briefly but seriously.</p><p>Around February last year, I had to experience a gap year without submitting the applications, for the simple reason that the English tests are unfavorable. Thus, the beginning of the age of 22 is a little disappointing for me. Going back to the campus in the last undergraduate semester drove me kind of nervous and embarrassed: after all, lack of offers from both postgraduate schools and employers, as well as consumption of parents’ money in the next few years, was not a honored situation to show. But I was released later because friendly classmates and considerate colleagues didn’t regard it as a big matter, which taught me that peer pressure which always appears in several steps in life is such a subtle mood that on the one hand it stems from personal initiative, but on the other hand, also more importantly, we had better not be coerced by it so as to live in an anxious but unconstructive situation.</p><p>Now that having decided to apply in the next year, I just wanted to do an internship to accumulate more working experience, which is also the requirement for graduation. Fortunately, I got the opportunity, via Peng, to be a part time assistant in RB to assist Arielle, Peiyao, Jass, Jessie and other mentors in finishing a challenging but interesting project from March to May. Not only did I learn the way of thinking as a consultant with the knowledge about the Internet of Things &amp; Energy and cases, but acquaint and make friends with excellent colleagues and peers. At the same time, I completed my thesis during this period under the routine of library-canteen-dormitory. To be honest, it was exhausting but fulfilling.</p><p>Time flies. Before the commencement, graduation trip fascinates me to fly to Chongqing, Chengdu and Xi’an with other 11 classmates, during which the first time disco dancing, airbnb living, hangover, love stories and et cetera all constituted one of the most memorable experience in my life. I appreciated it. However, graduation process cannot be stoppable, even if I still lived in Lin’s dorm 2 weeks after commencement. The old days, I missed them.</p><p>Oddly enough, the sense of graduation is not strong for me, perhaps because I still have the mission to complete. In August, I went to Beijing and restarted the fight with ETS, which last to November and December. I met numerous comrades in similar situation with dreams but struggles to get the points. The details in these stories are complicated, even unperfect, but the important thing was that I survived. I still remember the slogan of ETS: “Go Anywhere From Here.” It may means how widespread and well-accepted it is all over the world. However, I prefer regarding it as below: after beating it, anyone will be bestowed the courage to go anywhere.</p><p>I spent most of my struggling time at home, Zhengzhou, with parents, which was also an appropriate time to consider what I really want and what really matters in life. In Zhengzhou, there is an English corner where I have met a group of sagacious and experienced people. At the meantime, I learned how to cook and feed myself, how to drive a car, and how to deal with my inner impulse and frustration without a supervision and “normal” pace.</p><p>From the aspect of the result of my application, the age of 22 is unamiable and unperfect, but I still eager to regard it as a worthwhile and well-rounded wealth, because I still need my endeavor to protect my dream in the brand new age of 23.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It appears to me that, by flipping the screen at the tail of the age of 22, I only posted 10 moments on WeChat in the pasted year. Having
      
    
    </summary>
    
      <category term="Thoughts" scheme="http://yoursite.com/categories/Thoughts/"/>
    
      <category term="Personal Journals" scheme="http://yoursite.com/categories/Thoughts/Personal-Journals/"/>
    
    
      <category term="Journal" scheme="http://yoursite.com/tags/Journal/"/>
    
      <category term="Annual Letter" scheme="http://yoursite.com/tags/Annual-Letter/"/>
    
  </entry>
  
  <entry>
    <title>What I Have Lived For</title>
    <link href="http://yoursite.com/2019/03/20/What%20I%20Have%20Lived%20For/"/>
    <id>http://yoursite.com/2019/03/20/What I Have Lived For/</id>
    <published>2019-03-20T16:00:00.000Z</published>
    <updated>2019-03-21T14:01:10.156Z</updated>
    
    <content type="html"><![CDATA[<p><em>This prose is the prologue to Bertrand Russell’s Autobiography, where the three passions have been motivating me since the high school. Below is Russell’s original text:</em></p><p>Three passions, simple but overwhelmingly strong, have governed my life: the longing for love, the search for knowledge, and unbearable pity for the suffering of mankind. These passions, like great winds, have blown me hither and thither, in a wayward course, over a great ocean of anguish, reaching to the very verge of despair.</p><p>I have sought love, first, because it brings ecstasy - ecstasy so great that I would often have sacrificed all the rest of life for a few hours of this joy. I have sought it, next, because it relieves loneliness—that terrible loneliness in which one shivering consciousness looks over the rim of the world into the cold unfathomable lifeless abyss. I have sought it finally, because in the union of love I have seen, in a mystic miniature, the prefiguring vision of the heaven that saints and poets have imagined. This is what I sought, and though it might seem too good for human life, this is what—at last—I have found.</p><p>With equal passion I have sought knowledge. I have wished to understand the hearts of men. I have wished to know why the stars shine. And I have tried to apprehend the Pythagorean power by which number holds sway above the flux. A little of this, but not much, I have achieved.</p><p>Love and knowledge, so far as they were possible, led upward toward the heavens. But always pity brought me back to earth. Echoes of cries of pain reverberate in my heart. Children in famine, victims tortured by oppressors, helpless old people a burden to their sons, and the whole world of loneliness, poverty, and pain make a mockery of what human life should be. I long to alleviate this evil, but I cannot, and I too suffer.</p><p>This has been my life. I have found it worth living, and would gladly live it again if the chance were offered me.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;This prose is the prologue to Bertrand Russell’s Autobiography, where the three passions have been motivating me since the high schoo
      
    
    </summary>
    
      <category term="Thoughts" scheme="http://yoursite.com/categories/Thoughts/"/>
    
      <category term="Other" scheme="http://yoursite.com/categories/Thoughts/Other/"/>
    
    
      <category term="Journal" scheme="http://yoursite.com/tags/Journal/"/>
    
  </entry>
  
</feed>
