<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Guangnan&#39;s Notes</title>
  
  <subtitle>I rest, I rust</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-12T16:29:34.943Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ygnmax</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NYU Tandon Webinar</title>
    <link href="http://yoursite.com/2019/02/12/NYU%20Tandon%20Webinar/"/>
    <id>http://yoursite.com/2019/02/12/NYU Tandon Webinar/</id>
    <published>2019-02-11T16:00:00.000Z</published>
    <updated>2019-02-12T16:29:34.943Z</updated>
    
    <content type="html"><![CDATA[<p>NYU Tandon Engineering Admitted Student Webinar</p><p>I attended the NYU Engineering Webinar which introduces some basic information of NYU as well as Tandon Engineering school, life in NYC, future opportunities and the next steps for admitted students. Here are some impressive slides.</p><ul><li><strong>NYU has 3 portal campuses and 11 global academic centers where NYU students have access to the academic resources.</strong></li></ul><p><a href="https://i.loli.net/2019/02/13/5c62ee0a0f673.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/02/13/5c62ee0a0f673.png" alt="NYU Without Wall.png"></a></p><ul><li><strong>Numbers of NYU speak for themselves. </strong></li></ul><p><a href="https://i.loli.net/2019/02/13/5c62ee0a45c90.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/02/13/5c62ee0a45c90.png" alt="NYU Rank.png"></a></p><ul><li><strong>The life in New York city will be fabulous.</strong></li></ul><p><a href="https://i.loli.net/2019/02/13/5c62ee0a431c3.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/02/13/5c62ee0a431c3.png" alt="NYU Life in NYC.png"></a></p><ul><li><strong>The value of graduates from NYU Tandon School of Engineering</strong> </li></ul><p><a href="https://i.loli.net/2019/02/13/5c62ee0a3ff12.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/02/13/5c62ee0a3ff12.png" alt="NYU Graduate.png"></a></p><ul><li><strong>The cost is a relatively tremendous burden for me and my family, which push me a lot.</strong> </li></ul><p><a href="https://i.loli.net/2019/02/13/5c62ee09e4523.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/02/13/5c62ee09e4523.png" alt="NYU Cost.png"></a></p><p>Finally, here is a quote from Andrew Hamilton, NYU President, I want to share with you.</p><blockquote><p>Here at NYU, we should remind ourselves who are we as a community: We reject intimidation and discrimination; we strive for diversity and inclusiveness; and we are a community in which each person takes as his or her responsibility the welfare and well-being of others, irrespective of citizenship, faith, race, national origin, gender, sexual orientation, or any of the other identities that might, but surely need not, divide us.</p></blockquote><p>Such a varied and inclusive culture in NYU really fascinates me.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;NYU Tandon Engineering Admitted Student Webinar&lt;/p&gt;
&lt;p&gt;I attended the NYU Engineering Webinar which introduces some basic information of 
      
    
    </summary>
    
      <category term="Thoughts" scheme="http://yoursite.com/categories/Thoughts/"/>
    
      <category term="Personal Journals" scheme="http://yoursite.com/categories/Thoughts/Personal-Journals/"/>
    
    
      <category term="Journal" scheme="http://yoursite.com/tags/Journal/"/>
    
  </entry>
  
  <entry>
    <title>Verbal Advantage Level 2</title>
    <link href="http://yoursite.com/2019/02/11/Level%202/"/>
    <id>http://yoursite.com/2019/02/11/Level 2/</id>
    <published>2019-02-10T16:00:00.000Z</published>
    <updated>2019-02-11T01:07:13.792Z</updated>
    
    <content type="html"><![CDATA[<h3 id="advocate"><a href="#advocate" class="headerlink" title="advocate"></a>advocate</h3><ul><li>support, plead for, be in favor of, defend by argument</li><li>synonym: champion, endorse, espouse</li><li>compare:<ul><li>vocation</li><li>avocation</li><li>vocational</li><li>convoke: convocation: calling together and been summoned</li><li>evoke: call out, call forth, summon</li><li>evocative: calling forth a response</li></ul></li><li>tips:<ul><li>an advocate</li><li>to advocate</li></ul></li></ul><h3 id="delegate"><a href="#delegate" class="headerlink" title="delegate"></a>delegate</h3><ul><li>entrust with authority or power, deliver to another’s care or management</li><li>tips:<ul><li>the executive  director delegated various managerial duties to her assistant.</li><li>our department chief has trouble letting go of the reins and delegating responsibility.</li></ul></li></ul><h3 id="unprecedented"><a href="#unprecedented" class="headerlink" title="unprecedented"></a>unprecedented</h3><ul><li>unheard-of, novel, new, having no precedent pr parallel, having no prior example</li><li>compare:<ul><li>precedent</li><li>unprecedented: without a precedent</li></ul></li></ul><h3 id="poignant"><a href="#poignant" class="headerlink" title="poignant"></a>poignant</h3><ul><li>piercing, sharp, biting, penetrating, keen</li><li>tips:<ul><li>keenly affecting the senses<ul><li>a poignant odor, poignant beauty, a poignant look</li></ul></li><li>penetrating to the feelings, emotionally touching, painfully moving<ul><li>a poignant drama, a poignant family reunion</li></ul></li><li>biting, cutting, acute, piercingly effective<ul><li>poignant wit, poignant delight, poignant critique</li></ul></li></ul></li><li>compare:<ul><li>puncture: pierce</li><li>pungent: piercing to the smell or taste</li><li>expunge: punch out, erase, delete<ul><li>the editor expunged all potentially offensive and derogatory material from the book</li></ul></li></ul></li></ul><h3 id="nebulous"><a href="#nebulous" class="headerlink" title="nebulous"></a>nebulous</h3><ul><li>unclear, vague, obscure, hazy, indefinite, indistinct</li><li>tips:<ul><li>nebula: nebulae[pl]</li><li>nebular: cloudy, misty, vaporous</li><li>nebulous: vague, indefinite, unclear<ul><li>nebulous writing, nebulous idea, nebulous purpose or goal</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;advocate&quot;&gt;&lt;a href=&quot;#advocate&quot; class=&quot;headerlink&quot; title=&quot;advocate&quot;&gt;&lt;/a&gt;advocate&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;support, plead for, be in favor of, defe
      
    
    </summary>
    
      <category term="Languages" scheme="http://yoursite.com/categories/Languages/"/>
    
      <category term="English" scheme="http://yoursite.com/categories/Languages/English/"/>
    
      <category term="Verbal Advantage" scheme="http://yoursite.com/categories/Languages/English/Verbal-Advantage/"/>
    
    
      <category term="English" scheme="http://yoursite.com/tags/English/"/>
    
      <category term="Vocabularies" scheme="http://yoursite.com/tags/Vocabularies/"/>
    
  </entry>
  
  <entry>
    <title>C++ Data Share &amp; Protection</title>
    <link href="http://yoursite.com/2019/02/01/C++%20Data%20Share%20&amp;%20Protection/"/>
    <id>http://yoursite.com/2019/02/01/C++ Data Share &amp; Protection/</id>
    <published>2019-01-31T16:00:00.000Z</published>
    <updated>2019-02-01T09:24:19.770Z</updated>
    
    <content type="html"><![CDATA[<p>This note contains basic knowledge of data share and protection in C++ including.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This note contains basic knowledge of data share and protection in C++ including.&lt;/p&gt;

      
    
    </summary>
    
      <category term="Computer Science" scheme="http://yoursite.com/categories/Computer-Science/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Computer-Science/Programming/"/>
    
      <category term="C++" scheme="http://yoursite.com/categories/Computer-Science/Programming/C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="MOOC" scheme="http://yoursite.com/tags/MOOC/"/>
    
  </entry>
  
  <entry>
    <title>C++ Class</title>
    <link href="http://yoursite.com/2019/02/01/C++%20Class/"/>
    <id>http://yoursite.com/2019/02/01/C++ Class/</id>
    <published>2019-01-31T16:00:00.000Z</published>
    <updated>2019-02-01T09:33:51.328Z</updated>
    
    <content type="html"><![CDATA[<p>This note contains basic knowledge of class and objects in C++ including characteristics, definition, constructor, destructor, sturcture, union and enumeration class.</p><h2 id="characteristics-of-object-oriented-programming"><a href="#characteristics-of-object-oriented-programming" class="headerlink" title="characteristics of object-oriented programming"></a>characteristics of object-oriented programming</h2><h3 id="1-abstract"><a href="#1-abstract" class="headerlink" title="1. abstract"></a>1. abstract</h3><h3 id="2-encapsulation"><a href="#2-encapsulation" class="headerlink" title="2. encapsulation"></a>2. encapsulation</h3><h3 id="3-inheritance"><a href="#3-inheritance" class="headerlink" title="3. inheritance"></a>3. inheritance</h3><h3 id="4-polymorphism"><a href="#4-polymorphism" class="headerlink" title="4. polymorphism"></a>4. polymorphism</h3><h2 id="definition-of-class-and-object"><a href="#definition-of-class-and-object" class="headerlink" title="definition of class and object"></a>definition of class and object</h2><h3 id="1-class"><a href="#1-class" class="headerlink" title="1. class"></a>1. class</h3><p>syntax:</p><ul><li>class <em>Name</em>{<br>　　public:<br>　　　　<em>public member</em> (which is also external interface)<br>　　private:<br>　　　　<em>private member</em><br>　　protected:<br>　　　　<em>protected member</em><br>}</li></ul><p>tips:</p><ul><li>Members can be provided with default values when defined. </li><li>The members without default values will be initialized.</li></ul><h3 id="2-object"><a href="#2-object" class="headerlink" title="2. object"></a>2. object</h3><p>syntax:</p><p>1. definition</p><ul><li>class Name <em>object Name</em>;</li></ul><p>2. access public members</p><ul><li>object Name.<em>member Name</em></li></ul><h3 id="3-member-function-in-class"><a href="#3-member-function-in-class" class="headerlink" title="3. member function in class"></a>3. member function in class</h3><p>syntax:</p><ul><li>class Name::<em>Name</em>{</li></ul><p>tips:</p><ul><li>declare the function prototype in the class definition</li><li>the function body can be defined outside the class  with class name to qualify.</li><li>the function can be defined in the class as an inline function.</li></ul><blockquote><p>define a class of clock.</p><pre><code>#include &lt;iostream&gt;    using namespace std;</code></pre></blockquote><pre><code>class Clock    {public:    void setTime(int newH = 0, int newM = 0, int newS = 0);    void showTime();private:    int hour, minute, second;};void Clock::setTime(int newH, int newM, int newS) {    hour = newH;    minute = newM;    second = newS;}inline void Clock::showTime() {    cout &lt;&lt; hour &lt;&lt; &quot;:&quot; &lt;&lt; minute &lt;&lt; &quot;:&quot; &lt;&lt; second &lt;&lt; endl;}int main() {    Clock myClock;    cout &lt;&lt; &quot;First time set and output:&quot; &lt;&lt; endl;    myClock.setTime();    myClock.showTime();    cout &lt;&lt; &quot;Second time set and output:&quot; &lt;&lt; endl;    myClock.setTime(8, 30, 30);    myClock.showTime();    return 0;}</code></pre><h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><p>syntax:</p><p>tips:</p><pre><code>class Clock    {public:        Clock() =default; //default constructor       Clock(int newH, int newM, int newS); //constructorprivate:    int hour, minute, second;};</code></pre><blockquote><p>define a class of clock with a constructor.</p></blockquote><pre><code>#include &lt;iostream&gt;    using namespace std;class Clock    {public:    Clock(int newH, int newM, int newS);    void setTime(int newH, int newM, int newS);    void showTime();private:    int hour, minute, second;};Clock::Clock(int newH, int newM, int newS):hour(newH), minute(newM), second(newS){}void Clock::setTime(int newH, int newM, int newS) {    hour = newH;    minute = newM;    second = newS;}inline void Clock::showTime() {    cout &lt;&lt; hour &lt;&lt; &quot;:&quot; &lt;&lt; minute &lt;&lt; &quot;:&quot; &lt;&lt; second &lt;&lt; endl;}int main() {    Clock c(0,0,0);    c.showTime();    return 0;}</code></pre><blockquote><p>define a class of clock with a constructor and a default constructor.</p></blockquote><pre><code>#include &lt;iostream&gt;    using namespace std;class Clock    {public:    Clock(int newH, int newM, int newS);    Clock();    void setTime(int newH, int newM, int newS);    void showTime();private:    int hour, minute, second;};Clock::Clock():hour(0), minute(0), second(0){}Clock::Clock(int newH, int newM, int newS):hour(newH), minute(newM), second(newS){}void Clock::setTime(int newH, int newM, int newS) {    hour = newH;    minute = newM;    second = newS;}inline void Clock::showTime() {    cout &lt;&lt; hour &lt;&lt; &quot;:&quot; &lt;&lt; minute &lt;&lt; &quot;:&quot; &lt;&lt; second &lt;&lt; endl;}int main() {    Clock c(8,10,0);    Clock c2;    c.showTime();    c2.showTime();    return 0;}</code></pre><h3 id="delegating-constructors"><a href="#delegating-constructors" class="headerlink" title="delegating constructors"></a>delegating constructors</h3><p>syntax:</p><p>tips:</p><ul><li><p>delegating constructors help to maintain the constancy of codes.</p><pre><code>  // 2 constructors  Clock(int newH, int newM, int newS):   hour(newH), minute(newM), second(newS){  }  Clock::Clock(): hour(0),minute(0),second(0) { }  // delegating constructors  Clock(int newH, int newM, int newS):    hour(newH),minute(newM),  second(newS){  }  Clock(): Clock(0, 0, 0) {   }</code></pre></li></ul><h3 id="copy-constructor"><a href="#copy-constructor" class="headerlink" title="copy constructor"></a>copy constructor</h3><p>syntax:</p><p>1. create</p><ul><li>class <em>class Name</em>{<br>　　public:<br>　　<em>class Name</em>(parameter);<br>　　<em>class Name</em>(const <em>class Name</em> &amp; <em>object Name</em>);<br>}</li><li><em>class Name</em>::<em>class Name</em>(const <em>class Name</em> &amp; <em>object Name</em>){<br>}</li></ul><p>2. delete</p><ul><li><p><em>class Name</em>(const <em>class Name</em> &amp; <em>object Name</em>) = delete</p><pre><code>  class Point {      public:          Point(int xx=0, int yy=0) { x = xx; y = yy; }  //constructor, inline          Point(const Point&amp; p) =delete; //don&#39;t create default copy constructor      private:          int x, y;  };</code></pre></li></ul><p>tips:</p><ul><li>3 conditions that copy constructors will be invoked:<ul><li>1 </li><li>2</li><li>3</li></ul></li></ul><h3 id="destructor"><a href="#destructor" class="headerlink" title="destructor"></a>destructor</h3><p>syntax:</p><p>~<em>class Name</em></p><pre><code>#include &lt;iostream&gt;using namespace std;class Point{    public:        Point(int xx, int yy);        ~Point();    private:        int x, y;};Point::Point(int xx, int yy){    x = xx;    y = yy;}Point::~Point(){}</code></pre><p>tips:</p><ul><li>The destructor will be invoked when the object disappears.</li></ul><h2 id="combination-of-class"><a href="#combination-of-class" class="headerlink" title="combination of class"></a>combination of class</h2><p>syntax:</p><ul><li><em>class Name</em>::<em>class Name</em>(parameters of members in the object, parameters of members in this class) : object1(parameter), object2(parameter),…{<br>　　function body<br>}</li></ul><p>tips:</p><ul><li>the order of initialization: the member which is declared first will be constructed first.</li></ul><blockquote><p>create a line class using point class</p></blockquote><pre><code>#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;class Point {public:    Point(int xx = 0, int yy = 0) {        x = xx;        y = yy;    }    Point(Point &amp;p);    int getX() { return x; }    int getY() { return y; }private:    int x, y;};Point::Point(Point &amp;p) {    x = p.x;    y = p.y;    cout &lt;&lt; &quot;Calling the copy constructor of Point&quot; &lt;&lt; endl;}//combination of classclass Line {public:    Line(Point xp1, Point xp2);    Line(Line &amp;l);    double getLen() { return len; }private:    Point p1, p2;    double len;};//constructor of the combination classLine::Line(Point xp1, Point xp2) : p1(xp1), p2(xp2) {    cout &lt;&lt; &quot;Calling constructor of Line&quot; &lt;&lt; endl;    double x = static_cast&lt;double&gt;(p1.getX() - p2.getX());    double y = static_cast&lt;double&gt;(p1.getY() - p2.getY());    len = sqrt(x * x + y * y);}//copy constructor of the combination classLine::Line (Line &amp;l): p1(l.p1), p2(l.p2) {    cout &lt;&lt; &quot;Calling the copy constructor of Line&quot; &lt;&lt; endl;    len = l.len;}int main() {    Point myp1(1, 1), myp2(4, 5);    //build Point objects    Line line(myp1, myp2);    //build Line objects    Line line2(line);    //use copy constructor of the combination class to build a new object    cout &lt;&lt; &quot;The length of the line is: &quot;;    cout &lt;&lt; line.getLen() &lt;&lt; endl;    cout &lt;&lt; &quot;The length of the line2 is: &quot;;    cout &lt;&lt; line2.getLen() &lt;&lt; endl;    return 0;}</code></pre><h3 id="preceding-reference-declaration"><a href="#preceding-reference-declaration" class="headerlink" title="preceding reference declaration"></a>preceding reference declaration</h3><p>tips:</p><ul><li><p>declare a class name before define another class.</p><pre><code>  class B;   class A {  public:      void f(B b);  };  class B {  public:    void g(A a);  };</code></pre></li><li><p>cannot be involved with details of this declared class:</p><pre><code>  class Fred;  class Barney {     Fred x;  };  class Fred {     Barney y;  };</code></pre></li></ul><h2 id="UML-introduction"><a href="#UML-introduction" class="headerlink" title="UML introduction"></a>UML introduction</h2><p>basic elements</p><ul><li>Things</li><li>Relationships</li><li>Diagrams</li></ul><h2 id="Structures"><a href="#Structures" class="headerlink" title="Structures"></a>Structures</h2><p>syntax:  </p><ul><li>struct <em>Name</em>{<br>　　<em>public members</em><br>protected:<br>　　<em>protected members</em><br>private:<br>　　<em>private members</em><br>};</li></ul><p>tips:</p><ul><li>default members in structures is public, and can be data members or function members.</li></ul><blockquote><p>Students’ basic information</p></blockquote><pre><code>#include &lt;iostream&gt;#include &lt;iomanip&gt;#include &lt;string&gt;using namespace std;struct Student {    int num;        string name;    char sex;    int age;};int main() {    Student stu = { 97001, &quot;Lin Lin&quot;, &#39;F&#39;, 19 };    cout &lt;&lt; &quot;Num:  &quot; &lt;&lt; stu.num &lt;&lt; endl;    cout &lt;&lt; &quot;Name: &quot; &lt;&lt; stu.name &lt;&lt; endl;    cout &lt;&lt; &quot;Sex:  &quot; &lt;&lt; stu.sex &lt;&lt; endl;    cout &lt;&lt; &quot;Age:  &quot; &lt;&lt; stu.age &lt;&lt; endl;    return 0;}</code></pre><h2 id="unions"><a href="#unions" class="headerlink" title="unions"></a>unions</h2><p>syntax:</p><ul><li>union <em>Name</em>{<br>　　<em>public members</em><br>protected:<br>　　<em>protected members</em><br>private:<br>　　<em>private members</em><br>};</li></ul><p>tips:</p><ul><li>members in unions share the storage space, therefore there is only one effective member at the same time.</li><li>The storage space is determined by the largest space demand members.</li></ul><blockquote><p>Student’s mark</p></blockquote><pre><code>union Mark{    char grade;    //class grade: A, B, C, D, F    bool pass;    //pass or fail    int percent;    //hundred mark};</code></pre><h3 id="anonymous-unions"><a href="#anonymous-unions" class="headerlink" title="anonymous unions"></a>anonymous unions</h3><pre><code>union {  int i;  float f;}</code></pre><p>tips:</p><ul><li>i and f will share the storage space.</li></ul><blockquote><p>Student’s mark information</p></blockquote><pre><code>#include &lt;string&gt;#include &lt;iostream&gt;using namespace std;class ExamInfo {public:    ExamInfo(string name, char grade)        : name(name), mode(GRADE), grade(grade) { }    ExamInfo(string name, bool pass)        : name(name), mode(PASS), pass(pass) { }    ExamInfo(string name, int percent)        : name(name), mode(PERCENTAGE), percent(percent) { }    void show();private:    string name;    enum {        GRADE,        PASS,        PERCENTAGE    } mode;    union {        char grade;        bool pass;        int percent;    };};void ExamInfo::show() {    cout &lt;&lt; name &lt;&lt; &quot;: &quot;;    switch (mode) {    case GRADE:        cout &lt;&lt; grade;        break;    case PASS:        cout &lt;&lt; (pass ? &quot;PASS&quot; : &quot;FAIL&quot;);        break;    case PERCENTAGE:        cout &lt;&lt; percent;        break;    }    cout &lt;&lt; endl;}int main() {    ExamInfo course1(&quot;English&quot;, &#39;B&#39;);    ExamInfo course2(&quot;Calculus&quot;, true);    ExamInfo course3(&quot;C++ Programming&quot;, 85);    course1.show();    course2.show();    course3.show();    return 0;}</code></pre><h2 id="enumeration-class"><a href="#enumeration-class" class="headerlink" title="enumeration class"></a>enumeration class</h2><p>syntax:</p><p>enum class <em>Name</em>: <strong><em>Type name</em></strong>{ enumeration list };</p><pre><code>enum class Type {General, Light, Medium, Heavy};enum class Type: char {General, Light, Medium, Heavy};enum class Category {General=1, Pistol, MachineGun, Cannon};</code></pre><p><em>Name</em>::enumeration element</p><pre><code>Type::General</code></pre><p>tips:</p><ul><li>the Type name can be defined as <code>int</code>, <code>char</code>, <code>double</code> etc. The default is <code>int</code>.</li><li>Strong scope</li><li><p>Strict</p><pre><code>  #include&lt;iostream&gt;  using namespace std;  enum class Side{ Right, Left };  enum class Thing{ Wrong, Right };  int main(){      Side s = Side::Right;              Thing w = Thing::Wrong;      cout &lt;&lt; (s == w) &lt;&lt; endl;      return 0;  }</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This note contains basic knowledge of class and objects in C++ including characteristics, definition, constructor, destructor, sturcture,
      
    
    </summary>
    
      <category term="Computer Science" scheme="http://yoursite.com/categories/Computer-Science/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Computer-Science/Programming/"/>
    
      <category term="C++" scheme="http://yoursite.com/categories/Computer-Science/Programming/C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="MOOC" scheme="http://yoursite.com/tags/MOOC/"/>
    
  </entry>
  
  <entry>
    <title>Limit and Continuity</title>
    <link href="http://yoursite.com/2019/01/31/Limit%20and%20Continuity/"/>
    <id>http://yoursite.com/2019/01/31/Limit and Continuity/</id>
    <published>2019-01-30T16:00:00.000Z</published>
    <updated>2019-01-31T15:39:53.506Z</updated>
    
    <content type="html"><![CDATA[<p>This note contains basic knowledge of Limit and Continuity.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This note contains basic knowledge of Limit and Continuity.&lt;/p&gt;

      
    
    </summary>
    
      <category term="Mathematics" scheme="http://yoursite.com/categories/Mathematics/"/>
    
      <category term="Mathematical Analysis" scheme="http://yoursite.com/categories/Mathematics/Mathematical-Analysis/"/>
    
    
      <category term="Calculus" scheme="http://yoursite.com/tags/Calculus/"/>
    
  </entry>
  
  <entry>
    <title>Probability Basics</title>
    <link href="http://yoursite.com/2019/01/31/Probability%20Basics/"/>
    <id>http://yoursite.com/2019/01/31/Probability Basics/</id>
    <published>2019-01-30T16:00:00.000Z</published>
    <updated>2019-02-15T04:58:02.028Z</updated>
    
    <content type="html"><![CDATA[<p>This note contains basic knowledge of probability</p><h1 id="Probabilities-and-Events"><a href="#Probabilities-and-Events" class="headerlink" title="Probabilities and Events"></a>Probabilities and Events</h1><p>Consider an experiment with the sample space $S = \{1,2,…,m\}​$. Suppose that there are numbers $p_1, p_2, …, p_m​$ with</p><script type="math/tex; mode=display">p_i \geq 0, ~ i = 1, 2,..., m, ~~ and ~~ \displaystyle{\sum\limits_{i=1}^m}p_i = 1 ​</script><p>and such that $p_i​$ is the <em>probability</em> that $i​$ is the outcome of the experiment.Any set of possible outcomes of the experiment is called an event. If $P(A)​$ denote the probability that event A occurs, then</p><script type="math/tex; mode=display">\begin{equation*}P(A) = \sum_{i \in A} ~ p_i\end{equation*}</script><p>And we can easily deduce that</p><script type="math/tex; mode=display">\begin{equation*}P(S) = \sum_{i} ~ p_i = 1\end{equation*}</script><p>For any event $A$, let $A^c$, called the complement of $A$, be the event containing all those outcomes in $S$ that are not in $A$. That is, $A^c$ occurs if and only if $A$ does not. Since</p><script type="math/tex; mode=display">\begin{align*}1 &= \displaystyle{\sum_{i}} ~ p_i  \\  &= \displaystyle{\sum_{i \in A}} ~ p_i + \displaystyle{\sum_{i \in A^c}} ~ p_i   \\  &= P(A) + P(A^c)  \\\end{align*}</script><p>So it implies that</p><script type="math/tex; mode=display">\begin{equation*}P(A^c) = 1 - P(A)\end{equation*}</script><p>For $ \O = S^c $, we can obtain that</p><script type="math/tex; mode=display">\begin{equation*}P(\O) = 0\end{equation*}</script><p>Based on simple principle of set theory, for any events $A​$ and $B​$, we can write</p><script type="math/tex; mode=display">\begin{align*}P(A \cup B) &= \displaystyle{\sum_{i \in A \cup B}} ~ p_i  \\P(A)  &= \displaystyle{\sum_{i \in A}} ~ p_i  \\P(B)  &= \displaystyle{\sum_{i \in B}} ~ p_i  \\\end{align*}</script><p>And the addition theorem of probability can be written that</p><script type="math/tex; mode=display">\begin{equation*}P(A \cup B) = P(A) + P(B) - P(A \cap B)\end{equation*}</script><h1 id="Conditional-Probability"><a href="#Conditional-Probability" class="headerlink" title="Conditional Probability"></a>Conditional Probability</h1><h2 id="Conditional-Probablity"><a href="#Conditional-Probablity" class="headerlink" title="Conditional Probablity"></a>Conditional Probablity</h2><p>The probability that event $A$ occurs given that event $B$ occurs is called the conditional probability, which is donoted as</p><script type="math/tex; mode=display">P(A|B)</script><p>The formula of conditional probability is that</p><script type="math/tex; mode=display">\begin{equation*}P(A|B) = \frac{P(A \cap B)}{P(B)}\end{equation*}</script><p>This is because if the event $B​$ happens, in order that the event $A​$ happens, the occurrence must be a point in their intersection $AB​$. Now that the event $B​$ has occurred, it should be thought of the new sample space. And we can obtain the multiplication theorem of probability:</p><script type="math/tex; mode=display">\begin{align*}P(AB) &= P(B)P(A|B)  \\      &= P(A)P(B|A)\end{align*}</script><p>If the event $A$ is independent of the event $B$, $B$ is also independent of $A$, then $P(A|B) = P(A)$ and $P(B|A) = P(B)$. We get that</p><script type="math/tex; mode=display">P(AB) = P(A)P(B)</script><h1 id="Random-Variables-and-Distribution"><a href="#Random-Variables-and-Distribution" class="headerlink" title="Random Variables and Distribution"></a>Random Variables and Distribution</h1><h2 id="Random-Variables"><a href="#Random-Variables" class="headerlink" title="Random Variables"></a>Random Variables</h2><p>Numerical quantities whose values are determined by the outcome of the experiment are known as <em>random variables</em>. Hence, we can assign probabilities to their possible values. The set of this probabilities is <em>distribution</em>.</p><p>In fact, random variables can be <em>discrete</em> or <em>continuous</em>. The possible values of <strong><em>discrete random variables</em></strong> constituted sets of discrete values, whereas <strong><em>continuous random variables</em></strong> whose set of possible values is instead a continuous region can take on any value within some interval.</p><p>Actually, the distribution differs random variables from general variables in calculus. A random variable must have its own distribution.</p><h2 id="Distribution"><a href="#Distribution" class="headerlink" title="Distribution"></a>Distribution</h2><p>For discrete variables, the distribution is a sequence form. If $X$ is a discrete random variable whose possible values are $x_1, x_2,…,x_n$, then the set of probabilities $P\{X=x_j\}$$(j=1,…,n)$ is called the <em>probability distribution of discrete random variable</em>. Since $X$ must assume one of these values, it follows that</p><script type="math/tex; mode=display">\begin{equation*}\displaystyle{\sum_{j=1}^{n}}~P\{X = x_j\} = 1.\end{equation*}</script><p>For continuous variables, the distribution is a function form. Every continuous random variable $X$ has a function $f$ associated with it. This function $f$ is called the <em>probability density function</em> of $X$. For any numbers $a&lt;b$, the area under $f$ between $a$ and $b$ is equal to the probability that $X$ assumes a value between $a$ and $b$.</p><script type="math/tex; mode=display">P\{a \leq X \leq b \} = area ~ under ~ f ~ between ~ a ~ and ~ b</script><h2 id="Distribution-Function"><a href="#Distribution-Function" class="headerlink" title="Distribution Function"></a>Distribution Function</h2><p>If $X$ is a random variable, for any real number x, we define</p><script type="math/tex; mode=display">F(x) = P(X \leq x)</script><p>as the distribution function of random variable $X$, which is also called $X$ is denoted by $F(x)$, or $X \sim F(x)$. Sometimes, $F_{X}(x)$ is the same meaning.</p><h1 id="Expected-Values"><a href="#Expected-Values" class="headerlink" title="Expected Values"></a>Expected Values</h1><p>If X is a random variable whose possible values are $x_1, x_2,…,x_n$, then the expected value of $X$, denoted by $E[X]$, is defined by</p><script type="math/tex; mode=display">\begin{equation*}E[X] = \displaystyle{\sum_{j=1}^{n}}~{x_j}P\{X = x_j\}\end{equation*}</script><p>$E[X]​$ also has alternative names: <em>expectation</em> or the <em>mean</em> of $X​$. It is a kind of weighted average of possible values of $X​$, where the weight given to a value is equal to the probability that $X​$ assumes that value.</p><p>Here are some attributes of expectation. The first one is the linear attribute, which means that, for constants $a​$ and $b​$,</p><script type="math/tex; mode=display">E[aX+b]=aE[X]+b</script><p>To verify it, let $Y = aX + b​$. Since $Y = ax_j + b​$ when $ X = x_j ​$, it follows that</p><script type="math/tex; mode=display">\begin{align*}E[Y] &= \sum_{j=1}^{n} (ax_j + b) P\{X = x_j\} \\     &= \sum_{j=1}^{n}  ax_j P\{X = x_j\} ~ + ~ \sum_{j=1}^{n}b P\{X = x_j\} \\     &= a\sum_{j=1}^{n}  x_j P\{X = x_j\} ~ + ~ b\sum_{j=1}^{n} P\{X = x_j\} \\     &= aE[X] + b\end{align*}</script><p>And similarly, for random variables $X_1, …, X_k$,</p><script type="math/tex; mode=display">E\left[\sum_{j=1}^{k} X_j \right] = \sum_{j=1}^{k}E[X_j]</script><h1 id="Variance"><a href="#Variance" class="headerlink" title="Variance"></a>Variance</h1><p>The <em>variance</em> of $X$, denoted by $Var(X)$, which measure the spread of a random variable, is defined by</p><script type="math/tex; mode=display">Var(X) = E[(X - E(X))^2]</script><p>If a and b are constants, then </p><script type="math/tex; mode=display">\begin{align*}Var(aX+b) &= E[(aX+b- E[aX+b])^2] \\          &= E[(aX - aE[X])^2] \\          &= E[a^2(X-E[X])^2] \\          &= a^2Var(X)\end{align*}</script><p>And if the <strong><em>random variables are independent</em></strong>, the variance of the sum of random variables is equal to the sum of their variances ($X_1,…X_k$ are <em>independent random variables</em>)</p><script type="math/tex; mode=display">Var\left(\sum_{j=1}^{k} X_j \right) = \sum_{j=1}^{k} Var(X_j)</script><h1 id="Useful-distributions-of-random-variables"><a href="#Useful-distributions-of-random-variables" class="headerlink" title="Useful distributions of random variables"></a>Useful distributions of random variables</h1><h2 id="Discrete"><a href="#Discrete" class="headerlink" title="Discrete"></a>Discrete</h2><p>Here are some useful <em>distributions</em> of <strong><em>discrete random variables</em></strong> which have distinct expected values and variances.</p><h3 id="Bernoulli-distribution"><a href="#Bernoulli-distribution" class="headerlink" title="Bernoulli distribution"></a>Bernoulli distribution</h3><h3 id="binomial-distribution"><a href="#binomial-distribution" class="headerlink" title="binomial distribution"></a>binomial distribution</h3><h3 id="Poisson-distribution"><a href="#Poisson-distribution" class="headerlink" title="Poisson distribution"></a>Poisson distribution</h3><h3 id="Geometric-distribution"><a href="#Geometric-distribution" class="headerlink" title="Geometric distribution"></a>Geometric distribution</h3><h3 id="Pascal-distribution"><a href="#Pascal-distribution" class="headerlink" title="Pascal distribution"></a>Pascal distribution</h3><h3 id="Hypergeometric-distribution"><a href="#Hypergeometric-distribution" class="headerlink" title="Hypergeometric distribution"></a>Hypergeometric distribution</h3><h2 id="Continuous"><a href="#Continuous" class="headerlink" title="Continuous"></a>Continuous</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This note contains basic knowledge of probability&lt;/p&gt;
&lt;h1 id=&quot;Probabilities-and-Events&quot;&gt;&lt;a href=&quot;#Probabilities-and-Events&quot; class=&quot;header
      
    
    </summary>
    
      <category term="Mathematics" scheme="http://yoursite.com/categories/Mathematics/"/>
    
      <category term="Probability" scheme="http://yoursite.com/categories/Mathematics/Probability/"/>
    
    
      <category term="Probability" scheme="http://yoursite.com/tags/Probability/"/>
    
  </entry>
  
  <entry>
    <title>Real Number Theory</title>
    <link href="http://yoursite.com/2019/01/31/Real%20Number%20Theory/"/>
    <id>http://yoursite.com/2019/01/31/Real Number Theory/</id>
    <published>2019-01-30T16:00:00.000Z</published>
    <updated>2019-01-31T15:41:14.424Z</updated>
    
    <content type="html"><![CDATA[<p>This note contains basic knowledge of Set, 7 basic principles of the real number.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This note contains basic knowledge of Set, 7 basic principles of the real number.&lt;/p&gt;

      
    
    </summary>
    
      <category term="Mathematics" scheme="http://yoursite.com/categories/Mathematics/"/>
    
      <category term="Mathematical Analysis" scheme="http://yoursite.com/categories/Mathematics/Mathematical-Analysis/"/>
    
    
      <category term="Calculus" scheme="http://yoursite.com/tags/Calculus/"/>
    
  </entry>
  
  <entry>
    <title>C++ Functions</title>
    <link href="http://yoursite.com/2019/01/28/C++%20Functions/"/>
    <id>http://yoursite.com/2019/01/28/C++ Functions/</id>
    <published>2019-01-27T16:00:00.000Z</published>
    <updated>2019-02-01T02:25:03.660Z</updated>
    
    <content type="html"><![CDATA[<p>This note contains basic knowledge of functions in C++ including definition, invocation, overloading and so on.</p><h2 id="definition-of-functions"><a href="#definition-of-functions" class="headerlink" title="definition of functions"></a>definition of functions</h2><p>syntax:</p><p>type identifier <em>Name</em>(<strong>formal parameter</strong>)<br>{<br>　　<strong><em>statements</em></strong><br>　　return<br>}</p><p>tips:</p><ul><li>If the type identifier is <code>void</code>, there is <strong>no need to include a return statement</strong> in the function body.</li></ul><h2 id="invocation-of-functions"><a href="#invocation-of-functions" class="headerlink" title="invocation of functions"></a>invocation of functions</h2><h3 id="1-declaration-prototype"><a href="#1-declaration-prototype" class="headerlink" title="1. declaration prototype"></a>1. declaration prototype</h3><p>syntax:</p><p>function prototype: type identifier <em>Name</em>(<strong>formal parameter with type notifications</strong>)</p><p>tips:</p><ul><li>if a function is defined after the invocation point, its prototype must be declared before invocation.</li><li>if a function is defined before the invocation point, there is no need to declare the prototype.</li></ul><h3 id="2-invocation"><a href="#2-invocation" class="headerlink" title="2. invocation"></a>2. invocation</h3><p>syntax:</p><p><em>Name</em>(<strong>argument</strong>)</p><blockquote><p><strong>3.1. write a function to compute the n power of x</strong></p><pre><code>#include &lt;iostream&gt;  using namespace stddouble power(double x, int n){    dowble val = 1.0;    while(n--)        val *= x;    return val;}int main(){    double pow;    pow = power(5, 2):    cout &lt;&lt; &quot;5 to the power 2 is &quot; &lt;&lt; pow &lt;&lt; endl;return 0;}</code></pre><p><strong>3.2. write a function to converse an input number from binary to decimal</strong></p><pre><code>#include &lt;iostream&gt;using namespace std;double power(double x, int n);int main() {    int value = 0;            cout &lt;&lt; &quot;Enter an 8 bit binary number: &quot;;    for (int i = 7; i &gt;= 0; i--) {        char ch;        cin &gt;&gt; ch;        if (ch == &#39;1&#39;)            value += static_cast&lt;int&gt;(power(2, i));    }    cout &lt;&lt; &quot;Decimal value is &quot; &lt;&lt; value &lt;&lt; endl;    return 0;}//compute the n power of xdouble power (double x, int n) {    double val = 1.0;    while (n--)        val *= x;    return val;}</code></pre><p><strong>3.3. write a function to compute the value of Pi</strong></p><pre><code>#include &lt;iostream&gt;using namespace std;double arctan(double x) {    double sqr = x * x;    double e = x;    double r = 0;    int i = 1;    while (e / i &gt; 1e-15) {        double f = e / i;        r = (i % 4 == 1) ? r + f : r - f;        e = e * sqr;        i += 2;    }    return r;}int main(){    double a = 16.0 * arctan(1/5.0);    double b = 4.0 * arctan(1/239.0);    cout &lt;&lt; &quot;Pi = &quot; &lt;&lt; a - b &lt;&lt; endl;    return 0;}</code></pre><p><strong>3.4. find all the number from 11 to 999 of which the 1, 2 and 3 power are all palindrome numbers</strong></p><pre><code>#include &lt;iostream&gt;using namespace std;//determin whether n is a palindrome numberbool symm(unsigned n) {    unsigned i = n;    unsigned m = 0;    while (i &gt; 0) {        m = m * 10 + i % 10;        i /= 10;    }    return m == n;}int main() {    for (unsigned m = 11; m &lt; 1000; m++)        if (symm(m) &amp;&amp; symm(m * m) &amp;&amp; symm(m * m * m)) {            cout &lt;&lt; &quot;m = &quot; &lt;&lt; m;            cout &lt;&lt; &quot;m * m = &quot; &lt;&lt; m * m;            cout &lt;&lt; &quot;m * m * m = &quot; &lt;&lt; m * m * m &lt;&lt; endl;        }    return 0;}</code></pre><p><strong>3.5. write a function to compute a piecewise function</strong></p><pre><code>#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const double TINY_VALUE = 1e-10;double tsin(double x) {    double g = 0;    double t = x;    int n = 1;    do {        g += t;        n++;        t = -t * x * x / (2 * n - 1) / (2 * n - 2);    } while (fabs(t) &gt;= TINY_VALUE);     return g;}int main() {    double k, r, s;    cout &lt;&lt; &quot;r = &quot;;    cin &gt;&gt; r;    cout &lt;&lt; &quot;s = &quot;;    cin &gt;&gt; s;    if (r * r &lt;= s * s)        k = sqrt(tsin(r) * tsin(r) + tsin(s) * tsin(s));    else        k = tsin(r * s) / 2;    cout &lt;&lt; k &lt;&lt; endl;    return 0;}</code></pre></blockquote><p>Random Function</p><h2 id="nesting-invocation-of-functions"><a href="#nesting-invocation-of-functions" class="headerlink" title="nesting invocation of functions"></a>nesting invocation of functions</h2><p>nesting: invoke another function in a function.</p><blockquote><p><strong>3.7. compute the sum of square of the two input integer</strong></p><pre><code>#include &lt;iostream&gt;using namespace std;int fun2(int m) {    return m * m;}int fun1(int x,int y) {    return fun2(x) + fun2(y);}int main() {    int a, b;    cout &lt;&lt; &quot;Please enter two integers(a and b): &quot;;    cin &gt;&gt; a &gt;&gt; b;    cout &lt;&lt; &quot;The sum of square of a and b: &quot; &lt;&lt; fun1(a, b) &lt;&lt; endl;    return 0;}</code></pre></blockquote><h2 id="recursive-invocation-of-functions"><a href="#recursive-invocation-of-functions" class="headerlink" title="recursive invocation of functions"></a>recursive invocation of functions</h2><p>recursive: invoke itself in a function</p><blockquote><p><strong>3.8. compute the factorial of n</strong></p><pre><code>#include &lt;iostream&gt;using namespace std;unsigned fac(unsigned n) {    unsigned f;    if (n == 0)        f = 1;    else        f = fac(n - 1) * n;    return f;}int main() {    unsigned n;    cout &lt;&lt; &quot;Enter a positive integer: &quot;;    cin &gt;&gt; n;    unsigned y = fac(n);    cout &lt;&lt; n &lt;&lt; &quot;! = &quot; &lt;&lt; y &lt;&lt; endl;    return 0;}</code></pre></blockquote><p>&gt;<br><strong>3.9. compute the number of combinations of k individuals selected from n individuals</strong><br>&gt;</p><pre><code>#include &lt;iostream&gt;using namespace std;</code></pre><p>&gt;<br>    int comm(int n, int k) {<br>        if (k &gt; n)<br>            return 0;<br>        else if (n == k || k == 0)<br>            return 1;<br>        else<br>            return comm(n - 1, k) + comm(n - 1, k - 1);<br>    }</p><blockquote><pre><code>int main() {    int n, k;    cout &lt;&lt; &quot;Please enter two integers n and k: &quot;;    cin &gt;&gt; n &gt;&gt; k;    cout &lt;&lt; &quot;C(n, k) = &quot; &lt;&lt; comm(n, k) &lt;&lt; endl;    return 0;}</code></pre></blockquote><p><strong>3.10. Solution of Hanoi Tower</strong><br>&gt;</p><pre><code>#include &lt;iostream&gt;using namespace std;</code></pre><blockquote><pre><code>//move the top plate which is on the src to the destvoid move(char src, char dest) {     cout &lt;&lt; src &lt;&lt; &quot; --&gt; &quot; &lt;&lt; dest &lt;&lt; endl;}//move n plates which is on the src to the dest via mediumvoid hanoi(int n, char src, char medium, char dest) {    if (n == 1)        move(src, dest);    else {        hanoi(n - 1, src, dest, medium);        move(src, dest);        hanoi(n - 1, medium, src, dest);    }}int main() {    int m;    cout &lt;&lt; &quot;Enter the number of diskes: &quot;;    cin &gt;&gt; m;    cout &lt;&lt; &quot;the steps to moving &quot; &lt;&lt; m &lt;&lt; &quot; diskes:&quot; &lt;&lt; endl;    hanoi(m,&#39;A&#39;,&#39;B&#39;,&#39;C&#39;);    return 0;}</code></pre></blockquote><h2 id="parameter-passing"><a href="#parameter-passing" class="headerlink" title="parameter passing"></a>parameter passing</h2><h3 id="1-reference-passing"><a href="#1-reference-passing" class="headerlink" title="1. reference passing"></a>1. reference passing</h3><p>syntax:</p><p>type identifier &amp; <em>Name</em></p><p>&gt;<br>    int i,j;<br>    int &amp;ri = i;<br>    j = 10;<br>    ri = j</p><blockquote><p><strong>swap two different numbers</strong></p><pre><code>#include &lt;iostream&gt;using namespace std;    void swap(int &amp; a, int &amp; b) {    int t = a;    a = b;    b = t;}int main() {    int x = 5, y = 10;    cout &lt;&lt; &quot;x = &quot; &lt;&lt; x &lt;&lt; &quot; y = &quot; &lt;&lt; y &lt;&lt; endl;    swap(x, y);    cout &lt;&lt; &quot;x = &quot; &lt;&lt; x &lt;&lt; &quot; y = &quot; &lt;&lt; y &lt;&lt; endl;    return 0;}</code></pre></blockquote><h2 id="variable-parameter-function"><a href="#variable-parameter-function" class="headerlink" title="variable parameter function"></a>variable parameter function</h2><p>initializer_list</p><h2 id="inline-function"><a href="#inline-function" class="headerlink" title="inline function"></a>inline function</h2><p>syntax:</p><p><strong>inline</strong> type identifier <em>Name</em></p><p>tips:</p><ul><li>inline function cannot contain the switch and if statement.</li></ul><p><strong>compute the area of a circle</strong></p><pre><code>#include &lt;iostream&gt;using namespace std;const double PI = 3.14159265358979;inline double calArea(double radius) {    return PI * radius * radius;}int main() {    double r = 3.0;    //r is the radius    //it will be replaced by the statements in calArea function during compiling.    double area    = calArea(r);    cout &lt;&lt; area &lt;&lt; endl;    return 0;}</code></pre><h2 id="constexpr-function"><a href="#constexpr-function" class="headerlink" title="constexpr function"></a>constexpr function</h2><p>syntax:</p><p><strong>constexpr</strong> type identifier <em>Name</em></p><p>tips:</p><ul><li>There is only one return statement in a constexpr function, in which the return value should be a constant.  </li></ul><p>example:</p><pre><code>constexpr int get_size(){    return 20;}constexpr int foo = get_size();</code></pre><h2 id="functions-with-default-parameter-values"><a href="#functions-with-default-parameter-values" class="headerlink" title="functions with default parameter values"></a>functions with default parameter values</h2><p>syntax:</p><p>type identifier <em>Name</em>(parameter1, <strong>parameter2 = value</strong>, …)</p><p>tips:</p><ul><li>The parameter with default values should be ordered by the right side when defined.</li><li>The default values should be defined in the front one: function definition or publication.  </li></ul><p><strong>compute the volume of some cuboid boxes</strong></p><pre><code>#include &lt;iostream&gt;#include &lt;iomanip&gt;using namespace std;int getVolume(int length, int width = 2, int height = 3);int main() {    const int X = 10, Y = 12, Z = 15;    cout &lt;&lt; &quot;Some box data is &quot; ;    cout &lt;&lt; getVolume(X, Y, Z) &lt;&lt; endl;    cout &lt;&lt; &quot;Some box data is &quot; ;    cout &lt;&lt; getVolume(X, Y) &lt;&lt; endl;    cout &lt;&lt; &quot;Some box data is &quot; ;    cout &lt;&lt; getVolume(X) &lt;&lt; endl;    return 0;}int getVolume(int length, int width/* = 2 */, int height/* = 3 */) {    cout &lt;&lt; setw(5) &lt;&lt; length &lt;&lt; setw(5) &lt;&lt; width &lt;&lt; setw(5) &lt;&lt; height &lt;&lt; &#39;\t&#39;;    return length * width * height;}</code></pre><h2 id="overloading-of-functions"><a href="#overloading-of-functions" class="headerlink" title="overloading of functions"></a>overloading of functions</h2><p>syntax:</p><p><strong>type identifier1</strong> <em>Name</em>(type identifier1 <em>parameter1</em>…)<br><strong>type identifier2</strong> <em>Name</em>(type identifier2 <em>parameter2</em>, type identifier3 <em>parameter3</em>…)</p><p>tips:</p><ul><li>The number of parameters can be different.</li><li>Overloading of functions is determined by the type identifier, rather than return values or expression in the functions.</li></ul><p><strong>computer the sum of square of two numbers</strong></p><pre><code>#include &lt;iostream&gt;using namespace std;int sumOfSquare(int a, int b) {    return a * a + b * b;}double sumOfSquare(double a, double b) {    return a * a + b * b;}int main() {    int m, n;    cout &lt;&lt; &quot;Enter two integer: &quot;;    cin &gt;&gt; m &gt;&gt; n;    cout &lt;&lt; &quot;Their sum of square: &quot; &lt;&lt; sumOfSquare(m, n) &lt;&lt; endl;    double x, y;    cout &lt;&lt; &quot;Enter two real number: &quot;;    cin &gt;&gt; x &gt;&gt; y;    cout &lt;&lt; &quot;Their sum of square: &quot; &lt;&lt; sumOfSquare(x, y) &lt;&lt; endl;    return 0;}</code></pre><h2 id="system-function"><a href="#system-function" class="headerlink" title="system function"></a>system function</h2><p>The system functions are usually defined in the head files:</p><ul><li>mathematics: <code>&lt;cmath&gt;</code></li></ul><p>**compute the sine, cosine and tangent function value of a input angle.</p><pre><code>#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;const double PI = 3.14159265358979;    int main() {    double angle;    cout &lt;&lt; &quot;Please enter an angle: &quot;;    cin &gt;&gt; angle;    double radian = angle * PI / 180;    cout &lt;&lt; &quot;sin(&quot; &lt;&lt; angle &lt;&lt; &quot;) = &quot; &lt;&lt; sin(radian) &lt;&lt;endl;    cout &lt;&lt; &quot;cos(&quot; &lt;&lt; angle &lt;&lt; &quot;) = &quot; &lt;&lt; cos(radian) &lt;&lt;endl;    cout &lt;&lt; &quot;tan(&quot; &lt;&lt; angle &lt;&lt; &quot;) = &quot; &lt;&lt; tan(radian) &lt;&lt;endl;    return 0;}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This note contains basic knowledge of functions in C++ including definition, invocation, overloading and so on.&lt;/p&gt;
&lt;h2 id=&quot;definition-of
      
    
    </summary>
    
      <category term="Computer Science" scheme="http://yoursite.com/categories/Computer-Science/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Computer-Science/Programming/"/>
    
      <category term="C++" scheme="http://yoursite.com/categories/Computer-Science/Programming/C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="MOOC" scheme="http://yoursite.com/tags/MOOC/"/>
    
  </entry>
  
  <entry>
    <title>TED Collections</title>
    <link href="http://yoursite.com/2019/01/25/TED/"/>
    <id>http://yoursite.com/2019/01/25/TED/</id>
    <published>2019-01-24T16:00:00.000Z</published>
    <updated>2019-02-01T14:23:07.005Z</updated>
    
    <content type="html"><![CDATA[<p>This note is a summary of some TED speeches.</p><h2 id="How-we-need-to-remake-the-Internet"><a href="#How-we-need-to-remake-the-Internet" class="headerlink" title="How we need to remake the Internet"></a>How we need to remake the Internet</h2><p>by Jaron Lanier</p><ul><li>At the beginning of the Internet, most things are free.</li><li>The business model is with advertisement.</li><li>With the development, advertisement becomes not social network anymore, but “<strong>behavior modification empires</strong>“.</li><li>“<em>It’s a global tragic, astoundingly ridiculous mistake rather than a wave of evil</em>.”</li><li>To remake the decision: <ul><li>some people pay for internet service like subscription fee, “Peak TV”.</li><li>“Peak social media”</li></ul></li><li>“We cannot have a society in which, if two people wish to communicate, <strong>the only way that can happen is if it’s financed by a third person who wishes to manipulate them</strong>“ </li></ul><p>Link:<br><a href="https://www.ted.com/talks/jaron_lanier_how_we_need_to_remake_the_internet#t-197288" target="_blank" rel="noopener">How we need to remake the Internet</a></p><h2 id="A-healthy-economy-should-be-designed-to-thrive-not-grow"><a href="#A-healthy-economy-should-be-designed-to-thrive-not-grow" class="headerlink" title="A healthy economy should be designed to thrive, not grow"></a>A healthy economy should be designed to thrive, not grow</h2><p>by Kate Raworth</p><ul><li>Growth seems such a obsession that humanity always have, which comes from:<ul><li>GDP was invented in 1930s.</li><li><strong>W.W. Rostow</strong>‘s book: <em>The stages of Economic Growth: A Non-Communist Manifesto</em> in 1960s.<ul><li>traditional society where output is limited by tech, institutions and mindset</li><li>preconditions for takeoff (compound interest, national dignity), </li><li>growth become normal.</li><li>drive to maturity with any production based on any resource </li><li>final: any consumption</li></ul></li></ul></li><li>financially addicted to growth<ul><li>designed to pursue the highest rate of monetary return</li></ul></li><li>politically addicted to growth<ul><li>politicians want to raise tax revenue without taxes, only by GDP.</li></ul></li><li>socially addicted to growth<ul><li>consumer propaganda created by Edward Bernays</li></ul></li><li><p>time to choose higher ambition than growth, which need a dashboard of indicators: like a doughnut.</p><ul><li><p>dynamic balance<br><a href="https://i.loli.net/2019/02/01/5c544d63c8341.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/02/01/5c544d63c8341.png" alt="doughnut.png"></a></p><ul><li>today’s challenge<br><a href="https://i.loli.net/2019/02/01/5c544d63775ab.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/02/01/5c544d63775ab.png" alt="doughnut2.png"></a></li></ul></li></ul></li><li>regenerative design<ul><li>clean energy: wind, tide, sun</li><li>circular: turn the waste for the first to the food for the next</li><li>regenerate once-barren landscapes</li></ul></li><li>distributive design<ul><li>distribute wealth, knowledge and empowerment to many</li><li>harness today’s technology in service of distribution design.</li></ul></li><li>thrive a long time<ul><li>ingenious people turn boundary into the source of their creativity: boundary unleash our potential.</li></ul></li></ul><p>Link:<br><a href="https://www.ted.com/talks/kate_raworth_a_healthy_economy_should_be_designed_to_thrive_not_grow#t-919701" target="_blank" rel="noopener">A healthy economy should be designed to thrive, not grow</a>     </p><h2 id="What-are-the-most-important-moral-problems-of-our-time"><a href="#What-are-the-most-important-moral-problems-of-our-time" class="headerlink" title="What are the most important moral problems of our time?"></a>What are the most important moral problems of our time?</h2><p>by Will MacAskill</p><ul><li>economic history of human civilization continue ascend resulting from scientific and industrial revolution. We also need ethic revolution.</li><li>Of all the problems facing humanity, which should we focus on solving first?<br>There is a framework:<ul><li>big</li><li>solvable</li><li>neglected </li></ul></li><li>Three priority issues:<ul><li>global health: solvable</li><li>factory farming: neglected</li><li>category of existential risks: permanently derail civilization<ul><li>nuclear war</li><li>global pandemic</li><li>synthetiic biology</li><li>geoengineering</li><li>artificial intelligence<ul><li>big: causing extinction</li><li>neglected: issues influencing the next generation are often neglected. <ul><li>philanthropy funding</li></ul></li><li>solvable: volunteer, career and political engagement</li></ul></li></ul></li></ul></li></ul><p>Link:<br><a href="https://www.ted.com/talks/will_macaskill_how_can_we_do_the_most_good_for_the_world" target="_blank" rel="noopener">What are the most important moral problems of our time?</a>    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This note is a summary of some TED speeches.&lt;/p&gt;
&lt;h2 id=&quot;How-we-need-to-remake-the-Internet&quot;&gt;&lt;a href=&quot;#How-we-need-to-remake-the-Internet
      
    
    </summary>
    
      <category term="Languages" scheme="http://yoursite.com/categories/Languages/"/>
    
      <category term="English" scheme="http://yoursite.com/categories/Languages/English/"/>
    
      <category term="TED" scheme="http://yoursite.com/categories/Languages/English/TED/"/>
    
    
      <category term="English" scheme="http://yoursite.com/tags/English/"/>
    
      <category term="TED" scheme="http://yoursite.com/tags/TED/"/>
    
  </entry>
  
  <entry>
    <title>Verbal Advantage Level 1</title>
    <link href="http://yoursite.com/2019/01/23/Level%201/"/>
    <id>http://yoursite.com/2019/01/23/Level 1/</id>
    <published>2019-01-22T16:00:00.000Z</published>
    <updated>2019-02-06T00:56:07.671Z</updated>
    
    <content type="html"><![CDATA[<h3 id="paraphrase"><a href="#paraphrase" class="headerlink" title="paraphrase"></a>paraphrase</h3><ul><li>restate / restatement</li><li>compare <ul><li>quote:</li><li>paraphrase:</li></ul></li></ul><h3 id="ostensible"><a href="#ostensible" class="headerlink" title="ostensible"></a>ostensible</h3><ul><li>apparent or appearing to be true, professed as true without being proved.</li><li>compare:<ul><li>plausible:</li><li>specious: (negative) sth. false appears true</li></ul></li><li>antonym:<ul><li>real, actual</li></ul></li><li>tips:<ul><li><em>ostensible advantage</em></li></ul></li></ul><h3 id="digress"><a href="#digress" class="headerlink" title="digress"></a>digress</h3><ul><li>wander, stray from the point, ramble, deviate, go off in another direction (in speaking or writing)</li><li>compare:<ul><li>ingress</li><li>egress</li></ul></li><li>tips:<ul><li>sb. digress</li><li><em>be full of humorous digressions</em></li></ul></li></ul><h3 id="uncanny"><a href="#uncanny" class="headerlink" title="uncanny"></a>uncanny</h3><ul><li>eerie, strange, weird, mysterious<ul><li>sth. strange in an unnatural or unearthly way<ul><li>collocation: uncanny experience</li></ul></li><li>sth. beyond what is expected, strange in a marvelous way<ul><li>collocation: uncanny resemblance/ability</li></ul></li></ul></li></ul><h3 id="candor"><a href="#candor" class="headerlink" title="candor"></a>candor</h3><ul><li>frankness, openness, sincere expression, (candid)</li><li>synonym:<ul><li>straightforwardness, outspokenness, forthrightness, ingenuousness</li></ul></li><li>compare:<ul><li>forthrightness <ul><li>a forthright person speaks directly, plainly and sometimes bluntly</li></ul></li><li>ingenuousness <ul><li>a ingenuous person speaks honestly and sincerely, with no hint  of evasiveness or deception.</li></ul></li></ul></li></ul><h3 id="morose"><a href="#morose" class="headerlink" title="morose"></a>morose</h3><ul><li>gloomy, moody, glum, grumpy, ill-tempered, (moroseness)</li><li>synonym: <ul><li>dolorous: mournful, full of sadness</li><li>lugubrious: extremely gloomy or dismal</li><li>saturnine: having bitter disposition or sour outlook on life</li></ul></li><li>antonym:<ul><li>optimistic, jovial, sanguine</li></ul></li><li>compare:<ul><li>sullen:<ul><li>refuse to associate with people because of bad mood</li></ul></li><li>morose:<ul><li>depressed and silent because of bitter or resentful feeling</li><li>misanthropy: hatred of humankind spiteful or pessimistic attitude on human race</li></ul></li></ul></li></ul><h3 id="adept"><a href="#adept" class="headerlink" title="adept"></a>adept</h3><ul><li>skilled</li><li>synonym: handy, clever, able, deft, expert, adroit, dexterous, proficient</li><li>tips:<ul><li>adept [n]: a highly skilled person = expert</li><li>adept [adj]: <em>be adept at managing one’s investments</em></li></ul></li></ul><h3 id="saturated"><a href="#saturated" class="headerlink" title="saturated"></a>saturated</h3><ul><li>soaked, thoroughly wet, full of moisture (saturation)</li><li>synonym: drenched, steeped, permeated, impregnated, imbued, sodden</li><li>compare:<ul><li>sodden: <ul><li>heavy with moisture, soggy </li><li>dull, stupefied, expressionless as from drinking too much liquor</li></ul></li><li>saturate<ul><li>literally: <em>my french fries are saturated with oil</em></li><li>figuratively: <em>the company saturated the media with ads for its new product</em></li></ul></li></ul></li></ul><h3 id="pragmatic"><a href="#pragmatic" class="headerlink" title="pragmatic"></a>pragmatic</h3><ul><li>practical, concerned with everyday affairs as opposed to theory or speculation</li><li>tips:<ul><li><em>businessman</em></li><li><em>lawyer</em></li></ul></li></ul><h3 id="congenial"><a href="#congenial" class="headerlink" title="congenial"></a>congenial</h3><ul><li>sympathetic, agreeable, compatible, kindred, harmonious, having the same taste, nature, temperament</li><li>antonym: alien, dissident, incongruous</li></ul><h3 id="capricious"><a href="#capricious" class="headerlink" title="capricious"></a>capricious</h3><ul><li>unpredictable, sudden change of mind or emotions (caprice) </li><li>synonyms: flighty, impulsive, fickle, erratic, whimsical, volatile, mercurial</li><li>tips: <ul><li>He is so capricious.</li><li>New England has <em>a capricious climate</em>.</li><li><em>The stock market is notoriously capricious</em>.</li></ul></li></ul><h3 id="blatant"><a href="#blatant" class="headerlink" title="blatant"></a>blatant</h3><ul><li>noisy, disagreeably or offensively loud, boisterous, clamorous</li><li>tips:<ul><li><em>the blatant sound of horns</em> honking in heavy traffic</li><li>sticking out in a glaring way, obtrusive, flagrant<ul><li>a blatant lie</li><li>a blatant error</li><li>a blatant attempt to impress the boss</li></ul></li><li>conspicuous &amp; disagreeable</li></ul></li></ul><h3 id="obligatory"><a href="#obligatory" class="headerlink" title="obligatory"></a>obligatory</h3><ul><li>required, necessary, binding, mandatory</li><li>tips:<ul><li><em>obligatory duties</em></li><li>doing miscellaneous paperwork is <em>an obligatory function</em> of the clerical worker.</li></ul></li></ul><h3 id="negligible"><a href="#negligible" class="headerlink" title="negligible"></a>negligible</h3><ul><li>unimportant, trifling, of little consequence</li><li>tips:<ul><li><em>a negligible concern</em>: warrants little or no attention.</li></ul></li></ul><h3 id="adamant"><a href="#adamant" class="headerlink" title="adamant"></a>adamant</h3><ul><li>unyielding, immovable, inflexible, unshakable, unrelenting, implacable, refusing to give in</li><li>tips:<ul><li><em>She was adamant in her opposition</em> to the plan.</li><li>adamant [adj]</li><li>adamant [n]: a hard substance or stone, like a diamond</li></ul></li></ul><h3 id="sporadic"><a href="#sporadic" class="headerlink" title="sporadic"></a>sporadic</h3><ul><li>occasional, infrequent, irregular, not constant, occurring in a scattered or random way</li><li>tips:<ul><li>a business venture may have sporadic success.</li><li>gambler’s luck may be sporadic.</li><li>sporadic crimes/sporadic outbreaks of a disease</li></ul></li><li>antonyms: constant, incessant, unremitting</li></ul><h3 id="vanguard"><a href="#vanguard" class="headerlink" title="vanguard"></a>vanguard</h3><ul><li>the forefront of an action or movement, leading position or persons in a movement</li></ul><h3 id="concur"><a href="#concur" class="headerlink" title="concur"></a>concur</h3><ul><li>to agree, be in accord with, unite in opinion</li><li>tips:<ul><li><strong>act together</strong>: combine in having an effect<ul><li>Time and chance concurred in our success.</li></ul></li><li><strong>happen together</strong>: occur at the same time, coincide<ul><li>His pay raise concurred with his promotion.</li></ul></li><li><strong>agree</strong>：<ul><li>your story concurs with theirs</li><li>we concurred on almost every point of negotiation.</li></ul></li></ul></li></ul><h3 id="precociousness"><a href="#precociousness" class="headerlink" title="precociousness"></a>precociousness</h3><ul><li>early development or maturity, especially in mental ability. (precocious)</li><li>tips:<ul><li>precocious: children whose intellectual emotional development is advanced.</li></ul></li><li>antonyms: retardation</li></ul><h3 id="aloof"><a href="#aloof" class="headerlink" title="aloof"></a>aloof</h3><ul><li>apart, at a distance, removed, withdrawn, not wishing to speak or associate with others</li><li>tips:<ul><li>aloof person: reserved and keeps a cool distance</li><li>aloofness: reluctance to get involved or take an interest in sth.</li></ul></li><li>synonyms: unsympathetic, unapproachable, standoffish, indifferent</li></ul><h3 id="creed"><a href="#creed" class="headerlink" title="creed"></a>creed</h3><ul><li>belief, professed faith or opinion, especially a system of religious belief.</li><li>synonyms: doctrine, dogma</li><li>compare:<ul><li>credo: more learned word, a formal declaration of belief</li><li>creed: more generally</li></ul></li><li>tips:<ul><li>credo: source of incredible, credible, credulous</li><li>credulous: inclined to believe without questioning<ul><li>synonym: gullible</li><li>a credulous person</li></ul></li></ul></li></ul><h3 id="tawdry"><a href="#tawdry" class="headerlink" title="tawdry"></a>tawdry</h3><ul><li>cheap, showy, gaudy, garish, sleazy</li><li>tips:<ul><li>literally: tawdry clothing</li><li>figuratively: have a tawdry reputation</li></ul></li></ul><h3 id="peevish"><a href="#peevish" class="headerlink" title="peevish"></a>peevish</h3><ul><li>irritable, cross, complaining, fretful, ill-humored, impatient, difficult to please</li><li>tips:<ul><li>peevish moods, peevish remarks, peevish looks</li><li>peeve: something that irritates or annoys<ul><li>Her pet peeve is a wet towel left on the bed.</li></ul></li></ul></li></ul><h3 id="arduous"><a href="#arduous" class="headerlink" title="arduous"></a>arduous</h3><ul><li>very difficult, hard to achieve or accomplish, requiring great effort</li><li>tips:<ul><li>something is an arduous task.</li><li>raising children is arduous responsibility.</li></ul></li><li>synonyms: strenuous, laborious, toilsome.</li></ul><h3 id="personable"><a href="#personable" class="headerlink" title="personable"></a>personable</h3><ul><li>attractive pleasing in appearance, handsome, comely, fair, presentable</li><li>compare:<ul><li><strong>sociable</strong>, <strong>affable</strong>, <strong>amiable</strong>: friendly, pleasant, approachable</li><li>awkward or unbecoming person cannot be personable.</li><li><strong>personable</strong>: either attractive in appearance or in personality or in both.</li></ul></li></ul><h3 id="resolute"><a href="#resolute" class="headerlink" title="resolute"></a>resolute</h3><ul><li>firmly determined, settled, resolved, having a set opinion or purpose, steadfast, unwavering, persevering</li><li>tips:<ul><li>The lawyers tried to resolve the case out of court.</li><li>He was resolute about earning master’s degree and starting a successful business.</li></ul></li><li>antonyms:<ul><li>irresolute, unsteady, vacillating</li></ul></li></ul><h3 id="supposition"><a href="#supposition" class="headerlink" title="supposition"></a>supposition</h3><ul><li>assumption, theory, hypothesis (suppose)</li><li>compare:<ul><li>hypothesis: a preliminary or incomplete theory based on insufficient evidence.<ul><li>There are conflicting hypotheses about the origin of the universe.</li></ul></li><li>conjecture: a assumption based on so <strong>little evidence</strong> that it is <strong>merely an educated guess</strong>.<ul><li>Every week we hear different conjectures about trends in the stock market.</li></ul></li><li>supposition: based on ample evidence or no  evidence, may be either sensible or irrational<ul><li>His suppostion about the company’s financial condition proved consistent with the facts.</li></ul></li></ul></li></ul><h3 id="arbitrary"><a href="#arbitrary" class="headerlink" title="arbitrary"></a>arbitrary</h3><ul><li>unreasoned, based on personal feelings or preferences rather than on reason, logic, or law</li><li>tips:<ul><li><em>An arbitrary price for a product is not necessarily a fair price.</em></li><li>determined or arrived at in a random or illogical manner.<ul><li>An arbitrary decisions: in haphazard way</li></ul></li><li>exercising, unrestrained or absolute power<ul><li><em>An arbitrary government</em> has no regard for individual liberty.</li></ul></li></ul></li></ul><h3 id="monotonous"><a href="#monotonous" class="headerlink" title="monotonous"></a>monotonous</h3><ul><li>lacking variety, tediously uniform, unvarying and dull (monotony)</li><li>tips:<ul><li>monotonous speaker, monotonous music, monotonous job</li></ul></li></ul><h3 id="legacy"><a href="#legacy" class="headerlink" title="legacy"></a>legacy</h3><ul><li>something handed down from the past, an inheritance</li><li>tips:<ul><li>a gift of money or property provided by a will, an inheritance, bequest<ul><li>Her wealthy uncle left her a generous legacy</li></ul></li><li>anything inherited or passed down through time<ul><li>The cultural legacy of ancient Greece and Rome has shaped Western civilization.</li></ul></li></ul></li></ul><h3 id="manifold"><a href="#manifold" class="headerlink" title="manifold"></a>manifold</h3><ul><li>numerous, varied, consisting of many kinds, elements, features, characteristics</li><li>compare:<ul><li>many: much, a lot</li><li>manifold: emphasize variety, diversity<ul><li>a job with manifold duties means things are both numerous and varied</li></ul></li><li>multifarious: variety and diversity<ul><li>human race is multifarious</li></ul></li><li>multitudinous: containing a multitude, a great number of persons or things<ul><li>multitudious administrative chores<br>tips:<br>manifold operations and divisions, manifold responsibilities</li></ul></li></ul></li></ul><h3 id="pliant"><a href="#pliant" class="headerlink" title="pliant"></a>pliant</h3><ul><li>bending easily, flexible, adaptable, workable</li><li>compare:<ul><li>pliant: bending or moving easily</li><li>pliable: objects that are easily workable</li><li>supple: material things or human body that is flexible and limber</li></ul></li></ul><h3 id="retort"><a href="#retort" class="headerlink" title="retort"></a>retort</h3><ul><li>a quick reply, especially one that is cutting or witty</li><li>compare:<ul><li>retort: a swift pointed response</li><li>rejoinder: any answer or response, but specifically a counter-reply, an answer to a reply</li></ul></li><li>tips:<ul><li><em>Phil’s clever retorts kept his opponent on the defensive.</em></li></ul></li></ul><h3 id="obstinate"><a href="#obstinate" class="headerlink" title="obstinate"></a>obstinate</h3><ul><li>stubborn, inflexible, unwilling to give in or compromise, not yielding to argument or persuasion</li><li>tips:<ul><li>obstinate person stubbornly adheres to a purpose or opinion, often regardless of the consequences<ul><li>First we reasoned with him, then we pleaded with him, but <strong>no matter what we said he remained obstinate</strong> and determined to have his way.</li></ul></li></ul></li></ul><h3 id="lacerate"><a href="#lacerate" class="headerlink" title="lacerate"></a>lacerate</h3><ul><li>tear, cut roughly, rend, mangle</li><li>tips:<ul><li>literally<ul><li>The sharp thorn lacerated his thumb.</li></ul></li><li>figuratively: wound, afflict, cause pain<ul><li>Her husband’s <em>vicious retort</em> <strong>lacerated her pride</strong> and made her burst into tears.</li></ul></li></ul></li></ul><h3 id="omnipotent"><a href="#omnipotent" class="headerlink" title="omnipotent"></a>omnipotent</h3><ul><li>all-powerful, almighty, having unlimited power or authority</li><li>compare: <ul><li>omnidirectional: all-directional</li><li>omnipresent</li><li>omniscient: all-knowing</li><li>omnivorous: eating all kinds of food<ul><li>She is an avid reader with an omnivorous mind.</li></ul></li></ul></li></ul><h3 id="unscrupulous"><a href="#unscrupulous" class="headerlink" title="unscrupulous"></a>unscrupulous</h3><ul><li>untrustworthy, dishonorable, deceitful, corrupt, lacking integrity or moral principles</li><li>compare:<ul><li>scruple: something that causes hesitation or doubt in determining what is appropriate and proper.</li><li>scrupulous: having scruples<ul><li>The scruplous person is precise, careful, and honest.</li></ul></li><li>unscrupulous<ul><li>unscrupulous business practices</li></ul></li></ul></li></ul><h3 id="renaissance"><a href="#renaissance" class="headerlink" title="renaissance"></a>renaissance</h3><ul><li>a revival, rebirth, resurgence, renewal of life or vigor</li><li>tips:<ul><li>a cultural renaissance, moral renaissance, spiritual renaissance, a renaissance in the economy</li></ul></li></ul><h3 id="genesis"><a href="#genesis" class="headerlink" title="genesis"></a>genesis</h3><ul><li>a coming into being, beginning, origin, birth, creation</li><li>tips:<ul><li>the genesis of an idea/ a work of art/ an important social movement/ distinguished career. </li></ul></li></ul><h3 id="warrant"><a href="#warrant" class="headerlink" title="warrant"></a>warrant</h3><ul><li>justify, give good reason for, authorize, sanction<ul><li>the circumstances do not warrant such extraordinary measures.</li><li>the  evidence warrants further investigation</li><li>these safety procedures are warranted by company regulations</li></ul></li><li>tips:<ul><li>guarantee, promise<ul><li>give formal assurance of the Postal Service will not warrant delivery on a specific day</li><li>the manufacturer warrants the safety of the product</li></ul></li></ul></li></ul><h3 id="cantankerous"><a href="#cantankerous" class="headerlink" title="cantankerous"></a>cantankerous</h3><ul><li>difficult to deal with, disagreeable, argumentative, quick to quarrel or to exhibit ill will</li><li>tips:<ul><li>cantankerous old man, cantankerous relatives</li></ul></li><li>synonyms:<ul><li>contentious: quarrelsome, prone to argue or dispute</li><li>malicious: mean-spirited, nasty, spiteful</li><li>irascible: quick-tempered, easily angered, extremely irritable</li></ul></li></ul><h3 id="flippant"><a href="#flippant" class="headerlink" title="flippant"></a>flippant</h3><ul><li>disrespectful in a frivolous way, treating something serious in a trivial manner</li><li>tips:<ul><li>expression causing dismay or offense<ul><li>flippant language, flippant remark</li></ul></li><li>humorous<ul><li>flippant comments of talk show host</li></ul></li></ul></li><li>synonyms:<ul><li>cheeky, fresh, thoughtless, impertinent</li></ul></li><li>antonyms:<ul><li>solemn, sober, sedate, grave</li></ul></li></ul><h3 id="subjugate"><a href="#subjugate" class="headerlink" title="subjugate"></a>subjugate</h3><ul><li>conquer, defeat, vanquish, overwhelm completely, bring under rigid, control, make submissive, dominate, enslave</li><li>compare:<ul><li>defeat: winning, beating, or opponent in a single engagement<ul><li>defeat a person in an argument/contest/game/fight</li></ul></li><li>conquer: achieving a final victory or gaining  complete control over an opponent after a series of contests<ul><li>After a long and arduous campaign, Caesar conquered the Gauls.</li></ul></li><li>subjugate: domination, bringing the vanquished opponent under complete and rigid control<ul><li>Hitler brutally subjugated people.</li></ul></li><li>subjugation<ul><li>war</li><li>psychological domination<ul><li>subjugate an addiction, subjugate a impulse / an emotion - yoke it, make it submit to your will, bring it under complete control.</li></ul></li></ul></li></ul></li></ul><h3 id="wry"><a href="#wry" class="headerlink" title="wry"></a>wry</h3><ul><li>twisted, crooked, lopsided, askew, distorted in an odd, amusing way</li><li>tips:<ul><li>twisted</li><li>twisted in a peculiar and humorous manner<ul><li>a wry simile or grin: crooked, lopsided,comical</li><li>a wry remark: funny or sarcastic twist to it</li><li>a person with a wry sense of humor: twisting or distorting things in a laughable way</li></ul></li></ul></li></ul><h3 id="urbane"><a href="#urbane" class="headerlink" title="urbane"></a>urbane</h3><ul><li>polished, sophisticated, suave, cosmopolitan</li><li>tips:<ul><li>Mary’s stunning designer dresses and witty, urbane conversation made her a popular guest at all the high-society parties.</li></ul></li></ul><h3 id="jargon"><a href="#jargon" class="headerlink" title="jargon"></a>jargon</h3><ul><li>specialized and pretentious language; speech or writing that is highly technical and difficult to understand</li><li>tips:<ul><li>a means for members of a particular group to communicate precisely and efficiently<ul><li>medical jargon; computerese; legal jargon</li></ul></li><li>any pretentious speech or writing that seems unnecessarily difficult to understand<ul><li>savvy businesspeople know that using a lot of professional jargon will only alienate clients.</li></ul></li></ul></li></ul><h3 id="prudent"><a href="#prudent" class="headerlink" title="prudent"></a>prudent</h3><ul><li>cautious, careful, planning wisely, exercising sound judgment in practical matters</li><li>synonyms:<ul><li>discreet, judicious, circumspect</li><li>spending carefully, using  one’s resources wisely<ul><li>thrifty, economical and frugal</li></ul></li></ul></li><li>compare<ul><li>circumspect<ul><li>circumspect person: looks around carefully to make sure that no unforseen circumstance will frustrate a plan of action.</li></ul></li><li>prudent<ul><li>prudent people: concerned with protecting their personal interest and providing for a rainy day.(sound, careful judgment in handling practical matters, especially money)</li></ul></li></ul></li></ul><h3 id="inviolable"><a href="#inviolable" class="headerlink" title="inviolable"></a>inviolable</h3><ul><li>secure, safe from assault, infringement or destruction, sacred, untouchable, unassailable, incorruptible</li><li>tips:<ul><li>inviolable peace</li><li>inviolable contract</li><li>inviolable oath or promise</li><li>inviolable place</li></ul></li></ul><h3 id="commodious"><a href="#commodious" class="headerlink" title="commodious"></a>commodious</h3><ul><li>spacious, having plenty of room, comfortably convenient</li><li>synonyms:<ul><li>ample, capacious</li></ul></li><li>compare:<ul><li>accommodate, accommodations: sleeping quarters, lodging</li></ul></li></ul><h3 id="proximity"><a href="#proximity" class="headerlink" title="proximity"></a>proximity</h3><ul><li>nearness, closeness, state of being in the vicinity of something</li><li>tips:<ul><li>the proximity of their houses</li><li>the proximity of historic events</li><li>the proximity of two ideas</li><li>In modern society, marriage between first cousins is forbidden because of their proximity of blood relation.</li><li>marriage with the girl or boy next door, proximity was the deciding factor.</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;paraphrase&quot;&gt;&lt;a href=&quot;#paraphrase&quot; class=&quot;headerlink&quot; title=&quot;paraphrase&quot;&gt;&lt;/a&gt;paraphrase&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;restate / restatement&lt;/li&gt;
&lt;li&gt;c
      
    
    </summary>
    
      <category term="Languages" scheme="http://yoursite.com/categories/Languages/"/>
    
      <category term="English" scheme="http://yoursite.com/categories/Languages/English/"/>
    
      <category term="Verbal Advantage" scheme="http://yoursite.com/categories/Languages/English/Verbal-Advantage/"/>
    
    
      <category term="English" scheme="http://yoursite.com/tags/English/"/>
    
      <category term="Vocabularies" scheme="http://yoursite.com/tags/Vocabularies/"/>
    
  </entry>
  
  <entry>
    <title>WSJ Collections</title>
    <link href="http://yoursite.com/2019/01/23/WSJ/"/>
    <id>http://yoursite.com/2019/01/23/WSJ/</id>
    <published>2019-01-22T16:00:00.000Z</published>
    <updated>2019-02-11T10:40:21.286Z</updated>
    
    <content type="html"><![CDATA[<p>This note contains some summaries of news from the Wall Street Journal. </p><h2 id="Stocks-Decline-as-Growth-Concerns-Resurface"><a href="#Stocks-Decline-as-Growth-Concerns-Resurface" class="headerlink" title="Stocks Decline as Growth Concerns Resurface"></a>Stocks Decline as Growth Concerns Resurface</h2><p>Date: Jan. 22, 2019; By Michael Wursthorn and Avantika Chilkoti</p><p>Points:</p><ul><li>The main index in US market fell down, seemly halting the recoveries.<ul><li>IMF reduced its forecast for global economic growth in 2019.</li><li>Chinese economy decelerate faster than expected, with growth at the slowest annual pace in 2018 since 1990.</li><li>FT said Trump administration turned down an offer hold preparatory trade talks with China, which was denied by officials.</li><li>US economy outlook was muddied by recent housing data, which showed existing-home sales fell in Dec. to the weakest level in more than 3 years.</li></ul></li></ul><p>Idiom &amp; Phrase &amp; Sentence:</p><ul><li>“We are <strong>in a positive, but slower, meandering path of growth</strong>,” <em>with US-China trade tensions, the continuing government shutdown and the overall impact on corporate profits all acting as wild cards for investors</em> that could <strong>drastically alter the investment landscape</strong>, He added.</li></ul><p>Links:<br><a href="https://www.wsj.com/articles/global-stocks-slip-as-economic-concerns-resurface-11548146958?mod=searchresults&amp;page=1&amp;pos=2" title="Stocks Decline as Growth Concerns Resurface" target="_blank" rel="noopener">Stocks Decline as Growth Concerns Resurface</a></p><h2 id="Scamming-Grandma-Financial-Abuse-of-Seniors-Hits-Record"><a href="#Scamming-Grandma-Financial-Abuse-of-Seniors-Hits-Record" class="headerlink" title="Scamming Grandma: Financial Abuse of Seniors Hits Record"></a>Scamming Grandma: Financial Abuse of Seniors Hits Record</h2><p>Date: Jan. 24, 2019; By Yuka Hayashi</p><p>Points:</p><ul><li>Cases of elder financial abuse was reported more than double the amount five years earlier.<ul><li>New law was enacted to prompt banks to address frauds and scams.</li><li>Bankers attribute a increase in social media use by the older for a surge in fraud cases targeting seniors.</li></ul></li></ul><p>Idiom &amp; Phrase &amp; Sentence:</p><ul><li><strong>Only later did he find out</strong> that there was no DUI and his grandson hadn’t been in an accident. </li><li>Besides the grandchild scam, there are romance or online dating schemes <strong>in which victims are deceived into online relationships</strong> before <strong>being swindled out of their savings</strong>.</li></ul><p>Links:<br><a href="https://www.wsj.com/articles/scamming-grandma-financial-abuse-of-seniors-hits-record-11548344907?mod=hp_lead_pos5" title="Scamming Grandma: Financial Abuse of Seniors Hits Record" target="_blank" rel="noopener">Scamming Grandma: Financial Abuse of Seniors Hits Record</a></p><h2 id="As-China-Trade-Talks-Begin-Trump-Faces-Pressure-to-Make-a-Deal"><a href="#As-China-Trade-Talks-Begin-Trump-Faces-Pressure-to-Make-a-Deal" class="headerlink" title="As China Trade Talks Begin, Trump Faces Pressure to Make a Deal"></a>As China Trade Talks Begin, Trump Faces Pressure to Make a Deal</h2><p>Date: Jan. 29, 2019; By Vivian Salama</p><p>Points:</p><ul><li>Recent: Trump gets pressure.<ul><li>Chinese tariffs imposed to counter U.S. levies have a negative impact on business groups and his staunchest supporters and constituencies.</li></ul></li><li>Background: Trump made a pledge.<ul><li>Trump are on a pledge to renegotiate trade deals with the aim of protecting American workers. If optimistic, it is a big victory and create real momentum across the globe.</li></ul></li><li>However: risk for Republicans, if it is failure.</li><li>Another source of pressure: <ul><li>Concerns that the fight drag on indefinitely</li></ul></li><li>Next: Talk will begin Wednesday and conclude Thursday.<ul><li>Talk aimed at staving off the plans of raising tariffs.</li><li>Two sides <strong>remain far apart</strong>, with Chinese little sign of a change.</li><li>China hawks and business groups are concerned that Trump seek a quick win.</li></ul></li></ul><p>Idiom &amp; Phrase &amp; Sentence:</p><p><strong><em>As stocks swooned</em></strong>, Mr. Trump anxiously called advisers both inside and outside the White House, seeking reassurances that his stance on China wasn’t <em>driving the selloff</em>.</p><p>Links:<br><a href="https://www.wsj.com/articles/as-china-trade-talks-begin-trump-faces-pressure-to-make-a-deal-11548808477" title="As China Trade Talks Begin, Trump Faces Pressure to Make a Deal" target="_blank" rel="noopener">As China Trade Talks Begin, Trump Faces Pressure to Make a Deal</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This note contains some summaries of news from the Wall Street Journal. &lt;/p&gt;
&lt;h2 id=&quot;Stocks-Decline-as-Growth-Concerns-Resurface&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="Languages" scheme="http://yoursite.com/categories/Languages/"/>
    
      <category term="English" scheme="http://yoursite.com/categories/Languages/English/"/>
    
      <category term="Wall Street Journal" scheme="http://yoursite.com/categories/Languages/English/Wall-Street-Journal/"/>
    
    
      <category term="English" scheme="http://yoursite.com/tags/English/"/>
    
      <category term="WSJ" scheme="http://yoursite.com/tags/WSJ/"/>
    
  </entry>
  
  <entry>
    <title>Derivatives Basics</title>
    <link href="http://yoursite.com/2019/01/21/Derivatives%20Basics/"/>
    <id>http://yoursite.com/2019/01/21/Derivatives Basics/</id>
    <published>2019-01-20T16:00:00.000Z</published>
    <updated>2019-01-25T12:19:59.496Z</updated>
    
    <content type="html"><![CDATA[<p>This note contains basic conceptions of financial instruments and derivatives including stock, bonds, forward contracts, swaps, options.</p><h1 id="Classification-of-financial-instruments"><a href="#Classification-of-financial-instruments" class="headerlink" title="Classification of financial instruments"></a>Classification of financial instruments</h1><ul><li>basic securities<ul><li>fixed income<ul><li>bonds</li><li>bank account</li><li>loans</li></ul></li><li>equities<ul><li>stocks</li></ul></li></ul></li><li>derivatives and contracts<ul><li>options (nonlinear function of a stock)<ul><li>calls &amp; pulls</li><li>exotic options</li></ul></li><li>swaps</li><li>futures &amp; forwards</li><li>credit risk derivatives</li></ul></li></ul><h2 id="stocks"><a href="#stocks" class="headerlink" title="stocks"></a>stocks</h2><p>issued by firms to finance operations<br>represent ownership of the firm<br>price known today, but not in the future<br>may or may not pay diviends</p><h2 id="bonds"><a href="#bonds" class="headerlink" title="bonds"></a>bonds</h2><p>price known today<br>future payoffs known at fixed dates<br>otherwise the price movement is random<br>final payoff at maturity: face value/ nominal value/principal<br>intermediate payoffs: coupons<br>exposed to default/credit risk</p><h2 id="derivatives"><a href="#derivatives" class="headerlink" title="derivatives"></a>derivatives</h2><ul><li>Sell for a <strong>price/value/premium</strong> today.</li><li>Future value <strong>derived</strong> from the value of the<br>underlying securities (as a function of<br>those).</li><li>Traded at exchanges – standardized<br>contracts, no credit risk;</li><li>Over-the-counter (OTC) – a network of<br>dealers and institutions, can be nonstandard, some credit risk.</li></ul><h3 id="Why-derivatives"><a href="#Why-derivatives" class="headerlink" title="Why derivatives?"></a>Why derivatives?</h3><ul><li>To hedge risk (primary reason)</li><li>To speculate</li><li>To attain “arbitrage” profit</li><li>To exchange one type of payoff for another</li><li>To circumvent regulations (flexible)</li></ul><h2 id="Forward-Contract"><a href="#Forward-Contract" class="headerlink" title="Forward Contract"></a>Forward Contract</h2><ul><li>An agreement to buy (<strong>long</strong>) or sell (<strong>short</strong>) a given <strong>underlying</strong> asset S:<ul><li>Underlying asset could be stock or merchandise</li><li>At a predetermined future date T (<strong>maturity</strong>).</li><li>At a predetermined price F (<strong>forward price</strong>).</li></ul></li><li>F is chosen so that the contract has zero value today.<ul><li>a kind of zero sum game</li><li>Today: gain &amp; loss are 0 (different from options)</li></ul></li><li>Delivery takes place at maturity T:<ul><li>Payoff at maturity: <ul><li>Long: S(T) - F</li><li>Short: F - S(T)</li></ul></li><li>Price F set when the contract is established.</li><li>S(T) = spot (market) price at maturity</li></ul></li><li>Long position: obligation to buy</li><li>Short position: obligation to sell</li><li><strong>Differences with options</strong>:<ul><li>Delivery has to take place.</li><li>Zero value today.<blockquote><p><strong>Example</strong></p><p>On May 13, a firm enters into a long<br>forward contract to buy one million euros in<br>six months at an exchange rate of 1.3. On November 13, the firm pays F=$1,300,000 and receives S(T)= one million euros. How does the payoff look like at time T as a<br>function of the dollar value of S(T) spot<br>exchange rate?</p><p>graphs</p></blockquote></li></ul></li></ul><h2 id="Swaps"><a href="#Swaps" class="headerlink" title="Swaps"></a>Swaps</h2><p>Agreement between two parties to exchange two series of payments.</p><ul><li>Classic interest rate swap:<ul><li>One party pays fixed interest rate payments on a notional amount.</li><li>Counterparty pays floating (random) interest rate payments on the same notional amount.</li></ul></li><li>Floating rate is often linked to LIBOR (London Interbank Offer Rate), reset at every payment date.</li></ul><p>The two parties may be exposed to different interest rates in different markets, or to different institutional restrictions, or to different regulations.</p><ul><li>a swap example<ul><li>New pension regulations require higher investment in fixed income securities by pension funds, creating a problem: liabilities are long-term while new holdings of fixed income securities may be short-term.</li><li>Instead of selling assets such as stocks, a pension fund can enter a swap, exchanging returns from stocks for fixed income returns.</li><li>Or, if it wants to have an option not to exchange, it can buy <strong>swaptions</strong> instead. </li></ul></li></ul><blockquote><p>Example: Swap Comparative Advantage<br>US firm B wants to borrow AUD, Australian firm A wants to borrow USD: </p><ul><li>Firm B can borrow at 5% in USD, 12.6% AUD</li><li>Firm A can borrow at 7% USD, 13% AUD</li><li>Expected gain = (7-5) – (13-12.6) = 1.6%</li></ul><p>Swaps:</p><ul><li>Bank gains 1.3% on USD, loses 1.1% on AUD, gain=0.2%</li><li>Firm B gains (12.6-11.9) = 0.7%</li><li>Firm A gains (7-6.3) = 0.7%</li></ul><p>Part of the reason for the gain is credit risk involved</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This note contains basic conceptions of financial instruments and derivatives including stock, bonds, forward contracts, swaps, options.&lt;
      
    
    </summary>
    
      <category term="Finance" scheme="http://yoursite.com/categories/Finance/"/>
    
      <category term="Derivatives" scheme="http://yoursite.com/categories/Finance/Derivatives/"/>
    
    
      <category term="Derivatives" scheme="http://yoursite.com/tags/Derivatives/"/>
    
      <category term="Option" scheme="http://yoursite.com/tags/Option/"/>
    
  </entry>
  
  <entry>
    <title>C++ Basics</title>
    <link href="http://yoursite.com/2019/01/16/C++%20Basics/"/>
    <id>http://yoursite.com/2019/01/16/C++ Basics/</id>
    <published>2019-01-15T16:00:00.000Z</published>
    <updated>2019-02-14T17:03:51.815Z</updated>
    
    <content type="html"><![CDATA[<p>This note contains basic structures of C++ including Iostream, if, while, for controlling statements.</p><h2 id="IOstream"><a href="#IOstream" class="headerlink" title="IOstream"></a>IOstream</h2><p>Stream class:</p><ul><li>standard I/O</li><li>read &amp; write files</li></ul><p>Standard I/O</p><ul><li>Input: screen</li><li>Output: keyboard</li></ul><p>notations</p><p>1.input: <code>&gt;&gt;</code>; output: <code>&lt;&lt;</code></p><ul><li>cout &lt;&lt; <em>expression</em> &lt;&lt; <em>expression</em></li><li>cin &gt;&gt; <em>expression</em> &gt;&gt; *expression”<pre><code>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b</span><br></pre></td></tr></table></figure></code></pre></li></ul><p>2. manipulator</p><ul><li><code>dec</code>: decimal</li><li><code>hex</code>: hexadecimal</li><li><code>oct</code>: octal</li><li><code>ws</code>: extract blank character</li><li><code>endl</code>: change a line and refresh current</li><li><code>ends</code>: insert blank character</li><li><code>setsprecision(int)</code>: set the number of decimals of floats</li><li><p><code>setw(int)</code>: set width</p><pre><code>  cout &lt;&lt; setw(5) &lt;&lt; setprecision(3) &lt;&lt; 3.1415</code></pre></li></ul><h2 id="if-statement"><a href="#if-statement" class="headerlink" title="if statement"></a>if statement</h2><p>syntax:</p><ul><li><p>if(<em>expression</em>) <em>statement</em></p><pre><code>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x &gt; y) <span class="built_in">cout</span> &lt;&lt; x;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>if(<em>expression</em>) <em>statement1</em><br>else <em>statement2</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( x &gt; y) <span class="built_in">cout</span> &lt;&lt; x;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; y;</span><br></pre></td></tr></table></figure></li><li><p>if(<em>expression1</em>) <em>statement1</em><br>else if(<em>expression2</em>) <em>statement2</em><br>else if(<em>expression3</em>) <em>statement3</em><br>…<br>else <em>statementn</em></p></li></ul><blockquote><p><strong>determine whether a year is a leap year</strong></p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;  </span><br><span class="line">using namespace std</span><br><span class="line">int main()&#123;</span><br><span class="line">int year;</span><br><span class="line">bool isLeapYear;</span><br><span class="line">cout &lt;&lt; &quot;Enter the year: &quot;;</span><br><span class="line">cin &gt;&gt; year;</span><br><span class="line">isLeapYear = ((year % 4 == 0 &amp;&amp; year &amp; 100 != 0) || (year % 400 == 0));</span><br><span class="line">if (isLeapYear)</span><br><span class="line">cout &lt;&lt; year &lt;&lt; &quot;is a leap year&quot; &lt;&lt; endl;</span><br><span class="line">else</span><br><span class="line">cout &lt;&lt; year &lt;&lt; &quot;is not a leap year&quot; &lt;&lt; endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></blockquote><p>nesting:</p><ul><li>if(<em>expression1</em>)<br>　　if(<em>expression2</em>) <em>statement1</em><br>　　else <em>statement2</em><br>else<br>　　if(<em>expression3</em>) <em>statement3</em><br>　　else <em>statement4</em></li></ul><p>tips:</p><ul><li>match each if and else, or use {}</li></ul><blockquote><p><strong>compare 2 input integers</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">&gt;<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">&gt;<span class="keyword">int</span> x, y;</span><br><span class="line">&gt;<span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter x and y: "</span>;</span><br><span class="line">&gt;<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">&gt;<span class="keyword">if</span> (x != y)</span><br><span class="line">&gt;<span class="keyword">if</span> (x &gt; y)</span><br><span class="line">&gt;<span class="built_in">cout</span> &lt;&lt; <span class="string">"x &gt; y"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&gt;<span class="keyword">else</span></span><br><span class="line">&gt;<span class="built_in">cout</span> &lt;&lt; <span class="string">"x &lt; y"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&gt;<span class="keyword">else</span></span><br><span class="line">&gt;<span class="built_in">cout</span> &lt;&lt; <span class="string">"x = y"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&gt;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="switch-statement"><a href="#switch-statement" class="headerlink" title="switch statement"></a>switch statement</h2><p>syntax:</p><ul><li>switch(<em>expression</em>){<br>case <em>expression1</em> : <em>statement1</em></li></ul><blockquote><p><strong>calculate the area of a graph</strong></p></blockquote><h2 id="while-statement"><a href="#while-statement" class="headerlink" title="while statement"></a>while statement</h2><p>syntax:</p><ul><li>while (<em>expression</em>) <em>statement</em></li></ul><p>tips: </p><ul><li>The statement must contain what changes the conditions of loop, which can be composite.</li><li>order: calculate the expression first. If it is true, do the statement</li></ul><blockquote><p><strong>calculate the sum of natural number 1 ~ 10</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt; <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">&gt; <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">&gt; <span class="keyword">int</span> i = <span class="number">1</span>, sum = <span class="number">0</span>;</span><br><span class="line">&gt; <span class="keyword">while</span> (i &lt;= <span class="number">10</span>)&#123;</span><br><span class="line">&gt;     sum += i;  <span class="comment">//sum = sum + i;</span></span><br><span class="line">&gt;     i++;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt; <span class="built_in">cout</span> &lt;&lt; <span class="string">"sum = "</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&gt;     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="do-while-statement"><a href="#do-while-statement" class="headerlink" title="do-while statement"></a>do-while statement</h2><p>syntax:</p><blockquote><p><strong>calculate the sum of natural number 1 ~ 10</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (i &lt;= <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"sum = "</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="for-statement"><a href="#for-statement" class="headerlink" title="for statement"></a>for statement</h2><p>syntax:</p><ul><li>for(<em>initial statement</em>; <em>expression1</em>; <em>expression2</em>) <em>statement</em></li></ul><p>tips:</p><ul><li>If expression1 is true, do the loop.</li><li>After the loop, do the expression2. </li><li>The for statement can replace the while and do-while statement.</li></ul><blockquote><p><strong>calculate the sum of natural number 1 ~ 10</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>, sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sum = "</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>find all the factors of an input integer</strong></p></blockquote><h2 id="nesting-amp-other-statement"><a href="#nesting-amp-other-statement" class="headerlink" title="nesting &amp; other statement"></a>nesting &amp; other statement</h2><p>syntax:</p><ul><li>break</li><li>continue</li><li>goto</li></ul><blockquote><p><strong>input an array of integers, determine whether each is positive or negative and count the number of them respectively</strong></p></blockquote><h2 id="definition-of-type"><a href="#definition-of-type" class="headerlink" title="definition of type"></a>definition of type</h2><p>1. definition</p><ul><li>typedef  </li><li>using</li></ul><p>2. enumeration</p><ul><li>enum <em>TypeName</em> {<em>list of values</em>}  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Weekday</span><br><span class="line">&#123;SUN, MON, TUE, WED, THU, FRI, SAT&#125;</span><br></pre></td></tr></table></figure></li></ul><p>tips:</p><ul><li>they cannot be evaluated to new values.</li><li><p>they can be matched with new values when defined.</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Weekday</span><br><span class="line">&#123;SUN=<span class="number">7</span>, MON=<span class="number">1</span>,&#125;</span><br></pre></td></tr></table></figure></li><li><p>they can be caluated.</p></li></ul><p>3. initial  </p><ul><li>auto</li><li>decltype</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This note contains basic structures of C++ including Iostream, if, while, for controlling statements.&lt;/p&gt;
&lt;h2 id=&quot;IOstream&quot;&gt;&lt;a href=&quot;#IOs
      
    
    </summary>
    
      <category term="Computer Science" scheme="http://yoursite.com/categories/Computer-Science/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Computer-Science/Programming/"/>
    
      <category term="C++" scheme="http://yoursite.com/categories/Computer-Science/Programming/C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="MOOC" scheme="http://yoursite.com/tags/MOOC/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/12/31/hello-world/"/>
    <id>http://yoursite.com/2018/12/31/hello-world/</id>
    <published>2018-12-30T16:00:00.000Z</published>
    <updated>2019-01-24T08:14:01.579Z</updated>
    
    <content type="html"><![CDATA[<p>“Hello World” is a magic sentence for programmers, since it is said that Brian Kernighan first wrote and ran it in a tutorial of language B in 1973, which was  referred again in his book <em>The C Programming Language</em> in 1978. Because of the prevalence of this book, other programmers gradually started to write how to print “Hello World” in their books as the very first program. Afterwards it becomes such a tradition that almost<br>all the programming books will follow it. So does the first web-page of my personal blog when generated automatically by github.</p><p>Personally speaking, I find that “Hello World” is amazing. For every beginner of programming like me, not only does “Hello World” sound like an appropriate greeting to the new code-world, but indicates the curiosity and a spirit of exploration, which fascinates me a lot. Moreover, it is also a kind of encouragement both for my exploration on this online platform and for my educational journey in several years. Therefore, I believe “Hello World” will be a good start for my personal blog and my life at the near end of the age 22.</p><p>I plan to make this blog an academics and profession oriented place, with some summarization of Mathematics, Computer Science, Finance or Business idea, which is part of the reason why I call it Guangnan’s Notes. Of course, I will post some stories and retrospect of my life, in a relatively formal way, on the blog. If you are interested in and curious about the other sides about me, please feel free to contact me on the social media.</p><p>So, Let’s start. Welcome to Guangnan’s Notes!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;“Hello World” is a magic sentence for programmers, since it is said that Brian Kernighan first wrote and ran it in a tutorial of language
      
    
    </summary>
    
      <category term="Thoughts" scheme="http://yoursite.com/categories/Thoughts/"/>
    
      <category term="Other" scheme="http://yoursite.com/categories/Thoughts/Other/"/>
    
    
      <category term="Journal" scheme="http://yoursite.com/tags/Journal/"/>
    
  </entry>
  
</feed>
