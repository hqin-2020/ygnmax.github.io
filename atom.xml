<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Guangnan&#39;s Notes</title>
  
  <subtitle>I rest, I rust</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-26T04:08:00.487Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ygnmax</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQL Basic</title>
    <link href="http://yoursite.com/2020/01/24/SQL%20Basics/"/>
    <id>http://yoursite.com/2020/01/24/SQL Basics/</id>
    <published>2020-01-24T05:00:00.000Z</published>
    <updated>2020-01-26T04:08:00.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Basic-Syntax"><a href="#Basic-Syntax" class="headerlink" title="Basic Syntax"></a>Basic Syntax</h1><h2 id="CREATE"><a href="#CREATE" class="headerlink" title="CREATE"></a>CREATE</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE People </span><br><span class="line"></span><br><span class="line">CREATE TABLE Users(</span><br><span class="line">name VARCHAR(128),</span><br><span class="line">email VARCHAR(128)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">DESCRIBE People;</span><br></pre></td></tr></table></figure><h2 id="DROP"><a href="#DROP" class="headerlink" title="DROP"></a>DROP</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE Users;</span><br></pre></td></tr></table></figure><h2 id="INSERT-INTO"><a href="#INSERT-INTO" class="headerlink" title="INSERT INTO"></a>INSERT INTO</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO Users (name, email) VALUES (&apos;Chuck&apos;, &apos;csev@umich.edu&apos;) ;</span><br><span class="line">INSERT INTO Users (name, email) VALUES (&apos;Somesh&apos;, &apos;somesh@umich.edu&apos;) ;</span><br><span class="line">INSERT INTO Users (name, email) VALUES (&apos;Caitlin&apos;, &apos;cait@umich.edu&apos;) ;</span><br><span class="line">INSERT INTO Users (name, email) VALUES (&apos;Ted&apos;, &apos;ted@umich.edu&apos;) ;</span><br><span class="line">INSERT INTO Users (name, email) VALUES (&apos;Sally&apos;, &apos;sally@umich.edu&apos;) ;</span><br></pre></td></tr></table></figure><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM Users WHERE email=&apos;ted@umich.edu&apos;</span><br></pre></td></tr></table></figure><h2 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h2><p>Replace / Change the values</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE Users SET name=&apos;Charles&apos; WHERE email=&apos;csev@umich.edu&apos;</span><br></pre></td></tr></table></figure><h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><p>Retrieving Records</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Users</span><br></pre></td></tr></table></figure><h3 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Users WHERE email=&apos;csev@umich.edu&apos;</span><br></pre></td></tr></table></figure><p>here, <code>*</code> is for all the columns</p><h3 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">Users</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> email</span><br></pre></td></tr></table></figure><h3 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h3><p>Include or some characteristics</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Users WHERE name LIKE &apos;%e%&apos;</span><br></pre></td></tr></table></figure><h3 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Users ORDER BY email DESC LIMIT 2;</span><br><span class="line">SELECT * FROM Users ORDER BY email LIMIT 1,2;</span><br></pre></td></tr></table></figure><h3 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT"></a>COUNT</h3><p>Counting rows with select</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(*) FROM Users;</span><br><span class="line">SELECT COUNT(*) FROM Users WHERE email=&apos;csev@umich.edu&apos;;</span><br></pre></td></tr></table></figure><h1 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h1><h2 id="String-Fields"><a href="#String-Fields" class="headerlink" title="String Fields"></a>String Fields</h2><p>String Fields are indexable for searching</p><h3 id="CHAR"><a href="#CHAR" class="headerlink" title="CHAR"></a>CHAR</h3><p><strong>CHAR</strong> allocates the entire space (faster for small strings where length is known)</p><h3 id="VARCHAR"><a href="#VARCHAR" class="headerlink" title="VARCHAR"></a>VARCHAR</h3><p><strong>VARCHAR</strong> allocates a variable amount of space depending on the data length (less space)</p><h2 id="Text-Fields"><a href="#Text-Fields" class="headerlink" title="Text Fields"></a>Text Fields</h2><p>Have a character set - paragraphs or HTML pages</p><p>Generally not used with indexing or sorting - and only then limited to a prefix</p><ul><li><p>TINYTEXT</p></li><li><p>TEXT</p></li><li><p>MEDIUMTEXT</p></li><li><p>LONGTEXT</p></li></ul><h2 id="Binary-Types-rarely-used"><a href="#Binary-Types-rarely-used" class="headerlink" title="Binary Types (rarely used)"></a>Binary Types (rarely used)</h2><p>Character = 8 - 32 bits of information depending on character set</p><h2 id="Binary-Large-Object-BLOB"><a href="#Binary-Large-Object-BLOB" class="headerlink" title="Binary Large Object (BLOB)"></a>Binary Large Object (BLOB)</h2><p>Large raw data, files, images, word documents, PDFs, movies, etc.</p><p>No translation, indexing, or character set.</p><h2 id="Integer-Numbers"><a href="#Integer-Numbers" class="headerlink" title="Integer Numbers"></a>Integer Numbers</h2><ul><li>TINYINT (-128, 128)</li><li>SMALLINT (-32768, +32768)</li><li>INT or INTEGER (2 Billion)</li><li>BIGINT - (10**18 ish)</li></ul><h2 id="Floating-Point-Numbers"><a href="#Floating-Point-Numbers" class="headerlink" title="Floating Point Numbers"></a>Floating Point Numbers</h2><ul><li>FLOAT (32-bit) 10**38 with seven digits of accuracy</li><li>DOUBLE (64-bit) 10**308 with 14 digits of accuracy</li></ul><h2 id="Dates"><a href="#Dates" class="headerlink" title="Dates"></a>Dates</h2><ul><li>TIMESTAMP - ‘YYYY-MM-DD HH:MM:SS’ (1970, 2037)</li><li>DATETIME - ‘YYYY-MM-DD HH:MM:SS’</li><li>DATE - ‘YYYY-MM-DD’</li><li>TIME - ‘HH:MM:SS’</li><li>Built-in MySQL function <code>NOW()</code></li></ul><h1 id="Database-Keys-and-Indexes"><a href="#Database-Keys-and-Indexes" class="headerlink" title="Database Keys and Indexes"></a>Database Keys and Indexes</h1><h2 id="AUTO-INCREMENT"><a href="#AUTO-INCREMENT" class="headerlink" title="AUTO_INCREMENT"></a>AUTO_INCREMENT</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE Users;</span><br><span class="line"></span><br><span class="line">CREATE TABLE Users (</span><br><span class="line">user_id INT UNSIGNED NOT NULL</span><br><span class="line">AUTO_INCREMENT,</span><br><span class="line">name VARCHAR(128),</span><br><span class="line">email VARCHAR(128),</span><br><span class="line">PRIMARY KEY(user_id),</span><br><span class="line">INDEX(name)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO Users (name, email) VALUES (&apos;Chuck&apos;, &apos;csev@umich.edu&apos;) ;</span><br><span class="line">INSERT INTO Users (name, email) VALUES (&apos;Somesh&apos;, &apos;somesh@umich.edu&apos;) ;</span><br><span class="line">INSERT INTO Users (name, email) VALUES (&apos;Caitlin&apos;, &apos;cait@umich.edu&apos;) ;</span><br><span class="line">INSERT INTO Users (name, email) VALUES (&apos;Ted&apos;, &apos;ted@umich.edu&apos;) ;</span><br><span class="line">INSERT INTO Users (name, email) VALUES (&apos;Sally&apos;, &apos;sally@umich.edu&apos;) ;</span><br></pre></td></tr></table></figure><h2 id="Specifying-Indexes"><a href="#Specifying-Indexes" class="headerlink" title="Specifying Indexes"></a>Specifying Indexes</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Users ADD INDEX ( email ) USING BTREE</span><br></pre></td></tr></table></figure><p>Relation, B-Tree and Hashes</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Basic-Syntax&quot;&gt;&lt;a href=&quot;#Basic-Syntax&quot; class=&quot;headerlink&quot; title=&quot;Basic Syntax&quot;&gt;&lt;/a&gt;Basic Syntax&lt;/h1&gt;&lt;h2 id=&quot;CREATE&quot;&gt;&lt;a href=&quot;#CREATE&quot;
      
    
    </summary>
    
      <category term="Computer Science" scheme="http://yoursite.com/categories/Computer-Science/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Computer-Science/Programming/"/>
    
      <category term="SQL" scheme="http://yoursite.com/categories/Computer-Science/Programming/SQL/"/>
    
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
      <category term="Data Science" scheme="http://yoursite.com/tags/Data-Science/"/>
    
      <category term="Database" scheme="http://yoursite.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Binary Model</title>
    <link href="http://yoursite.com/2019/12/15/BinModel/"/>
    <id>http://yoursite.com/2019/12/15/BinModel/</id>
    <published>2019-12-15T05:00:00.000Z</published>
    <updated>2020-01-26T16:08:13.879Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Binary-Tree"><a href="#Binary-Tree" class="headerlink" title="Binary Tree"></a>Binary Tree</h1><h2 id="Replication-Pricing"><a href="#Replication-Pricing" class="headerlink" title="Replication Pricing"></a>Replication Pricing</h2><p>Under the condition:</p><script type="math/tex; mode=display">u > e^{r(T-t)}>d</script><p>Construct a portfolio which receive risk free rate: </p><ul><li>short 1 call option</li><li>long $\Delta$ stocks</li></ul><p>Then </p><script type="math/tex; mode=display">\Delta S u - f_u = \Delta S d - f_d \\\Delta = \frac{f_u-f_d}{Su - Sd}</script><p>Because $S\Delta - f$ is a risk free asset, it will receive risk free rate whenever it increases or decreases:</p><script type="math/tex; mode=display">S\Delta - f = (\Delta S u - f_u)e^{-r(T-t)}</script><p>and we can get the formula of $f$:</p><script type="math/tex; mode=display">\begin{eqnarray*}f &=& S \Delta - (\Delta S u - f_u)e^{-r(T-t)} \\  &=& e^{-r(T-t)}[e^{r(T-t)}S\Delta - (\Delta Su - f_u)] \\  &=& e^{-r(T-t)}[(e^{r(T-t)}S-Su)\Delta  + f_u)] \\  &=& e^{-r(T-t)}[(e^{r(T-t)}S-Su)\frac{f_u-f_d}{Su - Sd}  + f_u)] \\  &=& e^{-r(T-t)}[\frac{e^{r(T-t)}-u}{u-d}(f_u-f_d)  + f_u)] \\  &=& e^{-r(T-t)}[(\frac{e^{r(T-t)}-u}{u-d}+1)f_u  +(- \frac{e^{r(T-t)}-u}{u-d})f_d)] \\  &=& e^{-r(T-t)}[pf_u  +(1- p)f_d] \\\end{eqnarray*}</script><p>where</p><script type="math/tex; mode=display">p =\frac{e^{r(T-t)}-d}{u-d}</script><h1 id="Codes-for-Binary-Tree"><a href="#Codes-for-Binary-Tree" class="headerlink" title="Codes for Binary Tree"></a>Codes for Binary Tree</h1><h2 id="in-C"><a href="#in-C" class="headerlink" title="in C++"></a>in C++</h2><h3 id="The-thought"><a href="#The-thought" class="headerlink" title="The thought"></a>The thought</h3><p>header file</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BinModel01_h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BinModel01_h</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//computing risk-neutral probability</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">RiskNeutProb</span><span class="params">(doube U, <span class="keyword">double</span> D, <span class="keyword">double</span> R)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//computing the stock price at node n,i</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">S</span><span class="params">(<span class="keyword">double</span> S0, <span class="keyword">double</span> U, <span class="keyword">double</span> D, <span class="keyword">int</span> n, <span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//inputting, displaying and checking model data</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetInputData</span><span class="params">(<span class="keyword">double</span>&amp; S0, <span class="keyword">double</span>&amp; U, <span class="keyword">double</span>&amp; D, <span class="keyword">double</span>&amp; R)</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Binary-Tree&quot;&gt;&lt;a href=&quot;#Binary-Tree&quot; class=&quot;headerlink&quot; title=&quot;Binary Tree&quot;&gt;&lt;/a&gt;Binary Tree&lt;/h1&gt;&lt;h2 id=&quot;Replication-Pricing&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Economics" scheme="http://yoursite.com/categories/Economics/"/>
    
      <category term="Finance" scheme="http://yoursite.com/categories/Economics/Finance/"/>
    
      <category term="Financial Engineering" scheme="http://yoursite.com/categories/Economics/Finance/Financial-Engineering/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="Finance" scheme="http://yoursite.com/tags/Finance/"/>
    
      <category term="Asset Pricing" scheme="http://yoursite.com/tags/Asset-Pricing/"/>
    
  </entry>
  
  <entry>
    <title>Binary Model</title>
    <link href="http://yoursite.com/2019/11/23/BSM%20Model/"/>
    <id>http://yoursite.com/2019/11/23/BSM Model/</id>
    <published>2019-11-23T05:00:00.000Z</published>
    <updated>2020-01-26T16:10:33.213Z</updated>
    
    <content type="html"><![CDATA[<p>The Episode 4</p><p>Assumptions:</p><ul><li><p>The short-term interest rate is known and is constant through time. (The interest term structure is flat.) (not restrict)</p></li><li><p>The stock price follows a random walk in continuous time with a variance rate proportional to the square of the stock price. Thus the distribution of stock prices is lognormal. The variance rate of the return on the stock is constant.(Geometric Brownian Motion.) ($\mu$ is a constant, and $\sigma$ is a constant.) (not restrict)</p><script type="math/tex; mode=display">dS = \mu S d t + \sigma S d W_t</script></li><li><p>Pays no dividends (not restrict)</p></li><li><p>No transaction costs. (restrict)</p></li><li><p>European</p></li><li><p>possible to borrow money to buy stocks / no penalties to short selling.</p></li></ul><p>Deduction:</p><p>$S$ is the stock price, $W_t$ is Standard Brownian Motion, $\mu$ is drift, $\sigma $ is volatility, $f$ is the price of a derivative of Stock.</p><script type="math/tex; mode=display">\Delta S = \mu S \Delta t + \sigma S \Delta W_t</script><p>According to Ito lemma,</p><script type="math/tex; mode=display">\begin{eqnarray*}df &=& \frac{\partial f}{\partial t}dt + \frac{\partial f}{\partial S}dS + \frac{1}{2}\frac{\partial^2 f}{\partial S^2}dS \times dS \\&=& \frac{\partial f}{\partial t}dt + \frac{\partial f}{\partial S}(\mu S d t + \sigma S d W_t) + \frac{1}{2}\frac{\partial^2 f}{\partial S^2}\sigma^2 S^2 dt \\&=& (\frac{\partial f}{\partial t} + \frac{\partial f}{\partial S}\mu S + \frac{1}{2}\frac{\partial^2 f}{\partial S^2}\sigma^2 S^2) dt + \frac{\partial f}{\partial S}\sigma S d W_t\end{eqnarray*}</script><p>therefore, in discrete form</p><script type="math/tex; mode=display">\Delta f = (\frac{\partial f}{\partial t} + \frac{\partial f}{\partial S}\mu S + \frac{1}{2}\frac{\partial^2 f}{\partial S^2}\sigma^2 S^2) \Delta t + \frac{\partial f}{\partial S}\sigma S \Delta W_t</script><p>Now that the stock and the derivative both have uncertainty term $\Delta W_t$, we want to  build a portfolio of  stock and derivative to eliminate the uncertainty in a short time:</p><ul><li><p>$\text{short} ~ 1 ~ \text{derivative} ~ (f)$</p></li><li><p>$\text{long} ~ \frac{\partial f}{\partial S} ~ \text{shares} ~ (S)$</p><p>In a short time, it is a risk-free portfolio, the value of which is</p><script type="math/tex; mode=display">\Pi = -f + \frac{\partial f}{\partial S} S</script><p>On the one hand, it has to have the risk-free return:</p><script type="math/tex; mode=display">\begin{eqnarray*}\Pi_t &=& \Pi_0 e ^{rt} \\\mathbb{ln}\Pi_t &=& \mathbb{ln}\Pi_0 + rt \\\frac{d\Pi}{\Pi} &=& rdt\end{eqnarray*}</script><p>Therefore,</p><script type="math/tex; mode=display">\Delta \Pi = r \Pi \Delta t</script><p>On the other hand, the change of its value is:</p><script type="math/tex; mode=display">\Delta \Pi = - \Delta f + \frac{\partial f}{\partial S} \Delta S</script><p>Then we can get an equation, </p><script type="math/tex; mode=display">r \Pi \Delta t =- \Delta f + \frac{\partial f}{\partial S} \Delta S</script><p>with substituting for $\Delta f$, $\Delta S$ and $\Pi$</p><script type="math/tex; mode=display">\begin{eqnarray*}r\Delta t (-f + \frac{\partial f}{\partial S} S) = &-&(\frac{\partial f}{\partial t} + \frac{\partial f}{\partial S}\mu S + \frac{1}{2}\frac{\partial^2 f}{\partial S^2}\sigma^2 S^2) \Delta t + \frac{\partial f}{\partial S}\sigma S \Delta W_t \\&+&  \frac{\partial f}{\partial S}(\mu S \Delta t + \sigma S \Delta W_t)\end{eqnarray*}</script><p>After simplifying the equation, we get the famous differential equation</p><script type="math/tex; mode=display">\frac{\partial f}{\partial t} + rS\frac{\partial f}{\partial S}+\frac{1}{2}\sigma^2S^2\frac{\partial^2 f}{\partial S^2} = rf</script><p>We need to find a $f$ which satisfies the above equation.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The Episode 4&lt;/p&gt;
&lt;p&gt;Assumptions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The short-term interest rate is known and is constant through time. (The interest term 
      
    
    </summary>
    
      <category term="Economics" scheme="http://yoursite.com/categories/Economics/"/>
    
      <category term="Finance" scheme="http://yoursite.com/categories/Economics/Finance/"/>
    
      <category term="Financial Engineering" scheme="http://yoursite.com/categories/Economics/Finance/Financial-Engineering/"/>
    
    
      <category term="Finance" scheme="http://yoursite.com/tags/Finance/"/>
    
      <category term="Asset Pricing" scheme="http://yoursite.com/tags/Asset-Pricing/"/>
    
  </entry>
  
  <entry>
    <title>C++ Class</title>
    <link href="http://yoursite.com/2019/10/04/C++%20Pointer/"/>
    <id>http://yoursite.com/2019/10/04/C++ Pointer/</id>
    <published>2019-10-04T04:00:00.000Z</published>
    <updated>2020-01-26T16:14:43.641Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define without initialized</span></span><br><span class="line"><span class="keyword">int</span> *p</span><br><span class="line"></span><br><span class="line"><span class="comment">// define</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>; <span class="keyword">int</span> *p = &amp;n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a a[<span class="number">8</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;; <span class="keyword">int</span> * p = a;</span><br></pre></td></tr></table></figure><p>p as a pointer will point to the first element of array a</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Pointer Assignment </span><br><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>; <span class="keyword">int</span> *p = &amp;n, *q; q = p;</span><br></pre></td></tr></table></figure><p>“&amp;”: get the address</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> m, n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> *q = &amp; n;</span><br><span class="line">m = *q;</span><br></pre></td></tr></table></figure><ul><li>Swap 2 integers</li></ul><p>example 1: swap 2 integers by changing integer values</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//exchange m and n, without changing the pointer p and q    </span></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">10</span>， n = <span class="number">20</span>； t;</span><br><span class="line"><span class="keyword">int</span> *p = &amp;m;</span><br><span class="line"><span class="keyword">int</span> *q = &amp;n;</span><br><span class="line"></span><br><span class="line">t = *p;</span><br><span class="line">*p = *q;</span><br><span class="line">*q = t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>example 2: swap 2 integers by changing pointer</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m =<span class="number">10</span>, n = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> *p = &amp;m, *q = &amp;n, *t;</span><br><span class="line">    </span><br><span class="line">    t = p;</span><br><span class="line">p = q;</span><br><span class="line">q = t;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>example 3: swap 3 integers by function</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">10</span>, n = <span class="number">20</span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> NDEBUG</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"main (before swapped): m = "</span> &lt;&lt; m &lt;&lt; <span class="string">"; n = "</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    Swap(&amp;m, &amp;n);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> NDEBUG</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"main (after swapped): m = "</span> &lt;&lt; m &lt;&lt; <span class="string">"; n = "</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span>    </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">if</span> (! x || !y)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Constant-Pointer"><a href="#Constant-Pointer" class="headerlink" title="Constant Pointer"></a>Constant Pointer</h2><ul><li>Constant Pointer</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>; <span class="keyword">const</span> <span class="keyword">int</span> *p = &amp;n;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintObject</span><span class="params">( <span class="keyword">const</span> <span class="keyword">int</span> *p)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>Pointer pointing to a constant</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>; <span class="keyword">int</span> * <span class="keyword">const</span> p = &amp;n;</span><br></pre></td></tr></table></figure><ul><li>Constant pointer pointing to a constant</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">10</span>; <span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p = &amp;n;</span><br></pre></td></tr></table></figure><h2 id="pointer-and-return-value"><a href="#pointer-and-return-value" class="headerlink" title="pointer and return value"></a>pointer and return value</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> global = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">ReturnPointer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;global;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pointer-and-complicated-data-type"><a href="#Pointer-and-complicated-data-type" class="headerlink" title="Pointer and complicated data type"></a>Pointer and complicated data type</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">8</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> *p; p =&amp;a[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *p; p = a</span><br><span class="line"><span class="keyword">int</span> *q; q = &amp;a[<span class="number">2</span>]; <span class="comment">// q point to a[2]</span></span><br></pre></td></tr></table></figure><h3 id="pointer-operation"><a href="#pointer-operation" class="headerlink" title="pointer operation"></a>pointer operation</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">*p = a</span><br><span class="line">p+<span class="number">2</span></span><br><span class="line">*p = a[<span class="number">3</span>]; p<span class="number">-2</span></span><br><span class="line">q = p+<span class="number">2</span></span><br><span class="line">p++</span><br><span class="line">--p</span><br><span class="line">*p = a[<span class="number">0</span>]; *q = a[<span class="number">2</span>]; q-p = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">p == q</span><br><span class="line">p = <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">if</span>(p != <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">if</span>(p)</span><br></pre></td></tr></table></figure><h2 id="pointer-and-array"><a href="#pointer-and-array" class="headerlink" title="pointer and array"></a>pointer and array</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Definition</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GenerateIntegers</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">unsigned</span> <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">    Randomize();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        a[i] = GenerateRandomNumber(Lower, Upper);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Call</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM_OF_ELEMENTS 8</span></span><br><span class="line"><span class="keyword">int</span> a[NUM_OF_ELEMENTS];</span><br><span class="line">GenerateIntegers(a, NUM_OF_ELEMENTS);</span><br></pre></td></tr></table></figure><p>Pointers as parameter</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Definition</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GenerateIntegers</span><span class="params">(<span class="keyword">int</span> *p, <span class="keyword">unsigned</span> <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">    Randomize();</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        *p++ = GenerateRandomNumber(Lower, Upper);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Call</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM_OF_ELEMENTS 8</span></span><br><span class="line"><span class="keyword">int</span> a[NUM_OF_ELEMENTS];</span><br><span class="line">GenerateIntegers(a, NUM_OF_ELEMENTS);</span><br></pre></td></tr></table></figure><p>example:</p><h3 id="Similarity-of-pointer-and-array"><a href="#Similarity-of-pointer-and-array" class="headerlink" title="Similarity of pointer and array"></a>Similarity of pointer and array</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;; <span class="keyword">int</span> *p = &amp;a; <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i  = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (i  = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(a+i) &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><ul><li>multidimensional array </li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintTwoDimensinalArray</span><span class="params">( <span class="keyword">int</span> a[<span class="number">8</span>][<span class="number">8</span>], <span class="keyword">unsigned</span> <span class="keyword">int</span> m, <span class="keyword">unsigned</span> <span class="keyword">int</span> n )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintTwoDimensinalArray</span><span class="params">( <span class="keyword">int</span> a[][], <span class="keyword">unsigned</span> <span class="keyword">int</span> m, <span class="keyword">unsigned</span> <span class="keyword">int</span> n )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintTwoDimensinalArray</span><span class="params">( <span class="keyword">int</span> * a, <span class="keyword">unsigned</span> <span class="keyword">int</span> m, <span class="keyword">unsigned</span> <span class="keyword">int</span> n )</span></span>;</span><br><span class="line"><span class="comment">// a + n * i + j</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintTwoDimensinalArray</span><span class="params">(<span class="keyword">int</span> * a, <span class="keyword">unsigned</span> <span class="keyword">int</span> m, <span class="keyword">unsigned</span> <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; m; i++ )</span><br><span class="line"><span class="keyword">for</span>( j = <span class="number">0</span>; j &lt; n; j++ )</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(a + n * i + j) &lt;&lt; <span class="string">"; "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123; &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;, &#123; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> &#125; &#125;;</span><br><span class="line">PrintTwoDimensinalArray( a, <span class="number">2</span>, <span class="number">3</span> );</span><br></pre></td></tr></table></figure><h2 id="pointer-and-structure"><a href="#pointer-and-structure" class="headerlink" title="pointer and structure"></a>pointer and structure</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">STUDENT</span>&#123;</span> <span class="keyword">int</span> id; STRING name; <span class="keyword">int</span> age; &#125;;</span><br><span class="line">STUDENT student = &#123; <span class="number">2007010367</span>, <span class="string">"Name"</span>, <span class="number">19</span> &#125;;</span><br><span class="line">STUDENT * pstudent = &amp;student;</span><br><span class="line"></span><br><span class="line">(*pstudent).id = <span class="number">2007010367</span>;</span><br><span class="line">(*pstudent).name = DuplicateString( <span class="string">"Name"</span> );</span><br><span class="line">(*pstudent).age = <span class="number">19</span>;</span><br><span class="line"></span><br><span class="line">pstudent-&gt;id = <span class="number">2007010367</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ARRAY</span>&#123;</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> count; <span class="keyword">int</span> * elements; &#125;;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">8</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> &#125;;</span><br><span class="line">ARRAY <span class="built_in">array</span> = &#123; <span class="number">8</span>, &amp;a &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//访问 elements 的第 i 个元素: array.elements[i]</span></span><br><span class="line"><span class="comment">//若有定义:ARRAY * parray = &amp;array;</span></span><br><span class="line"><span class="comment">//访问 parray 指向的结构体对象 elements 的第 i 个元素:</span></span><br><span class="line">(*parray).elements[i]</span><br><span class="line">parray-&gt;elements[i]</span><br></pre></td></tr></table></figure><ul><li>dynamic array</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ARRAY</span> &#123;</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> count; <span class="keyword">int</span> *</span><br><span class="line">elements; &#125;;</span><br></pre></td></tr></table></figure><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="String-array"><a href="#String-array" class="headerlink" title="String array"></a>String array</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> s[<span class="number">8</span>] = &#123; <span class="string">'C'</span>, <span class="string">'P'</span>, <span class="string">'P'</span>, <span class="string">'-'</span>, <span class="string">'P'</span>, <span class="string">'r'</span>, <span class="string">'o'</span>, <span class="string">'g'</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> t[<span class="number">5</span>] = &#123; <span class="string">'H'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span> &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add '\0' at the end of string array</span></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">9</span>] = &#123; <span class="string">'C'</span>, <span class="string">'P'</span>, <span class="string">'P'</span>, <span class="string">'-'</span>, <span class="string">'P'</span>, <span class="string">'r'</span>, <span class="string">'o'</span>, <span class="string">'g'</span>, <span class="string">'\0'</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> t[<span class="number">6</span>] = &#123; <span class="string">'H'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>, <span class="string">'\0'</span> &#125;;</span><br></pre></td></tr></table></figure><p>example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">FindCharFirst</span><span class="params">( <span class="keyword">char</span> c, <span class="keyword">char</span> s[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>( !s )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"FindCharFirst: Illegal string.\n"</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">for</span>( i = <span class="number">0</span>; s[i] != <span class="string">'\0'</span>; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( s[i] == c )</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inexistent_index; <span class="comment">// 0xFFFFFFFF</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">FindCharFirst</span><span class="params">( <span class="keyword">char</span> c, <span class="keyword">char</span> * s )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> * t;</span><br><span class="line">    <span class="keyword">if</span>( !s )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"FindCharFirst: Illegal string.\n"</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">for</span>( t = s; *t != <span class="string">'\0'</span>; t++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( *t == c )</span><br><span class="line">        <span class="keyword">return</span> t - s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inexistent_index; <span class="comment">// 0xFFFFFFFF</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="abstract-string"><a href="#abstract-string" class="headerlink" title="abstract string"></a>abstract string</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> * STRING;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keyword">char</span> * CSTRING;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">FindCharFirst</span><span class="params">( <span class="keyword">char</span> c, <span class="keyword">char</span> s[] )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">FindCharFirst</span><span class="params">( <span class="keyword">char</span> c, <span class="keyword">char</span>* s )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">FindCharFirst</span><span class="params">( <span class="keyword">char</span> c, STRING s )</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> s[<span class="number">9</span>] = &#123; <span class="string">'C'</span>, <span class="string">'P'</span>, <span class="string">'P'</span>, <span class="string">'-'</span>, <span class="string">'P'</span>, <span class="string">'r'</span>, <span class="string">'o'</span>, <span class="string">'g'</span>, <span class="string">'\0'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * s = <span class="string">"CPP-Prog"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * s; s = <span class="string">"CPP-Prog"</span>; <span class="comment">//correct</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">9</span>]; s = <span class="string">"CPP-Prog"</span>; <span class="comment">//wrong</span></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">9</span>] = <span class="string">"CPP-Prog"</span> <span class="comment">//correct</span></span><br></pre></td></tr></table></figure><p>example</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">STRING <span class="title">TransformCharIntoString</span><span class="params">( <span class="keyword">char</span> c )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STRING _s = (STRING)<span class="built_in">malloc</span>( <span class="number">2</span> );</span><br><span class="line">    _s[<span class="number">0</span>] = c;</span><br><span class="line">    _s[<span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">return</span> _s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//wrong</span></span><br><span class="line"><span class="function">STRING <span class="title">TransformCharIntoString</span><span class="params">( <span class="keyword">char</span> c )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> _s[<span class="number">2</span>];</span><br><span class="line">    _s[<span class="number">0</span>] = c;</span><br><span class="line">_s[<span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line"><span class="keyword">return</span> _s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="standard-string-library"><a href="#standard-string-library" class="headerlink" title="standard string library"></a>standard string library</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">strcat</span><span class="params">( <span class="keyword">char</span> * dest, <span class="keyword">const</span> <span class="keyword">char</span> * src )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strcmp</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> * s1, <span class="keyword">const</span> <span class="keyword">char</span> * s2 )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">strcpy</span><span class="params">( <span class="keyword">char</span> * dest, <span class="keyword">const</span> <span class="keyword">char</span> * src )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strlen</span><span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> * s )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">strtok</span><span class="params">( <span class="keyword">char</span> * token, <span class="keyword">const</span> <span class="keyword">char</span> * delimiters )</span></span>;</span><br></pre></td></tr></table></figure><h1 id="String-Class"><a href="#String-Class" class="headerlink" title="String Class"></a>String Class</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s = <span class="string">"abcdefg"</span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">( <span class="string">"abcdefg"</span> )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s; </span><br><span class="line">getline( <span class="built_in">cin</span>, s, <span class="string">'\n'</span> );</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s = <span class="string">"abcdefg"</span>;</span><br><span class="line"><span class="keyword">int</span> a = s.length();</span><br><span class="line">s.resize(<span class="number">32</span>); <span class="comment">// 将s设为32字符长,多余舍弃,不足空闲</span></span><br><span class="line">s.resize(<span class="number">32</span>, <span class="string">'='</span>); <span class="comment">// 多余舍弃,不足补‘=’</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s1 = <span class="string">"abcd"</span>, s2 = <span class="string">"efg"</span>;</span><br><span class="line">s1.append( s2 ); <span class="comment">// 将字符串s2追加到s1尾部</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s1 = <span class="string">"abcdefg"</span>, s2 = <span class="string">"abcdxyz"</span>;</span><br><span class="line"><span class="keyword">int</span> a = s1.compare( s2, <span class="number">0</span> ); <span class="comment">// 从0号位字符开始比较</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s1 = <span class="string">"abcdefg"</span>, s2 = <span class="string">"bcd"</span>;</span><br><span class="line"><span class="keyword">int</span> a = s1.find( s2, <span class="number">0</span> );</span><br></pre></td></tr></table></figure><h1 id="Dynamic-Storage-Allocation"><a href="#Dynamic-Storage-Allocation" class="headerlink" title="Dynamic Storage Allocation"></a>Dynamic Storage Allocation</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmalloc&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">malloc</span><span class="params">( <span class="keyword">unsigned</span> <span class="keyword">int</span> size )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">( <span class="keyword">void</span> * memblock )</span></span>;</span><br></pre></td></tr></table></figure><h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> * p;</span><br><span class="line">p = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">11</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">DuplicateString</span><span class="params">( <span class="keyword">char</span> * s )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> * t;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span>( !s )</span><br><span class="line">    &#123; </span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"DuplicateString: Parameter Illegal."</span>; </span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    n = <span class="built_in">strlen</span>( s );</span><br><span class="line">    t = ( <span class="keyword">char</span> * )<span class="built_in">malloc</span>( n + <span class="number">1</span> );</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; n; i++ )</span><br><span class="line">    t[i] = s[i];</span><br><span class="line">    t[n] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> * p;</span><br><span class="line">p = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">11</span>);</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> * p = ( <span class="keyword">int</span> * )<span class="built_in">malloc</span>( <span class="number">10</span> * <span class="keyword">sizeof</span>( <span class="keyword">int</span> ) );</span><br><span class="line"><span class="built_in">free</span>( p );</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>( p ); p = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * p; p = <span class="keyword">new</span> <span class="keyword">int</span>; *p = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> * p; p = <span class="keyword">new</span>( <span class="keyword">int</span> ); *p = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> * p; p = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>); <span class="comment">// 将 *p 初始化为 10</span></span><br><span class="line"><span class="keyword">int</span> * p; p = <span class="keyword">new</span>(<span class="keyword">int</span>)(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> * p; p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>]; <span class="comment">// 分配 8 个元素的整数数组</span></span><br></pre></td></tr></table></figure><h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * p; p = <span class="keyword">new</span> <span class="keyword">int</span>; *p = <span class="number">10</span>; <span class="keyword">delete</span> p;</span><br><span class="line"><span class="keyword">int</span> * p; p = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>]; <span class="keyword">delete</span>[] p;</span><br><span class="line"><span class="comment">// not delete p[ ]!</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p, *q;</span><br><span class="line">q = ( <span class="keyword">int</span>* )<span class="built_in">malloc</span>( <span class="keyword">sizeof</span>(<span class="keyword">int</span>) );</span><br><span class="line">p = q;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>( p ); </span><br><span class="line">p = <span class="literal">NULL</span>; <span class="comment">// q is dangling pointer</span></span><br></pre></td></tr></table></figure><h2 id="storage-leak"><a href="#storage-leak" class="headerlink" title="storage leak"></a>storage leak</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">int</span> * p = <span class="keyword">new</span> <span class="keyword">int</span>; </span><br><span class="line">    *p = <span class="number">10</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a; <span class="keyword">int</span> &amp; ref = a;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> &amp; ref = a;</span><br><span class="line">    a = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a: "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>; <span class="built_in">cout</span> &lt;&lt; <span class="string">"ref: "</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    ref = <span class="number">8</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a: "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>; <span class="built_in">cout</span> &lt;&lt; <span class="string">"ref: "</span> &lt;&lt; ref &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="call-by-reference"><a href="#call-by-reference" class="headerlink" title="call by reference"></a>call by reference</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">( <span class="keyword">int</span> &amp; x, <span class="keyword">int</span> &amp; y )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t; t = x; x = y; y = t; <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>; </span><br><span class="line">    Swap( a, b ); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="constant-reference"><a href="#constant-reference" class="headerlink" title="constant reference"></a>constant reference</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> &amp; <span class="title">Inc</span><span class="params">( <span class="keyword">int</span> &amp; dest, <span class="keyword">const</span> <span class="keyword">int</span> &amp; alpha )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> &amp; <span class="title">Inc</span><span class="params">( <span class="keyword">int</span> &amp; dest, <span class="keyword">const</span> <span class="keyword">int</span> &amp; alpha )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dest += alpha; </span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>, c; </span><br><span class="line">    Inc( a, b ); </span><br><span class="line">    c = Inc(a, b)++; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Function-Pointer"><a href="#Function-Pointer" class="headerlink" title="Function Pointer"></a>Function Pointer</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> * ADT; <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keyword">void</span> * CADT;</span><br></pre></td></tr></table></figure><p>data type ()()</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> * ( * as_string )( ADT object );</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">DoTransformObjectIntoString</span><span class="params">( ADT object )</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> PtTransformIntoString( (PPOINT)object ); &#125;</span><br><span class="line">as_string = DoTransformObjectIntoString;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> * returned_value;</span><br><span class="line">PPOINT pt = PtCreate( <span class="number">10</span>, <span class="number">20</span> );</span><br><span class="line">as_string = DoTransformObjectIntoString;</span><br><span class="line">returned_value = as_string( (ADT)pt );</span><br></pre></td></tr></table></figure><p>example: qsort</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">qsort</span><span class="params">( <span class="keyword">void</span> * base, <span class="keyword">unsigned</span> <span class="keyword">int</span> number_of_elements,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">unsigned</span> <span class="keyword">int</span> size_of_elements,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> ( * compare )( <span class="keyword">const</span> <span class="keyword">void</span> *, <span class="keyword">const</span> <span class="keyword">void</span> * ) )</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"arrmanip.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUMBER_OF_ELEMENTS 8</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DoCompareObject</span><span class="params">( <span class="keyword">const</span> <span class="keyword">void</span> * e1, <span class="keyword">const</span> <span class="keyword">void</span> * e2 )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[NUMBER_OF_ELEMENTS];</span><br><span class="line">    GenerateIntegers( a, NUMBER_OF_ELEMENTS );</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Array generated at random as follows: \n"</span>;</span><br><span class="line">    PrintIntegers( a, NUMBER_OF_ELEMENTS );</span><br><span class="line">    qsort( a, NUMBER_OF_ELEMENTS, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), DoCompareObject );</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"After sorted: \n"</span>;</span><br><span class="line">    PrintIntegers( a, NUMBER_OF_ELEMENTS );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DoCompareObject</span><span class="params">( <span class="keyword">const</span> <span class="keyword">void</span> * e1, <span class="keyword">const</span> <span class="keyword">void</span> * e2 )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> CompareInteger( *(<span class="keyword">const</span> <span class="keyword">int</span> *)e1, *(<span class="keyword">const</span> <span class="keyword">int</span> *)e2 );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="Computer Science" scheme="http://yoursite.com/categories/Computer-Science/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Computer-Science/Programming/"/>
    
      <category term="C++" scheme="http://yoursite.com/categories/Computer-Science/Programming/C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="MOOC" scheme="http://yoursite.com/tags/MOOC/"/>
    
  </entry>
  
  <entry>
    <title>Python NumPy Basics</title>
    <link href="http://yoursite.com/2019/08/05/Python%20NumPy%20Basics/"/>
    <id>http://yoursite.com/2019/08/05/Python NumPy Basics/</id>
    <published>2019-08-05T04:00:00.000Z</published>
    <updated>2019-08-07T16:56:27.214Z</updated>
    
    <content type="html"><![CDATA[<p>This is a class note of NYU MFE Bootcamp, including contains basic knowledge of Python NumPy syntax and techniques. Understanding Data Types in Python to part of Operations of NumPy arrays was on Aug 5th; The rest was on Aug 6th.</p><h1 id="Understanding-Data-Types-in-Python"><a href="#Understanding-Data-Types-in-Python" class="headerlink" title="Understanding Data Types in Python"></a>Understanding Data Types in Python</h1><h2 id="Statically-typing-amp-Dynamic-typing"><a href="#Statically-typing-amp-Dynamic-typing" class="headerlink" title="Statically-typing &amp; Dynamic typing"></a>Statically-typing &amp; Dynamic typing</h2><p>A statically-typed language like C or Java requires each variable to be explicitly declared, while Python skips this specification.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">result = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    result += i</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>This means we can assign any kind of data to any variable.</p><h2 id="Behind-the-python-flexibility"><a href="#Behind-the-python-flexibility" class="headerlink" title="Behind the python: flexibility"></a>Behind the python: flexibility</h2><p>The standard Python implementation is written in C, which means every Python object is simply a cleverly-disguised C structure, not only its value, but other information as well.</p><h3 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h3><p>A single integer in Python 3.4 contains four pieces.</p><ul><li><code>ob_refcnt</code></li><li><code>ob_type</code></li><li><code>ob_size</code></li><li><code>ob_digit</code></li></ul><p>A python integer is a pointer to a position in memory containing all the Python object information, including the bytes that contain the integer value.</p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>List is almost the most flexibility type in Python.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = list(range(<span class="number">10</span>))</span><br><span class="line">L</span><br><span class="line">type(L[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]int</code></pre><p><strong>Change it to a list of strings:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L2 = [str(c) <span class="keyword">for</span> c <span class="keyword">in</span> L]</span><br><span class="line">L2</span><br><span class="line">type(L2[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>[&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;]str</code></pre><p>Or we can create heterogeneous lists:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L3 = [<span class="keyword">True</span>, <span class="string">"2"</span>, <span class="number">3.0</span>, <span class="number">4</span>]</span><br><span class="line">[type(item) <span class="keyword">for</span> item <span class="keyword">in</span> L3]</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>[bool, str, float, int]</code></pre><p>Flexibility comes with a cost (<strong>loss of storage and efficiency</strong>). In the special case that all variables are of the same type, much of this flexibility is redundant. Then comes with fixed-type NumPy-style array.</p><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p>The built in array module can be used to create dense arrays of a uniform type:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> array</span><br><span class="line">L = list(range(<span class="number">10</span>))</span><br><span class="line">A = array.array(<span class="string">'i'</span>, L)</span><br><span class="line">A</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array(&#39;i&#39;, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre><p>However, the NumPy Array is more efficient than array because of the operations on data.</p><h1 id="Overlook-of-NumPy-arrays"><a href="#Overlook-of-NumPy-arrays" class="headerlink" title="Overlook of NumPy arrays"></a>Overlook of NumPy arrays</h1><h2 id="Basic-NumPy-array-syntax"><a href="#Basic-NumPy-array-syntax" class="headerlink" title="Basic NumPy array syntax:"></a>Basic NumPy array syntax:</h2><p><strong>basic syntax:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.array([<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([1, 4, 2, 5, 3])</code></pre><p><strong>The type of elements in array should, but does not have to, be the same.  If the types do not match, Numpy will upcast if possible.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.array([<span class="number">3.14</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([3.14, 4.  , 2.  , 3.  ])</code></pre><p>Here, integers are up-cast to floating point. <strong>And we can use dtype keyword to set the data type:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], dtype=<span class="string">'float32'</span>)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([1., 2., 3., 4.], dtype=float32)</code></pre><h2 id="NumPy-array-as-matrix"><a href="#NumPy-array-as-matrix" class="headerlink" title="NumPy array as matrix"></a>NumPy array as matrix</h2><p><strong>Numpy arrays can explicity be muti-dimensional, using a list of lists:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nested lists result in multi-dimensional arrays</span></span><br><span class="line">np.array([range(i, i+<span class="number">3</span>) <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]])</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[2, 3, 4],       [4, 5, 6],       [6, 7, 8]])</code></pre><p>for better understanding, we can run a 2*2 array:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.array([range(i, i+<span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">2</span>, <span class="number">4</span>]])</span><br></pre></td></tr></table></figure><p>output</p><pre><code>array([[2, 3],       [4, 5]])</code></pre><p>or a 3*10 array:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.array([range(i, i+<span class="number">10</span>) <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]])</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11],       [ 4,  5,  6,  7,  8,  9, 10, 11, 12, 13],       [ 6,  7,  8,  9, 10, 11, 12, 13, 14, 15]])</code></pre><p><strong>It is more efficient to create arrays from scratch using routines built into Numpy:</strong></p><p><strong>zero array</strong> with 10 integer:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.zeros(<span class="number">10</span>, dtype=int)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])</code></pre><p><strong>one array:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.ones((<span class="number">3</span>,<span class="number">5</span>), dtype=float)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[1., 1., 1., 1., 1.],       [1., 1., 1., 1., 1.],       [1., 1., 1., 1., 1.]])</code></pre><p><strong>An array with some identical elements:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.full((<span class="number">3</span>, <span class="number">5</span>), <span class="number">3.14</span>)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[3.14, 3.14, 3.14, 3.14, 3.14],       [3.14, 3.14, 3.14, 3.14, 3.14],       [3.14, 3.14, 3.14, 3.14, 3.14]])</code></pre><p><strong>A linear sequence</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create an array filled with a linear sequence</span></span><br><span class="line"><span class="comment"># starting at 0, this is similar to the built-in range() function</span></span><br><span class="line">np.arange(<span class="number">0</span>, <span class="number">20</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])</code></pre><p><strong>linspace</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create an array of five values evenly spaced</span></span><br><span class="line"><span class="comment"># between 0 and 1</span></span><br><span class="line">np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([0.  , 0.25, 0.5 , 0.75, 1.  ])</code></pre><p><strong>uniformly distributed random value</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create a 3*e arrayof uniformly distributed random values between 0 and 1</span></span><br><span class="line">np.random.random((<span class="number">3</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[0.57226098, 0.56849713, 0.63410602],       [0.88335333, 0.46056684, 0.95494879],       [0.22305721, 0.18478839, 0.78352821]])</code></pre><p><strong>normal distributed random value</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.normal(<span class="number">0</span>, <span class="number">1</span>, (<span class="number">3</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[ 1.05100904,  1.71407429,  0.75356105],       [-0.61885082,  0.43198626,  0.63819954],       [-0.53911965,  1.07533192, -0.27227068]])</code></pre><p><strong>random value</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create a 3*3 array of random integers in the interval [0, 10]</span></span><br><span class="line">np.random.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">3</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[0, 7, 1],       [2, 7, 6],       [7, 8, 5]])</code></pre><p><strong>create identity matrix</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create a 3*3 identity matrix</span></span><br><span class="line">np.eye(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[1., 0., 0.],       [0., 1., 0.],       [0., 0., 1.]])</code></pre><p><strong>uninitialized array</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create an uninitialized array of three integers</span></span><br><span class="line"><span class="comment"># the values will be whatever happens to </span></span><br><span class="line"><span class="comment"># already exist at that memory location</span></span><br><span class="line">np.empty(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([1., 1., 1.])</code></pre><p><strong>Standard Data Types</strong></p><p>numpy is also built in C, the data type  can be specified using a string:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">np.zeros(<span class="number">10</span>, dtype = <span class="string">'int16'</span>)</span><br><span class="line">np.zeros(<span class="number">10</span>, dtype = np.int16) <span class="comment">#same</span></span><br></pre></td></tr></table></figure><p>output</p><pre><code>array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int16)</code></pre><h1 id="Operations-of-NumPy-arrays"><a href="#Operations-of-NumPy-arrays" class="headerlink" title="Operations of NumPy arrays"></a>Operations of NumPy arrays</h1><ul><li>attributes of arrays</li><li>indexing of arrays</li><li>slicing of arrays</li><li>reshaping of arrays</li><li>joining and splitting of arrays</li></ul><h2 id="Attributes-of-arrays"><a href="#Attributes-of-arrays" class="headerlink" title="Attributes of arrays"></a>Attributes of arrays</h2><p><strong>determining the size, shape, memory consumption, and data types of arrays</strong></p><p>We can use random number generator, which we will seed with a set value in order to ensure that the same random arrays are generated each time this code is run:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">0</span>)<span class="comment"># seed for reproducibility</span></span><br><span class="line">x1 = np.random.randint(<span class="number">10</span>, size=<span class="number">6</span>)</span><br><span class="line">x2 = np.random.randint(<span class="number">10</span>, size=(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">x3 = np.random.randint(<span class="number">10</span>, size=(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">print(x1)</span><br><span class="line">print(x2)</span><br><span class="line">print(x3)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>[5 0 3 3 7 9][[3 5 2 4] [7 6 8 8] [1 6 7 7]]([[[8, 1, 5, 9, 8],[9, 4, 3, 0, 3],[5, 0, 2, 3, 8],[1, 3, 3, 3, 7]],[[0, 1, 9, 9, 0],[4, 7, 3, 2, 7],[2, 0, 0, 4, 5],[5, 6, 8, 4, 1]],[[4, 9, 8, 1, 1],[7, 9, 9, 3, 6],[7, 2, 0, 3, 5],[9, 4, 4, 6, 4]]])</code></pre><p><strong>each array has attributes ndim, shape and size:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"x3 ndim: "</span>, x3.ndim)</span><br><span class="line">print(<span class="string">"x3 shape: "</span>, x3.shape)</span><br><span class="line">print(<span class="string">"x3 size: "</span>, x3.size)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>x3 ndim:  3x3 shape:  (3, 4, 5)x3 size:  60</code></pre><p><strong>we can check the type of x3</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"dtype:"</span>, x3.dtype)</span><br></pre></td></tr></table></figure><pre><code>dtype: int32</code></pre><p><strong><code>itemsize</code> is another attribute, which list the size in bytes of each array element, and <code>nbytes</code> list the total size of the array:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"itemsize: "</span>, x3.itemsize, <span class="string">"bytes"</span>)</span><br></pre></td></tr></table></figure><pre><code>itemsize:  4</code></pre><p>In general, we expect that <strong>nbytes is equal to itemsize times size</strong>.</p><h2 id="Array-Indexing"><a href="#Array-Indexing" class="headerlink" title="Array Indexing"></a>Array Indexing</h2><p><strong>Getting and setting the value of individual array elements</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(x1[<span class="number">0</span>])</span><br><span class="line">print(x1[<span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>57</code></pre><p><strong>use negative indices:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(x1[<span class="number">-1</span>])</span><br><span class="line">print(x1[<span class="number">-2</span>])</span><br></pre></td></tr></table></figure><p>ouptut:</p><pre><code>97</code></pre><p><strong>items can be accessed using a comma-separated tuple of indices:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(x2)</span><br><span class="line">print(x2[<span class="number">2</span>, <span class="number">0</span>])</span><br><span class="line">print(x2[<span class="number">2</span>, <span class="number">-1</span>])</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>[[3 5 2 4] [7 6 8 8] [1 6 7 7]]17</code></pre><p><strong>Values can be modified using any of the above index notation:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(x2)</span><br><span class="line">x2[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">12</span></span><br><span class="line">print(x2)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>[[3 5 2 4] [7 6 8 8] [1 6 7 7]][[12  5  2  4] [ 7  6  8  8] [ 1  6  7  7]]</code></pre><p>Numpy arrays have a fixed type. The different type will be <strong>silently truncated automatically</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x1[<span class="number">0</span>] = <span class="number">3.14159</span> <span class="comment"># this will be truncated!</span></span><br><span class="line">x1</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([3, 0, 3, 3, 7, 9])</code></pre><h2 id="Array-Slicing"><a href="#Array-Slicing" class="headerlink" title="Array Slicing"></a>Array Slicing</h2><p><strong>Getting and setting smaller subarrays within a larger array</strong></p><p>The standard Python list slicing is:</p><p>​    <code>x[start:stop:step]</code></p><p>The default to the values start = 0, stop = size of dimension, step = 1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">10</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</code></pre><h3 id="One-dimension"><a href="#One-dimension" class="headerlink" title="One-dimension"></a>One-dimension</h3><p><strong>This is operation of one-dimensional subarrays</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x[:<span class="number">5</span>] <span class="comment"># first five elements</span></span><br><span class="line">x[<span class="number">5</span>:]</span><br><span class="line">x[<span class="number">4</span>:<span class="number">7</span>] <span class="comment"># middle sub-array</span></span><br><span class="line">x[::<span class="number">2</span>] <span class="comment"># every other element</span></span><br><span class="line">x[<span class="number">1</span>::<span class="number">2</span>] <span class="comment"># every other element, starting at index1</span></span><br><span class="line">x[::<span class="number">-1</span>] <span class="comment"># reversed</span></span><br><span class="line">x[<span class="number">5</span>::<span class="number">-2</span>] <span class="comment"># reversed every other from index 5</span></span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([0, 1, 2, 3, 4])array([5, 6, 7, 8, 9])array([4, 5, 6])array([0, 2, 4, 6, 8])array([1, 3, 5, 7, 9])array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])array([5, 3, 1])</code></pre><h3 id="Multi-dimension"><a href="#Multi-dimension" class="headerlink" title="Multi-dimension"></a>Multi-dimension</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x2</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[12,  5,  2,  4],       [ 7,  6,  8,  8],       [ 1,  6,  7,  7]])</code></pre><p><strong>Some operations of multi-dimensional subarrays</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x2[:<span class="number">2</span>, :<span class="number">3</span>] <span class="comment"># first two rows, three columns</span></span><br><span class="line">x2[:<span class="number">3</span>, ::<span class="number">2</span>] <span class="comment">#all rows, every other column</span></span><br><span class="line">x2[::<span class="number">-1</span>, ::<span class="number">-1</span>] <span class="comment"># subarray dimensions can even be reversed together</span></span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[12,  5,  2],       [ 7,  6,  8]])array([[12,  2],       [ 7,  8],       [ 1,  7]])array([[ 7,  7,  6,  1],       [ 8,  8,  6,  7],       [ 4,  2,  5, 12]])</code></pre><p><strong>Accessing of single rows or columns of an array can be done by combining indexing and slicing, using an empty slice marked by a single colon (:):</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(x2[:,<span class="number">0</span>]) <span class="comment">#first column of x2</span></span><br><span class="line">print(x2[<span class="number">0</span>,:]) <span class="comment">#first row of x2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># In the case of row access, the empty slice can be omitted for a more compact syntax</span></span><br><span class="line"></span><br><span class="line">print(x2[<span class="number">0</span>]) <span class="comment">#equivalent</span></span><br></pre></td></tr></table></figure><p>output:</p><pre><code>[12  7  1][12  5  2  4][12  5  2  4]</code></pre><h3 id="Copy-amp-No-Copy-Subarrays"><a href="#Copy-amp-No-Copy-Subarrays" class="headerlink" title="Copy &amp; No-Copy Subarrays"></a>Copy &amp; No-Copy Subarrays</h3><p><strong>NumPy array slice return views rather than copies of the array data. However, Python list slicing will be copies.</strong></p><ul><li><p>Changed Example</p><p>Extract a 2*2 subarray from this:</p></li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x2_sub = x2[:<span class="number">2</span>, :<span class="number">2</span>]</span><br><span class="line">print(x2_sub)</span><br></pre></td></tr></table></figure><pre><code>  [[12  5]   [ 7  6]]</code></pre><p>  <strong>The original array is changed:</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x2_sub[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">99</span></span><br><span class="line">print(x2_sub)</span><br><span class="line">print(x2)</span><br></pre></td></tr></table></figure><p>  output:</p><pre><code>  [[99  5]   [ 7  6]]  [[99  5  2  4]   [ 7  6  8  8]   [ 1  6  7  7]]</code></pre><p>  it is a useful property, we can access and process pieces of these datasets without the need to copy the underlying data buffer.</p><ul><li><p>Unchanged Example</p><p>we can also create a explicitly copy the data within an array or a subarray.</p></li></ul>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x2_sub_copy = x2[:<span class="number">2</span>,:<span class="number">2</span>].copy()</span><br><span class="line">print(x2_sub_copy)</span><br><span class="line">print(x2)</span><br></pre></td></tr></table></figure><p>  output:</p><pre><code>  [[99  5]   [ 7  6]]  [[99  5  2  4]   [ 7  6  8  8]   [ 1  6  7  7]]</code></pre><p>  If we modify this subarray, <strong>the original array is not touched:</strong></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x2_sub_copy[<span class="number">0</span>,<span class="number">0</span>] = <span class="number">42</span></span><br><span class="line">print(x2_sub_copy)</span><br><span class="line">print(x2)</span><br></pre></td></tr></table></figure><p>  output:</p><pre><code>  [[42  5]   [ 7  6]]  [[99  5  2  4]   [ 7  6  8  8]   [ 1  6  7  7]]</code></pre><h2 id="Array-Reshaping"><a href="#Array-Reshaping" class="headerlink" title="Array Reshaping"></a>Array Reshaping</h2><p><strong>Changing the shape of a given array</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># put number 1-9 in a 3*3 grid:</span></span><br><span class="line">grid = np.arange(<span class="number">1</span>,<span class="number">10</span>).reshape((<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">print(grid)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>[[1 2 3] [4 5 6] [7 8 9]]</code></pre><p>The size of the initial array must match the size of the reshaped array. The reshape method will use a no-copy view of the initial array.</p><p>We can use <code>newaxis</code> method to realize the reshape effect.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">x.reshape((<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">x[np.newaxis, :]</span><br><span class="line"></span><br><span class="line">x.reshape((<span class="number">3</span>,<span class="number">1</span>))</span><br><span class="line">x[:, np.newaxis]</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[1, 2, 3]])array([[1, 2, 3]])array([[1],       [2],       [3]])array([[1],       [2],       [3]])</code></pre><h2 id="Array-concatenation-and-splitting"><a href="#Array-concatenation-and-splitting" class="headerlink" title="Array concatenation and splitting"></a>Array concatenation and splitting</h2><p><strong>Combining multiple arrays into one, and splitting one array into many</strong></p><h3 id="Concatenation"><a href="#Concatenation" class="headerlink" title="Concatenation"></a>Concatenation</h3><p><strong><code>concatenation</code>: combine multiple arrays into one</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">y = np.array([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line">np.concatenate([x, y])</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([1, 2, 3, 3, 2, 1])</code></pre><p>In two-dimensional situation, default is zero-indexed.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grid = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">               [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="comment"># concatenate along the first axis</span></span><br><span class="line">np.concatenate([grid, grid])</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[1, 2, 3],       [4, 5, 6],       [1, 2, 3],       [4, 5, 6]])</code></pre><p>We can concatenate along the second axis (zero-indexed).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># zero-indexed</span></span><br><span class="line">np.concatenate([grid, grid], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[1, 2, 3, 1, 2, 3],       [4, 5, 6, 4, 5, 6]])</code></pre><p><strong><code>vstack</code>:  vertically stack the arrays</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">grid = np.array([[<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>],</span><br><span class="line">                [<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>]])</span><br><span class="line">np.vstack([x, grid])</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[1, 2, 3],       [9, 8, 7],       [6, 5, 4]])</code></pre><p><strong><code>hstack</code>: horizontally stack the arrays</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># horizontal</span></span><br><span class="line">y = np.array([[<span class="number">99</span>],</span><br><span class="line">             [<span class="number">99</span>]])</span><br><span class="line">np.hstack([grid, y])</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[ 9,  8,  7, 99],       [ 6,  5,  4, 99]])</code></pre><h3 id="Spliting"><a href="#Spliting" class="headerlink" title="Spliting"></a>Spliting</h3><p><strong><code>split</code>: opposite of concatenation.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">x1, x2, x3 = np.split(x, [<span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line">print(x1, x2, x3)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>[1 2 3] [99 99] [3 2 1]</code></pre><p>Notice that <em>N</em> split-points, leads to <em>N+1</em> subarrays.</p><p><code>np.hsplit</code> and <code>np.vsplit</code> are similar. In multi-dimensional situation:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grid = np.arange(<span class="number">16</span>).reshape((<span class="number">4</span>, <span class="number">4</span>))</span><br><span class="line">grid</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[ 0,  1,  2,  3],       [ 4,  5,  6,  7],       [ 8,  9, 10, 11],       [12, 13, 14, 15]])</code></pre><p><code>np.vsplit</code> and <code>np.hsplit</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">upper, lower = np.vsplit(grid, [<span class="number">2</span>])</span><br><span class="line">print(upper)</span><br><span class="line">print(lower)</span><br><span class="line"></span><br><span class="line">left, right = np.hsplit(grid, [<span class="number">2</span>])</span><br><span class="line">print(left)</span><br><span class="line">print(right)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>[[0 1 2 3] [4 5 6 7]][[ 8  9 10 11] [12 13 14 15]][[ 0  1] [ 4  5] [ 8  9] [12 13]][[ 2  3] [ 6  7] [10 11] [14 15]]</code></pre><h1 id="Computation-and-Functions-in-NumPy"><a href="#Computation-and-Functions-in-NumPy" class="headerlink" title="Computation and Functions in NumPy"></a>Computation and Functions in NumPy</h1><h2 id="The-speed-of-computation-on-Numpy"><a href="#The-speed-of-computation-on-Numpy" class="headerlink" title="The speed of computation on Numpy"></a>The speed of computation on Numpy</h2><p>Computation can be very fast or very slow. The key to making it fast is to use vectorized operations, generally implemented through universal functions(ufuncs).</p><h3 id="The-Slowness-of-Loops"><a href="#The-Slowness-of-Loops" class="headerlink" title="The Slowness of Loops"></a>The Slowness of Loops</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># slowness of loops</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_reciprocals</span><span class="params">(values)</span>:</span></span><br><span class="line">    output = np.empty(len(values))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(values)):</span><br><span class="line">        output[i] = <span class="number">1.0</span> / values[i]</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">values = np.random.randint(<span class="number">1</span>, <span class="number">10</span>, size = <span class="number">5</span>)</span><br><span class="line">compute_reciprocals(values)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([0.16666667, 1.        , 0.25      , 0.25      , 0.125     ])</code></pre><p>If we use  this code for a large input, the operation is very slow.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># IPython's %timeit</span></span><br><span class="line">big_array = np.random.randint(<span class="number">1</span>, <span class="number">100.</span> size=<span class="number">1000000</span>)</span><br><span class="line">%timeit compute_reciprocals(big_array)</span><br></pre></td></tr></table></figure><p>It turns out that the bottleneck here is not the operations themselves, but the type-checking and function dispatches that CPython must do at each cycle of the loop.</p><h3 id="Vectorized-Operation"><a href="#Vectorized-Operation" class="headerlink" title="Vectorized Operation"></a>Vectorized Operation</h3><p>However, Numpy provides a convenient interface to compile routine, which is named as a vectorized operation.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(compute_reciprocals(values))</span><br><span class="line">print(<span class="number">1.0</span> / values)</span><br><span class="line">%timeit (<span class="number">1.0</span> / big_array)</span><br></pre></td></tr></table></figure><p><strong>Vectorized operations in Numpy are implemented via ufuncs, whose main purpose is to quickly execute repeated operations or values in Numpy arrays.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.arange(<span class="number">5</span>) / np.arange(<span class="number">1</span>,<span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([0.        , 0.5       , 0.66666667, 0.75      , 0.8       ])</code></pre><p><strong>Here is the multi-dimensional situation:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line"><span class="number">2</span> ** x</span><br></pre></td></tr></table></figure><p>output:</p><pre><code>array([[  1,   2,   4],       [  8,  16,  32],       [ 64, 128, 256]], dtype=int32)</code></pre><p>We can use these ufuncs to realize various purpose.</p><h2 id="Computation-via-NumPy-UFuncs"><a href="#Computation-via-NumPy-UFuncs" class="headerlink" title="Computation via NumPy UFuncs"></a>Computation via NumPy UFuncs</h2><p>Ufuncs exist in two flavors:</p><ul><li>unary ufuncs, which operate on a single input</li><li>binary ufuncs, which operate on two inputs</li></ul><p>We can use uFuncs to achieve arithmetic purpose.</p><h3 id="Array-arithmetic"><a href="#Array-arithmetic" class="headerlink" title="Array arithmetic"></a>Array arithmetic</h3><p><strong>The basic arithmetic operations</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x=np.arange(<span class="number">4</span>)</span><br><span class="line">print(<span class="string">"x     ="</span>, x)</span><br><span class="line">print(<span class="string">"x + 5 ="</span>, x + <span class="number">5</span>)</span><br><span class="line">print(<span class="string">"x - 5 ="</span>, x - <span class="number">5</span>)</span><br><span class="line">print(<span class="string">"x + 5 ="</span>, x + <span class="number">5</span>)</span><br><span class="line">print(<span class="string">"x + 5 ="</span>, x + <span class="number">5</span>)</span><br><span class="line">print(<span class="string">"x + 5 ="</span>, x + <span class="number">5</span>)</span><br><span class="line">print(<span class="string">"-x    ="</span>, -x) <span class="comment"># negation</span></span><br><span class="line">print(<span class="string">"x ** 2 ="</span>, x ** <span class="number">2</span>) <span class="comment"># exponentiation</span></span><br><span class="line">print(<span class="string">"x % 2 ="</span>, x &amp; <span class="number">2</span>) <span class="comment"># modulus</span></span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x     = [0 1 2 3]</span><br><span class="line">x + 5 = [5 6 7 8]</span><br><span class="line">x - 5 = [-5 -4 -3 -2]</span><br><span class="line">x + 5 = [5 6 7 8]</span><br><span class="line">x + 5 = [5 6 7 8]</span><br><span class="line">x + 5 = [5 6 7 8]</span><br><span class="line">-x    = [ 0 -1 -2 -3]</span><br><span class="line">x ** 2 = [0 1 4 9]</span><br><span class="line">x % 2 = [0 0 2 2]</span><br></pre></td></tr></table></figure><p>We can also combine them together. these arithmetic are simply wrappers specific functions built into NumPy.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(-(<span class="number">0.5</span>* + <span class="number">1</span>)**<span class="number">2</span>)</span><br><span class="line">print(np.add(x, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-0.25</span><br><span class="line">[2 3 4 5]</span><br></pre></td></tr></table></figure><p>Other arithmetic operators and functions include:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">abx(x)</span><br><span class="line">np.exp(x)</span><br><span class="line">np.log(x)</span><br><span class="line">np.sin(x)</span><br></pre></td></tr></table></figure><p><strong>Specialized functions used in statistics exist in scipy</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> special</span><br><span class="line">x = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>]</span><br><span class="line">print(<span class="string">"gamma(x)      ="</span>, special.gamma(x))</span><br><span class="line">print(<span class="string">"ln|gamma(x)|  ="</span>, special.gammaln(x))</span><br><span class="line">print(<span class="string">"beta(x, 2)    ="</span>, special.beta(x, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gamma(x)      = [1.0000e+00 2.4000e+01 3.6288e+05]</span><br><span class="line">ln|gamma(x)|  = [ 0.          3.17805383 12.80182748]</span><br><span class="line">beta(x, 2)    = [0.5        0.03333333 0.00909091]</span><br></pre></td></tr></table></figure><p><strong>To summarize the typical values in a dataset, we can use aggregates function.</strong> NumPy’s aggregate function version is computed much more quickly.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = np.random.random(<span class="number">100</span>)</span><br><span class="line">print(sum(L))</span><br><span class="line">print(np.sum(L))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">47.620210778723894</span><br><span class="line">47.620210778723894</span><br></pre></td></tr></table></figure><p>Timing the different functions:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">big_array = np.random.rand(<span class="number">1000000</span>)</span><br><span class="line">%timeit sum(big_array)</span><br><span class="line">%timeit np.sum(big_array)</span><br></pre></td></tr></table></figure><p>ouptut:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">113 ms ± 7.37 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</span><br><span class="line">1.28 ms ± 69.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)</span><br></pre></td></tr></table></figure><p><strong>For min, max, sum, and several other NumPy aggregates, a shorter syntax is to use methods of the array object itself:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">min(big_array), max(big_array)</span><br><span class="line">np.min(big_array), np.max(big_array)</span><br><span class="line">print(big_array.min(), big_array.max(), big_array.sum())</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(7.476608001599772e-07, 0.9999999017465359)</span><br><span class="line">(7.476608001599772e-07, 0.9999999017465359)</span><br><span class="line">7.476608001599772e-07 0.9999999017465359 499703.64780246833</span><br></pre></td></tr></table></figure><p><strong>For multi-dimensional aggregates, there are three situation: the entire array, the row and the column.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">M = np.random.random((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">print(M)</span><br><span class="line">print(M.sum())</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[[0.31678953 0.12015542 0.47115746 0.91046151]</span><br><span class="line"> [0.66547603 0.36825635 0.79325825 0.2072341 ]</span><br><span class="line"> [0.73285524 0.39698562 0.5593977  0.514694  ]]</span><br><span class="line">6.0567212054611375</span><br></pre></td></tr></table></figure><p>To calculate aggregate from an axis.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(M.min(axis=<span class="number">0</span>))</span><br><span class="line">print(M.max(axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[0.31678953 0.12015542 0.47115746 0.2072341 ]</span><br><span class="line">[0.91046151 0.79325825 0.73285524]</span><br></pre></td></tr></table></figure><p><strong>The axis keyword specifies the dimension of the array will be collapsed, rather than the dimension that will be returned.</strong></p><p>additionally, most aggregates have a NaN-safe counterpart that computes the result while ignoring values, for example, <code>np.sum</code> and <code>np.nansum</code>.</p><h2 id="Example-What-is-Average-Height-of-US-Presidents"><a href="#Example-What-is-Average-Height-of-US-Presidents" class="headerlink" title="Example: What is Average Height of US Presidents?"></a>Example: What is Average Height of US Presidents?</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(<span class="string">'E:/NYU/BootCamp/Bootcamp Onsite/Afternoon/python/president_heights.csv'</span>)</span><br><span class="line"><span class="comment"># data.head()</span></span><br><span class="line">heights = np.array(data[<span class="string">'height(cm)'</span>])</span><br><span class="line">print(heights)</span><br><span class="line">print(<span class="string">"Mean height: "</span>, heights.mean())</span><br><span class="line">print(<span class="string">"Standard deviation:"</span>, heights.std())</span><br><span class="line">print(<span class="string">"Minimum height: "</span>, heights.min())</span><br><span class="line">print(<span class="string">"Maximum height: "</span>, heights.max())</span><br><span class="line">print(<span class="string">"25th percentile: "</span>, np.percentile(heights, <span class="number">25</span>))</span><br><span class="line">print(<span class="string">"Median: "</span>, np.median(heights))</span><br><span class="line">print(<span class="string">"75th percentile: "</span>, np.percentile(heights, <span class="number">75</span>))</span><br></pre></td></tr></table></figure><p>output:</p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>order</th>      <th>name</th>      <th>height(cm)</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>George Washington</td>      <td>189</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>John Adams</td>      <td>170</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>Thomas Jefferson</td>      <td>189</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>James Madison</td>      <td>163</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>James Monroe</td>      <td>183</td>    </tr>  </tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[189 170 189 163 183 171 185 168 173 183 173 173 175 178 183 193 178 173</span><br><span class="line"> 174 183 183 168 170 178 182 180 183 178 182 188 175 179 183 193 182 183</span><br><span class="line"> 177 185 188 188 182 185]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn; seaborn.set() <span class="comment"># set  plot style</span></span><br><span class="line"></span><br><span class="line">plt.hist(heights)</span><br><span class="line">plt.title(<span class="string">'Height Distributtion of US Presidents'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'height (cm)'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'number'</span>)</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Text(0, 0.5, &apos;number&apos;)</span><br></pre></td></tr></table></figure><p><img src="E:/Blog/source/_posts/output_3_1.png" alt="png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is a class note of NYU MFE Bootcamp, including contains basic knowledge of Python NumPy syntax and techniques. Understanding Data Ty
      
    
    </summary>
    
      <category term="Computer Science" scheme="http://yoursite.com/categories/Computer-Science/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Computer-Science/Programming/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/Computer-Science/Programming/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="NYU" scheme="http://yoursite.com/tags/NYU/"/>
    
      <category term="Numpy" scheme="http://yoursite.com/tags/Numpy/"/>
    
      <category term="Bootcamp" scheme="http://yoursite.com/tags/Bootcamp/"/>
    
  </entry>
  
  <entry>
    <title>The Unamiable but Worthwhile Age of 22</title>
    <link href="http://yoursite.com/2019/03/28/The%20Unamiable%20but%20Worthwhile%20Age%20of%2022/"/>
    <id>http://yoursite.com/2019/03/28/The Unamiable but Worthwhile Age of 22/</id>
    <published>2019-03-28T16:00:00.000Z</published>
    <updated>2019-03-29T13:32:01.967Z</updated>
    
    <content type="html"><![CDATA[<p>It appears to me that, by flipping the screen at the tail of the age of 22, I only posted 10 moments on WeChat in the pasted year. Having no idea how I will estimate it after many years, I would like to write my frustration and growth, compared to the wonderful life created by the images on the social media, briefly but seriously.</p><p>Around February last year, I had to experience a gap year without submitting the applications, for the simple reason that the English tests are unfavorable. Thus, the beginning of the age of 22 is a little disappointing for me. Going back to the campus in the last undergraduate semester drove me kind of nervous and embarrassed: after all, lack of offers from both postgraduate schools and employers, as well as consumption of parents’ money in the next few years, was not a honored situation to show. But I was released later because friendly classmates and considerate colleagues didn’t regard it as a big matter, which taught me that peer pressure which always appears in several steps in life is such a subtle mood that on the one hand it stems from personal initiative, but on the other hand, also more importantly, we had better not be coerced by it so as to live in an anxious but unconstructive situation.</p><p>Now that having decided to apply in the next year, I just wanted to do an internship to accumulate more working experience, which is also the requirement for graduation. Fortunately, I got the opportunity, via Peng, to be a part time assistant in RB to assist Arielle, Peiyao, Jass, Jessie and other mentors in finishing a challenging but interesting project from March to May. Not only did I learn the way of thinking as a consultant with the knowledge about the Internet of Things &amp; Energy and cases, but acquaint and make friends with excellent colleagues and peers. At the same time, I completed my thesis during this period under the routine of library-canteen-dormitory. To be honest, it was exhausting but fulfilling.</p><p>Time flies. Before the commencement, graduation trip fascinates me to fly to Chongqing, Chengdu and Xi’an with other 11 classmates, during which the first time disco dancing, airbnb living, hangover, love stories and et cetera all constituted one of the most memorable experience in my life. I appreciated it. However, graduation process cannot be stoppable, even if I still lived in Lin’s dorm 2 weeks after commencement. The old days, I missed them.</p><p>Oddly enough, the sense of graduation is not strong for me, perhaps because I still have the mission to complete. In August, I went to Beijing and restarted the fight with ETS, which last to November and December. I met numerous comrades in similar situation with dreams but struggles to get the points. The details in these stories are complicated, even unperfect, but the important thing was that I survived. I still remember the slogan of ETS: “Go Anywhere From Here.” It may means how widespread and well-accepted it is all over the world. However, I prefer regarding it as below: after beating it, anyone will be bestowed the courage to go anywhere.</p><p>I spent most of my struggling time at home, Zhengzhou, with parents, which was also an appropriate time to consider what I really want and what really matters in life. In Zhengzhou, there is an English corner where I have met a group of sagacious and experienced people. At the meantime, I learned how to cook and feed myself, how to drive a car, and how to deal with my inner impulse and frustration without a supervision and “normal” pace.</p><p>From the aspect of the result of my application, the age of 22 is unamiable and unperfect, but I still eager to regard it as a worthwhile and well-rounded wealth, because I still need my endeavor to protect my dream in the brand new age of 23.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It appears to me that, by flipping the screen at the tail of the age of 22, I only posted 10 moments on WeChat in the pasted year. Having
      
    
    </summary>
    
      <category term="Thoughts" scheme="http://yoursite.com/categories/Thoughts/"/>
    
      <category term="Personal Journals" scheme="http://yoursite.com/categories/Thoughts/Personal-Journals/"/>
    
    
      <category term="Journal" scheme="http://yoursite.com/tags/Journal/"/>
    
      <category term="Annual Letter" scheme="http://yoursite.com/tags/Annual-Letter/"/>
    
  </entry>
  
  <entry>
    <title>What I Have Lived For</title>
    <link href="http://yoursite.com/2019/03/20/What%20I%20Have%20Lived%20For/"/>
    <id>http://yoursite.com/2019/03/20/What I Have Lived For/</id>
    <published>2019-03-20T16:00:00.000Z</published>
    <updated>2019-03-21T14:01:10.156Z</updated>
    
    <content type="html"><![CDATA[<p><em>This prose is the prologue to Bertrand Russell’s Autobiography, where the three passions have been motivating me since the high school. Below is Russell’s original text:</em></p><p>Three passions, simple but overwhelmingly strong, have governed my life: the longing for love, the search for knowledge, and unbearable pity for the suffering of mankind. These passions, like great winds, have blown me hither and thither, in a wayward course, over a great ocean of anguish, reaching to the very verge of despair.</p><p>I have sought love, first, because it brings ecstasy - ecstasy so great that I would often have sacrificed all the rest of life for a few hours of this joy. I have sought it, next, because it relieves loneliness—that terrible loneliness in which one shivering consciousness looks over the rim of the world into the cold unfathomable lifeless abyss. I have sought it finally, because in the union of love I have seen, in a mystic miniature, the prefiguring vision of the heaven that saints and poets have imagined. This is what I sought, and though it might seem too good for human life, this is what—at last—I have found.</p><p>With equal passion I have sought knowledge. I have wished to understand the hearts of men. I have wished to know why the stars shine. And I have tried to apprehend the Pythagorean power by which number holds sway above the flux. A little of this, but not much, I have achieved.</p><p>Love and knowledge, so far as they were possible, led upward toward the heavens. But always pity brought me back to earth. Echoes of cries of pain reverberate in my heart. Children in famine, victims tortured by oppressors, helpless old people a burden to their sons, and the whole world of loneliness, poverty, and pain make a mockery of what human life should be. I long to alleviate this evil, but I cannot, and I too suffer.</p><p>This has been my life. I have found it worth living, and would gladly live it again if the chance were offered me.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;This prose is the prologue to Bertrand Russell’s Autobiography, where the three passions have been motivating me since the high schoo
      
    
    </summary>
    
      <category term="Thoughts" scheme="http://yoursite.com/categories/Thoughts/"/>
    
      <category term="Other" scheme="http://yoursite.com/categories/Thoughts/Other/"/>
    
    
      <category term="Journal" scheme="http://yoursite.com/tags/Journal/"/>
    
  </entry>
  
  <entry>
    <title>Python Pandas Basics</title>
    <link href="http://yoursite.com/2019/03/18/Python%20Pandas%20Basics/"/>
    <id>http://yoursite.com/2019/03/18/Python Pandas Basics/</id>
    <published>2019-03-18T04:00:00.000Z</published>
    <updated>2019-08-07T17:42:39.557Z</updated>
    
    <content type="html"><![CDATA[<p>This note contains basic knowledge of pandas including basic syntax and so on. Posted on Aug 6th is a draft.</p><h1 id="1-Data-Type-in-Pandas"><a href="#1-Data-Type-in-Pandas" class="headerlink" title="1. Data Type in Pandas"></a>1. Data Type in Pandas</h1><p>pandas is a newer package built on top of NumPy. Series and DataFrame is the basic data type. Pandas provides efficient access to these sorts of “data munging” tasks that occupy much of a data scientist’s time.</p><h2 id="1-1-Series"><a href="#1-1-Series" class="headerlink" title="1.1 Series"></a>1.1 Series</h2><h3 id="1-1-1-Series-Basics"><a href="#1-1-1-Series-Basics" class="headerlink" title="1.1.1 Series Basics"></a>1.1.1 Series Basics</h3><p><strong>Series is a one-dimensional array of indexed data.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.Series([<span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">0.75</span>, <span class="number">1.0</span>])</span><br><span class="line">data</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0    0.25</span><br><span class="line">1    0.50</span><br><span class="line">2    0.75</span><br><span class="line">3    1.00</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p><strong>The values are simply a familiar Numpy array and the index is an array-like of type pd.index.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data.values</span><br><span class="line">data.index</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array([0.25, 0.5 , 0.75, 1.  ])</span><br><span class="line">RangeIndex(start=0, stop=4, step=1)</span><br></pre></td></tr></table></figure><p><strong>we can access the element in the series via square-bracket notation.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(data[<span class="number">1</span>])</span><br><span class="line">print(data[<span class="number">1</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0.5</span><br><span class="line">1    0.50</span><br><span class="line">2    0.75</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><h3 id="1-1-2-Series-Index"><a href="#1-1-2-Series-Index" class="headerlink" title="1.1.2 Series Index"></a>1.1.2 Series Index</h3><p><strong>Series is similar to one-dimensional NumPy Array.</strong> The essential difference is the presence of the index: while the NumPy Array has an implicitly defined integer index used to access the values, the Pandas Series has an explicitly defined index associated with the values.</p><p>we can define the index with any desired type when creating a series</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = pd.Series([<span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">0.75</span>, <span class="number">1.0</span>], index=[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>])</span><br><span class="line">data</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a    0.25</span><br><span class="line">b    0.50</span><br><span class="line">c    0.75</span><br><span class="line">d    1.00</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>We can access the element by using index</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">"b"</span>]</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.5</span><br></pre></td></tr></table></figure><p><strong>Here, series is a bit like a specialization of a Python dictionary.</strong> It is even more clear and efficient than dictionary in Python.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">population_dict = &#123;<span class="string">'California'</span>: <span class="number">38332521</span>,</span><br><span class="line">                  <span class="string">'Florida'</span>: <span class="number">19652860</span>,</span><br><span class="line">                   <span class="string">'Illinois'</span>:<span class="number">12882135</span>,</span><br><span class="line">                   <span class="string">'New York'</span>: <span class="number">19651127</span>,</span><br><span class="line">                   <span class="string">'Texas'</span>: <span class="number">26448193</span></span><br><span class="line">                  &#125;</span><br><span class="line">population = pd.Series(population_dict)</span><br><span class="line">population</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">California    38332521</span><br><span class="line">Florida       19652860</span><br><span class="line">Illinois      12882135</span><br><span class="line">New York      19651127</span><br><span class="line">Texas         26448193</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p><strong>Here, series is a bit like a specialization of a Python dictionary.</strong> It is even more clear and efficient than dictionary in Python.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">population[<span class="string">'California'</span>]</span><br><span class="line">population[<span class="string">'California'</span>:<span class="string">'Illinois'</span>]</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">38332521</span><br><span class="line">California  38332521</span><br><span class="line">Florida     19552860</span><br><span class="line">Illinois    12882135</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h3 id="1-1-3-Constructing-Series"><a href="#1-1-3-Constructing-Series" class="headerlink" title="1.1.3 Constructing Series"></a>1.1.3 Constructing Series</h3><p>We can construct a Series from scratch: <code>pd.Series(data, index = index)</code>, where Index is an optional argument. data can be one of many entities.</p><p>The ‘data’ can be a list or Numpy array, can be a scalar, can be a dictionary</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pd.Series(<span class="number">5</span>, index = [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>])</span><br><span class="line">pd.Series(&#123;<span class="number">2</span>:<span class="string">'a'</span>, <span class="number">1</span>:<span class="string">'b'</span>, <span class="number">3</span>:<span class="string">'c'</span>&#125;)</span><br><span class="line">pd.Series(&#123;<span class="number">2</span>:<span class="string">'a'</span>, <span class="number">1</span>:<span class="string">'b'</span>, <span class="number">3</span>:<span class="string">'c'</span>&#125;, index = [<span class="number">3</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">100    5</span><br><span class="line">200    5</span><br><span class="line">300    5</span><br><span class="line">dtype: int64</span><br><span class="line">2    a</span><br><span class="line">1    b</span><br><span class="line">3    c</span><br><span class="line">dtype: object</span><br><span class="line">3    c</span><br><span class="line">2    a</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p>In this case, the Series is populated only wit the explicitly identified keys.</p><h2 id="1-2-DataFrame"><a href="#1-2-DataFrame" class="headerlink" title="1.2 DataFrame"></a>1.2 DataFrame</h2><h3 id="1-2-1-DataFrame-Basics"><a href="#1-2-1-DataFrame-Basics" class="headerlink" title="1.2.1 DataFrame Basics"></a>1.2.1 DataFrame Basics</h3><p>Dataframe can be thought of either as a generalization of a NumPy array, or as a specialization of a Python dictionary. It is an analog of a two dimensional array with flexible row indices and column names.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">area_dict = &#123;<span class="string">'California'</span>: <span class="number">423967</span>,</span><br><span class="line">                  <span class="string">'Florida'</span>: <span class="number">170312</span> ,</span><br><span class="line">                   <span class="string">'Illinois'</span>:<span class="number">149995</span>,</span><br><span class="line">                   <span class="string">'New York'</span>: <span class="number">141297</span>,</span><br><span class="line">                   <span class="string">'Texas'</span>: <span class="number">696562</span></span><br><span class="line">                  &#125;</span><br><span class="line">area = pd.Series(area_dict)</span><br><span class="line">area</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">California    423967</span><br><span class="line">Florida       170312</span><br><span class="line">Illinois      149995</span><br><span class="line">New York      141297</span><br><span class="line">Texas         696562</span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>we can use a dictionary to construct a single two-dimensional object:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">states = pd.DataFrame(&#123;<span class="string">'population'</span>: population, <span class="string">'area'</span>: area&#125;)</span><br><span class="line">states</span><br></pre></td></tr></table></figure><p>output:</p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>population</th>      <th>area</th>    </tr>  </thead>  <tbody>    <tr>      <th>California</th>      <td>38332521</td>      <td>423967</td>    </tr>    <tr>      <th>Florida</th>      <td>19652860</td>      <td>170312</td>    </tr>    <tr>      <th>Illinois</th>      <td>12882135</td>      <td>149995</td>    </tr>    <tr>      <th>New York</th>      <td>19651127</td>      <td>141297</td>    </tr>    <tr>      <th>Texas</th>      <td>26448193</td>      <td>696562</td>    </tr>  </tbody></table><p><strong>DataFrame also has index attribute that gives access to the index lables:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">states.index</span><br><span class="line">states.columns</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Index([California, Florida, Illinois, New York,Texas], dtype=object)</span><br><span class="line">Index([area, population], dtype=object)</span><br></pre></td></tr></table></figure><p><strong>A Pandas Dataframe can be constructed in variety of ways</strong></p><p><strong>a. from a single Series object:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(population, columns=[<span class="string">'popluation'</span>])</span><br></pre></td></tr></table></figure><p>output:</p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>popluation</th>    </tr>  </thead>  <tbody>    <tr>      <th>California</th>      <td>38332521</td>    </tr>    <tr>      <th>Florida</th>      <td>19652860</td>    </tr>    <tr>      <th>Illinois</th>      <td>12882135</td>    </tr>    <tr>      <th>New York</th>      <td>19651127</td>    </tr>    <tr>      <th>Texas</th>      <td>26448193</td>    </tr>  </tbody></table><p><strong>b. from a list of dicts:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = [&#123;<span class="string">'a'</span>:i, <span class="string">'b'</span>:<span class="number">2</span> * i&#125;</span><br><span class="line">       <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line">pd.DataFrame(data)</span><br></pre></td></tr></table></figure><p>output:</p><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.dataframe tbody tr th &#123;</span><br><span class="line">    vertical-align: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.dataframe thead th &#123;</span><br><span class="line">    text-align: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></style><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>0</td>      <td>0</td>    </tr>    <tr>      <th>1</th>      <td>1</td>      <td>2</td>    </tr>    <tr>      <th>2</th>      <td>2</td>      <td>4</td>    </tr>  </tbody></table></div><p><strong>Even if some keys in the dictionary are missing, Pandas will fill them in with NaN (i.e., \not a number”) values:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame([&#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;,&#123;<span class="string">'b'</span>:<span class="number">3</span>, <span class="string">'c'</span>:<span class="number">4</span>&#125;])</span><br></pre></td></tr></table></figure><p>output:</p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>a</th>      <th>b</th>      <th>c</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1.0</td>      <td>2</td>      <td>NaN</td>    </tr>    <tr>      <th>1</th>      <td>NaN</td>      <td>3</td>      <td>4.0</td>    </tr>  </tbody></table><p><strong>c. from a dictionary of Series objects</strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(&#123;population: population, area: area&#125;)</span><br></pre></td></tr></table></figure><p><strong>d. from a two-dimensional Numpy array</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(np.random.rand(<span class="number">3</span>, <span class="number">2</span>),</span><br><span class="line">            columns=[<span class="string">'foo'</span>, <span class="string">'bar'</span>],</span><br><span class="line">            index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br></pre></td></tr></table></figure><p>output:</p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>foo</th>      <th>bar</th>    </tr>  </thead>  <tbody>    <tr>      <th>a</th>      <td>0.010853</td>      <td>0.798349</td>    </tr>    <tr>      <th>b</th>      <td>0.970245</td>      <td>0.074233</td>    </tr>    <tr>      <th>c</th>      <td>0.429177</td>      <td>0.251008</td>    </tr>  </tbody></table><p><strong>e. from a numpy structured array</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A = np.zeros(<span class="number">3</span>, dtype = [(<span class="string">'A'</span>, <span class="string">'i8'</span>), (<span class="string">'B'</span>, <span class="string">'f8'</span>)])</span><br></pre></td></tr></table></figure><h3 id="1-2-2-Pandas-Index-Object"><a href="#1-2-2-Pandas-Index-Object" class="headerlink" title="1.2.2 Pandas Index Object"></a>1.2.2 Pandas Index Object</h3><p>Here is an example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ind = pd.Index([<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>])</span><br><span class="line">ind</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Int64Index([2, 3, 5, 7, 11], dtype=&apos;int64&apos;)</span><br></pre></td></tr></table></figure><p><strong>a. we can use standard Python indexing notation to retrieve values or slices:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(ind[<span class="number">1</span>])</span><br><span class="line">print(ind[::<span class="number">2</span>])</span><br><span class="line">print(ind.size,ind.shape, ind.ndim, ind.dtype)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">Int64Index([2, 5, 11], dtype=&apos;int64&apos;)</span><br><span class="line">5 (5,) 1 int64</span><br></pre></td></tr></table></figure><p><strong>b. index objects and numpy arrays are immutable, they cannot be modified</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ind[<span class="number">1</span>] = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line"></span><br><span class="line">&lt;ipython-input-66-906a9fa1424c&gt; in &lt;module&gt;</span><br><span class="line">----&gt; 1 ind[1] = 0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">D:\Anaconda\lib\site-packages\pandas\core\indexes\base.py in __setitem__(self, key, value)</span><br><span class="line">   2063 </span><br><span class="line">   2064     def __setitem__(self, key, value):</span><br><span class="line">-&gt; 2065         raise TypeError(&quot;Index does not support mutable operations&quot;)</span><br><span class="line">   2066 </span><br><span class="line">   2067     def __getitem__(self, key):</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: Index does not support mutable operations</span><br></pre></td></tr></table></figure><p><strong>This immutability makes it safer</strong> to share indices between multiple DataFrames and arrays, without the potential for side effects from inadvertent index modification.</p><p><strong>c. set arithmetic</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">indA = pd.Index([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])</span><br><span class="line">indB = pd.Index([<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>])</span><br><span class="line">indA &amp; indB <span class="comment"># Intersection</span></span><br><span class="line">indA | indB <span class="comment"># Union</span></span><br><span class="line">indA ^ indB <span class="comment"># symmetric difference</span></span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Int64Index([3, 5, 7], dtype=&apos;int64&apos;)</span><br><span class="line">Int64Index([1, 2, 3, 5, 7, 9, 11], dtype=&apos;int64&apos;)</span><br><span class="line">Int64Index([1, 2, 9, 11], dtype=&apos;int64&apos;)</span><br></pre></td></tr></table></figure><h2 id="1-3-Data-Selection-and-Operation"><a href="#1-3-Data-Selection-and-Operation" class="headerlink" title="1.3 Data Selection and Operation"></a>1.3 Data Selection and Operation</h2><ul><li>indexing (e.g., arr[2; 1])</li><li>slicing (e.g., arr[:; 1 : 5])</li><li>masking (e.g., arr[arr &gt; 0])</li><li>fancy indexing (e.g., arr[0; [1; 5]])</li><li>combinations thereof (e.g., arr[:; [1; 5]])</li></ul><h3 id="1-3-1-Series-Operation"><a href="#1-3-1-Series-Operation" class="headerlink" title="1.3.1 Series Operation"></a>1.3.1 Series Operation</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.Series([<span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">0.75</span>, <span class="number">1.0</span>])</span><br><span class="line">data.Index = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">data</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0    0.25</span><br><span class="line">1    0.50</span><br><span class="line">2    0.75</span><br><span class="line">3    1.00</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p><strong>Index, key and values:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'a'</span> <span class="keyword">in</span> data</span><br><span class="line">data.keys()</span><br><span class="line">list(data.items())</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">True</span><br><span class="line">Index([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;], dtype=&apos;object&apos;)</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><p><strong>We can modify the values or extend a Series by assigning to a new index value.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="string">'e'</span>] = <span class="number">1.25</span></span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a 0.25</span><br><span class="line">b 0.50</span><br><span class="line">c 0.75</span><br><span class="line">d 1.00</span><br><span class="line">e 1.25</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p><strong>Examples of slices, masking, fancy indexing:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># slicing by explicit index</span></span><br><span class="line">data[<span class="string">'a'</span>:<span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># slicing by implicit integer index</span></span><br><span class="line">data[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># masking</span></span><br><span class="line">data[(data &gt; <span class="number">0.3</span>)&amp;(data&lt;<span class="number">0.8</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># fancy indexing</span></span><br><span class="line">data[[<span class="string">'a'</span>, <span class="string">'e'</span>]]</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a 0.25</span><br><span class="line">b 0.50</span><br><span class="line">c 0.75</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">a 0.25</span><br><span class="line">b 0.50</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">b    0.50</span><br><span class="line">c    0.75</span><br><span class="line">dtype: float64</span><br><span class="line"></span><br><span class="line">a 0.25</span><br><span class="line">e 1.25</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>Notice that when slicing with an explicit index (i.e.,<code>data[&#39;a&#39;: &#39;c&#39;]</code>), the nal index is included in the slice, while when slicing with an implicit index (i.e., <code>data[0 : 2]</code>), the final index is excluded from the slice.</p><h3 id="1-3-2-Indexers-loc-iloc-and-ix"><a href="#1-3-2-Indexers-loc-iloc-and-ix" class="headerlink" title="1.3.2 Indexers: loc, iloc, and ix"></a>1.3.2 Indexers: loc, iloc, and ix</h3><p>The slicing and indexing conventions can be a source of<br>confusion in term of explicit and implicit form:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data= pd.Series([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], index=[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># index changed </span></span><br><span class="line">print(data[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># cannot use slicing</span></span><br><span class="line">print(data[<span class="number">1</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1    a</span><br><span class="line">3    b</span><br><span class="line">5    c</span><br><span class="line">dtype: object</span><br><span class="line">a</span><br><span class="line">3    b</span><br><span class="line">5    c</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p><strong>1. <code>loc</code></strong></p><p>the <code>loc</code> attribute allows indexing and slicing that always references the explicit index:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(data.loc[<span class="number">1</span>])</span><br><span class="line">print(data.loc[<span class="number">1</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">1    a</span><br><span class="line">3    b</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p><strong>2. <code>iloc</code></strong></p><p>The <code>iloc</code> attribute allows indexing and slicing that always references the implicit Python-style index:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data.iloc[<span class="number">1</span>]</span><br><span class="line">data.iloc[<span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>output:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&apos;b&apos;</span><br><span class="line">3 b</span><br><span class="line">5 c</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p><strong>3. <code>ix</code></strong></p><p><code>ix</code> , is a hybrid of the two, and for Series objects is equivalent to standard [] - based indexing, the purpose of which will become more apparent in the context of Dataframe object.</p><p>One guiding principle of Python code is that <strong>“explicit is better than implicit”</strong></p><h3 id="1-3-3-DataFrame-Operation"><a href="#1-3-3-DataFrame-Operation" class="headerlink" title="1.3.3 DataFrame Operation"></a>1.3.3 DataFrame Operation</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This note contains basic knowledge of pandas including basic syntax and so on. Posted on Aug 6th is a draft.&lt;/p&gt;
&lt;h1 id=&quot;1-Data-Type-in-P
      
    
    </summary>
    
      <category term="Computer Science" scheme="http://yoursite.com/categories/Computer-Science/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Computer-Science/Programming/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/Computer-Science/Programming/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="NYU" scheme="http://yoursite.com/tags/NYU/"/>
    
      <category term="Pandas" scheme="http://yoursite.com/tags/Pandas/"/>
    
      <category term="Bootcamp" scheme="http://yoursite.com/tags/Bootcamp/"/>
    
  </entry>
  
  <entry>
    <title>Python Basics</title>
    <link href="http://yoursite.com/2019/03/16/Python%20Basics/"/>
    <id>http://yoursite.com/2019/03/16/Python Basics/</id>
    <published>2019-03-16T04:00:00.000Z</published>
    <updated>2019-03-18T08:09:35.238Z</updated>
    
    <content type="html"><![CDATA[<p>This note contains basic knowledge of Python3 including basic syntax, arithmetic rules, comments, list, dictionary, strings, if statements, for statements, functions and debug operations and so on.</p><h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list</span></span><br><span class="line"><span class="comment"># 使用[]中括号 can create an new list</span></span><br><span class="line">list_var = []  <span class="comment"># 这是一个空list</span></span><br><span class="line">print(list_var), type(list_var)</span><br><span class="line"></span><br><span class="line"><span class="comment"># list是具有顺序的一组对象，其中的元素不需要是同类型</span></span><br><span class="line">list_var = [<span class="number">1</span>, <span class="string">'2'</span>, <span class="number">3</span>, <span class="number">4.0</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="string">'seven'</span>, [<span class="number">8</span>], <span class="string">'九'</span>]  <span class="comment"># list举例，其中包含了整数、小数、字符串、数组</span></span><br><span class="line">print(list_var)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====list常见操作：索引，选取list中的某个元素</span></span><br><span class="line">list_var = [<span class="number">1</span>, <span class="string">'2'</span>, <span class="number">3</span>, <span class="number">4.0</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="string">'seven'</span>, [<span class="number">8</span>], <span class="string">'九'</span>]  <span class="comment"># list举例</span></span><br><span class="line">print(list_var[<span class="number">0</span>])  <span class="comment"># 输出排在第1个位置的元素。位置的计数是从0开始的。</span></span><br><span class="line">print(list_var[<span class="number">3</span>])  <span class="comment"># 输出排在第4个位置的元素。</span></span><br><span class="line">print(list_var[<span class="number">8</span>])  <span class="comment"># 输出排在第9个位置的元素。也就是最后一个元素。</span></span><br><span class="line">print(list_var[<span class="number">-1</span>])  <span class="comment"># 输出最后一个元素的另外一种方式。</span></span><br><span class="line">print(list_var[<span class="number">-2</span>])  <span class="comment"># 输出最后第二个位置的元素。</span></span><br><span class="line">print(list_var[<span class="number">9</span>])  <span class="comment"># 超出长度会报错 IndexError: list index out of range</span></span><br><span class="line">print(list_var[<span class="number">-10</span>])  <span class="comment"># 超出长度会报错 IndexError: list index out of range</span></span><br><span class="line">list_var[<span class="number">3</span>] = <span class="number">100</span>  <span class="comment"># 可以根据索引，直接修改list中对应位置的元素</span></span><br><span class="line">print(list_var)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====list常见操作：切片，选取list中的一连串元素</span></span><br><span class="line"><span class="comment"># list_var = [1, '2', 3, 4.0, 5, 6, 'seven', [8], '九']  # list举例</span></span><br><span class="line"><span class="comment"># print list_var[3:8]  # list[a:b]，从第a个位置开始，一直到第b个位置之前的那些元素</span></span><br><span class="line"><span class="comment"># print list_var[:4]  # list[:b]，从头开始，一直到第b个位置之前的那些元素</span></span><br><span class="line"><span class="comment"># print list_var[3:]  # list[a:]，从第a个位置开始，一直到最后一个元素</span></span><br><span class="line"><span class="comment"># print list_var[1:7:3]  # list[a:b:c]，每c个元素，选取其中的一个</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====list常见操作：两个list相加</span></span><br><span class="line"><span class="comment"># list_var1 = [1, '2', 3, 4.0, 5]</span></span><br><span class="line"><span class="comment"># list_var2 = [6, 'seven', [8], '九']</span></span><br><span class="line"><span class="comment"># print(list_var1 + list_var2)  # 两个list相加</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====list常见操作：判断一个元素是否在list当中</span></span><br><span class="line">list_var = [<span class="number">1</span>, <span class="string">'2'</span>, <span class="number">3</span>, <span class="number">4.0</span>, <span class="number">5</span>]</span><br><span class="line">print(<span class="number">1</span> <span class="keyword">in</span> list_var)  <span class="comment"># 判断1元素，是否在list_var中出现</span></span><br><span class="line">print(<span class="number">100</span> <span class="keyword">in</span> list_var)  <span class="comment"># 判断100元素，是否在list_var中出现</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====list常见操作：len，max，min</span></span><br><span class="line">list_var = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">print(len(list_var))  <span class="comment"># list中元素的个数，或者说是list的长度</span></span><br><span class="line">print(len([]))  <span class="comment"># 空list的长度是？</span></span><br><span class="line">print(max(list_var))  <span class="comment"># 这个list中最大的元素，</span></span><br><span class="line">print(min(list_var))  <span class="comment"># 最小的元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====list常见操作：删除其中的一个元素</span></span><br><span class="line">list_var = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">del</span> list_var[<span class="number">0</span>]  <span class="comment"># 删除位置0的那个元素</span></span><br><span class="line">print(list_var)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====list常见操作：如何查找一个元素的在list中的位置</span></span><br><span class="line">list_var = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]  <span class="comment"># 如何才能知道1这个元素，在list中的位置是什么？</span></span><br><span class="line">print(list_var.index(<span class="number">4</span>))  <span class="comment"># 不知道的话，直接搜索</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====list常见操作：append,在后方增加一个元素</span></span><br><span class="line">list_var = [<span class="number">1</span>, <span class="string">'2'</span>, <span class="number">3</span>, <span class="number">4.0</span>, <span class="number">5</span>]</span><br><span class="line">list_var.append(<span class="number">6</span>)</span><br><span class="line">print(list_var)</span><br><span class="line">list_var.append([<span class="string">'seven'</span>, [<span class="number">8</span>], <span class="string">'九'</span>])</span><br><span class="line">print(list_var)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====list常见操作：两个list合并</span></span><br><span class="line">list_var = [<span class="number">1</span>, <span class="string">'2'</span>, <span class="number">3</span>, <span class="number">4.0</span>, <span class="number">5</span>]</span><br><span class="line">list_var.extend([<span class="number">6</span>, <span class="string">'seven'</span>, [<span class="number">8</span>], <span class="string">'九'</span>])</span><br><span class="line">print(list_var)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====list常见操作：逆序、排序、</span></span><br><span class="line">list_var = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">list_var.reverse()</span><br><span class="line">print(list_var)</span><br><span class="line">list_var = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">list_var.sort()</span><br><span class="line">print(list_var)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====list常见操作：range函数</span></span><br><span class="line"><span class="comment"># python2和python3不同</span></span><br><span class="line"><span class="comment"># range函数用于快速创建[0，1，2，3，4，5，6……]这样的list</span></span><br><span class="line">list(range(<span class="number">5</span>))  <span class="comment"># range(a)，对于[0，1，2，3……]这个数组，取前a个元素</span></span><br><span class="line">list(range(<span class="number">1</span>, <span class="number">5</span>))  <span class="comment"># range(a, b)，对于[0，1，2，3……]这个数组，取从第a个位置的元素开始，到第b个位置元素之前的那个元素</span></span><br><span class="line">list(range(<span class="number">1</span>, <span class="number">10</span>, <span class="number">3</span>))  <span class="comment"># range(a, b, c), 每c个元素，选取其中的一个</span></span><br></pre></td></tr></table></figure><h1 id="dictionary"><a href="#dictionary" class="headerlink" title="dictionary"></a>dictionary</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =====dict介绍</span></span><br><span class="line"><span class="comment"># 使用&#123;&#125;大括号就可以新建一个dict。</span></span><br><span class="line">dict_var = &#123;&#125;  <span class="comment"># 这是一个空dict</span></span><br><span class="line">print(dict_var)</span><br><span class="line">type(dict_var)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具有一系列成对的对象。一个叫做key，一个叫做value。其中的元素(包括key和value)不需要是同类型</span></span><br><span class="line">dict_var = &#123;<span class="string">'sh600000'</span>: <span class="string">'浦发银行'</span>,</span><br><span class="line">             <span class="string">'sz000002'</span>: <span class="string">'万科A'</span>,</span><br><span class="line">             <span class="number">300001</span>: <span class="string">'特锐德'</span>&#125;  <span class="comment"># 其中'sh600000'、'sz000002'、300001就是key，'浦发银行'、'万科A'、'特锐德'就是相对应的value。</span></span><br><span class="line">print(dict_var)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典是无顺序，key不可重复</span></span><br><span class="line">dict_var[<span class="number">0</span>]  <span class="comment"># 因为没有顺序，所以dict_var[0]并不能取出第0个位置的元素，此处会报错。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====dict常见操作：根据key的值，取相应的value的值</span></span><br><span class="line">dict_var[<span class="string">'sh600000'</span>]  <span class="comment"># 获取'sh600000'这个key对应的value</span></span><br><span class="line">print(dict_var[<span class="string">'sh600000'</span>])</span><br><span class="line">dict_var.get(<span class="string">'sh600000'</span>)</span><br><span class="line">print(dict_var.get(<span class="string">'sh600000'</span>))  <span class="comment"># 效果同上</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====dict常见操作：增加、修改一对key：value</span></span><br><span class="line">dict_var[<span class="string">'sh000001'</span>] = <span class="string">'上证指数'</span></span><br><span class="line">print(dict_var)</span><br><span class="line">dict_var[<span class="string">'sh000001'</span>] = <span class="string">'上证综合指数'</span></span><br><span class="line">print(dict_var[<span class="string">'sh000001'</span>])</span><br><span class="line">print(dict_var)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====dict常见操作：判断一个key是不是在dict里面</span></span><br><span class="line">print(<span class="string">'sh600000'</span> <span class="keyword">in</span> dict_var)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====dict常见操作：输出一个dict中所有的key和value</span></span><br><span class="line">print(dict_var.keys())  <span class="comment"># 输出所有的key</span></span><br><span class="line">print(dict_var.values())  <span class="comment"># 输出所有的value</span></span><br></pre></td></tr></table></figure><h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =====字符串转义</span></span><br><span class="line">print(<span class="string">'what is wrong'</span>)  <span class="comment"># 如何输入what's wrong</span></span><br><span class="line">print(<span class="string">'what\'s wrong\t'</span>)  <span class="comment"># 使用\对特殊字符进行转义。转义也可以用于表达不可见字符，例如tab符号：\t。</span></span><br><span class="line">print(<span class="string">'\\'</span>)  <span class="comment"># 如果要表达\本身，也需要转义，写为\。</span></span><br><span class="line">print(<span class="string">r'what\'s wrong'</span>)  <span class="comment"># 在字符串的开始加r（Raw String），使得字符串中不发生转义。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====unicode字符串</span></span><br><span class="line">print(<span class="string">'中国'</span>) </span><br><span class="line">type(<span class="string">'中国'</span>)</span><br><span class="line">print(<span class="string">u'中国'</span>)</span><br><span class="line">type(<span class="string">u'中国'</span>)</span><br><span class="line"><span class="string">'中国'</span> == <span class="string">u'中国'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====字符串常见操作：字符串相加，相乘</span></span><br><span class="line">stock_code1 = <span class="string">'sh600000'</span></span><br><span class="line">stock_code2 = <span class="string">'sh600001'</span></span><br><span class="line">print(stock_code1 + <span class="string">', '</span> + stock_code2)  <span class="comment"># 字符串可以直接相加</span></span><br><span class="line">print(stock_code1 * <span class="number">3</span>)  <span class="comment"># 字符串可以乘以整数</span></span><br><span class="line">print(<span class="string">'*'</span> * <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====字符串常见操作：startswith、endswith、</span></span><br><span class="line">stock_code = <span class="string">'sh600000'</span></span><br><span class="line">print(stock_code.startswith(<span class="string">'sh'</span>))  <span class="comment"># 判断字符串是否是以'sh'开头</span></span><br><span class="line">print(stock_code.startswith(<span class="string">'s'</span>))</span><br><span class="line">print(stock_code.startswith(<span class="string">'sz'</span>))</span><br><span class="line">print(stock_code.endswith(<span class="string">'0'</span>))  <span class="comment"># 判断字符串是否是以'0'结尾</span></span><br><span class="line">print(stock_code.endswith(<span class="string">'00'</span>))</span><br><span class="line">print(stock_code.endswith(<span class="string">'11'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># =====字符串常见操作：判断</span></span><br><span class="line">stock_code = <span class="string">'sh600000'</span></span><br><span class="line">print(<span class="string">'sh'</span> <span class="keyword">in</span> stock_code)  <span class="comment"># 判断字符串中是否包含'sh'</span></span><br><span class="line">print(<span class="string">'sz'</span> <span class="keyword">in</span> stock_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====字符串常见操作：替换</span></span><br><span class="line">stock_code = <span class="string">'sh600000'</span></span><br><span class="line">stock_code.replace(<span class="string">'sh'</span>, <span class="string">'sz'</span>)  <span class="comment"># 将字符串中的'sh'替换成'sz'</span></span><br><span class="line">print(<span class="string">'sh600000来自sh'</span>.replace(<span class="string">'sh'</span>, <span class="string">'sz'</span>))  <span class="comment"># 会替换所有的sh</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====字符串常见操作：split</span></span><br><span class="line">stock_code = <span class="string">'sh600000, sh600001, sh600002, sh600003'</span></span><br><span class="line">stock_code.split(<span class="string">', '</span>)</span><br><span class="line">print(stock_code.split(<span class="string">', '</span>)[<span class="number">0</span>])</span><br><span class="line">print(stock_code.split(<span class="string">'sh'</span>))</span><br><span class="line"><span class="comment"># 逆操作</span></span><br><span class="line">stock_code_list = [<span class="string">'sh600000'</span>, <span class="string">'sh600001'</span>, <span class="string">'sh600002'</span>, <span class="string">'sh600003'</span>]</span><br><span class="line">print(<span class="string">', '</span>.join(stock_code_list))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====字符串常见操作：strip</span></span><br><span class="line">stock_code = <span class="string">'  sh600000  '</span></span><br><span class="line">print(stock_code)</span><br><span class="line">print(stock_code.strip())  <span class="comment"># 去除两边的空格</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====字符串的切片：把字符串当做list</span></span><br><span class="line">stock_code = <span class="string">'sh600000'</span></span><br><span class="line">print(stock_code[<span class="number">0</span>])</span><br><span class="line">print(stock_code[:<span class="number">2</span>])</span><br><span class="line">print(stock_code[<span class="number">2</span>:])</span><br><span class="line">print(len(stock_code))</span><br></pre></td></tr></table></figure><h1 id="if-statement"><a href="#if-statement" class="headerlink" title="if statement"></a>if statement</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 条件语句语法如下：</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">if 条件A（结果为布尔值，true或者False）:</span></span><br><span class="line"><span class="string">    执行相关操作1（需要使用tab缩进）</span></span><br><span class="line"><span class="string">    ......</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">elif 条件B（结果为布尔值，true或者False）:</span></span><br><span class="line"><span class="string">    执行相关操作2</span></span><br><span class="line"><span class="string">    ......</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">    执行相关操作3</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 条件语句解释说明如下：</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1. 若条件A为True，那么执行相关操作1，程序结束</span></span><br><span class="line"><span class="string">2. 若条件A为False，那么判断条件B，若条件B为True，那么执行相关操作2，程序结束</span></span><br><span class="line"><span class="string">3. 若条件A为False，那么判断条件B，若条件B为False，那么执行相关操作3，程序结束</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 条件语句示例：根据股票代码，判断股票来自于哪个市场</span></span><br><span class="line">stock_code = <span class="string">'sh600000'</span>  <span class="comment"># 尝试将stock_code改成'sz000002'，'aapl'看相关结果。</span></span><br><span class="line"><span class="keyword">if</span> stock_code.startswith(<span class="string">'sh'</span>):</span><br><span class="line">     print(<span class="string">'上海股票'</span>)</span><br><span class="line"><span class="keyword">elif</span> stock_code.startswith(<span class="string">'sz'</span>):</span><br><span class="line">     print(<span class="string">'深圳股票'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">     print(<span class="string">'不知道哪里来的股票'</span>)</span><br></pre></td></tr></table></figure><h1 id="for-statement"><a href="#for-statement" class="headerlink" title="for statement"></a>for statement</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =====for循环语句介绍</span></span><br><span class="line"><span class="comment"># for循环是最常用的循环语句</span></span><br><span class="line"><span class="comment"># 案例1：计算1+2+3+……+10</span></span><br><span class="line">sum_num = <span class="number">0</span>  <span class="comment"># 用于存储计算的结果</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list(range(<span class="number">10</span> + <span class="number">1</span>)):</span><br><span class="line">    sum_num += i  <span class="comment"># 此处需要使用tab按键进行缩进</span></span><br><span class="line">    print(i, sum_num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例2：批量判断股票来自于哪个市场</span></span><br><span class="line">stock_code_list = [<span class="string">'sh600000'</span>, <span class="string">'sh600001'</span>, <span class="string">'sz000001'</span>, <span class="string">'aapl'</span>]</span><br><span class="line"><span class="keyword">for</span> stock_code <span class="keyword">in</span> stock_code_list:</span><br><span class="line">    <span class="comment"># 若stock_code是sh600000</span></span><br><span class="line">    <span class="keyword">if</span> stock_code == <span class="string">'sh600000'</span>:</span><br><span class="line">        print(stock_code, <span class="string">'此股票为浦发银行，我已经知道它是来自上海的股票'</span>)</span><br><span class="line">        <span class="keyword">continue</span>  <span class="comment"># 跳过此次循环，不运行接下来的语句，直接进入下个循环</span></span><br><span class="line">        <span class="comment"># break  # 停止整个循环，跳出for语句</span></span><br><span class="line">    <span class="comment"># 判断股票来自于哪个市场</span></span><br><span class="line">    <span class="keyword">if</span> stock_code.startswith(<span class="string">'sh'</span>):</span><br><span class="line">        print(stock_code, <span class="string">'上海股票'</span>)</span><br><span class="line">    <span class="keyword">elif</span> stock_code.startswith(<span class="string">'sz'</span>):</span><br><span class="line">        print(stock_code, <span class="string">'深圳股票'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(stock_code, <span class="string">'不知道哪里来的股票'</span>)</span><br></pre></td></tr></table></figure><h1 id="while-statement"><a href="#while-statement" class="headerlink" title="while statement"></a>while statement</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =====while语句</span></span><br><span class="line"><span class="comment"># while语句语法如下：</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">while 条件A:</span></span><br><span class="line"><span class="string">    执行相关操作1（需要使用tab缩进）</span></span><br><span class="line"><span class="string">    ......</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 条件语句解释说明如下：</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1. 判断条件A，若条件A为False，那么程序结束。</span></span><br><span class="line"><span class="string">2. 判断条件A，若条件A为True，那么执行相关操作1。</span></span><br><span class="line"><span class="string">3. 然后再次判断条件A，重复上面的步骤</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># while语句案例1：计算1+2+3+……+10</span></span><br><span class="line">num = <span class="number">1</span></span><br><span class="line">max_num = <span class="number">10</span></span><br><span class="line">sum_num = <span class="number">0</span>  <span class="comment"># 存储计算结果</span></span><br><span class="line"><span class="keyword">while</span> num &lt;= max_num:</span><br><span class="line">    sum_num += num</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    print(sum_num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># while语句案例2：计算1+2+3+……+10</span></span><br><span class="line">num = <span class="number">1</span></span><br><span class="line">max_num = <span class="number">10</span></span><br><span class="line">sum_num = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    sum_num += num</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    print(sum_num, num)</span><br><span class="line">    <span class="keyword">if</span> num == max_num+<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h1 id="function"><a href="#function" class="headerlink" title="function"></a>function</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =====基本函数的定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_h</span><span class="params">(str_var=<span class="string">'hello world'</span>)</span>:</span></span><br><span class="line">    <span class="comment"># 以下是函数内容</span></span><br><span class="line">    <span class="comment"># 函数的功能：将str_var变量打印出来</span></span><br><span class="line">    print(str_var)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以def开头</span></span><br><span class="line"><span class="comment"># print_h是函数名</span></span><br><span class="line"><span class="comment"># str_var是参数，可以带上默认参数</span></span><br><span class="line"><span class="comment"># 函数首行的最后需要带上冒号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =====调用函数</span></span><br><span class="line">print_h()</span><br><span class="line">print_h(str_var=<span class="string">'你好，世界'</span>)</span><br></pre></td></tr></table></figure><h1 id="try"><a href="#try" class="headerlink" title="try"></a>try</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time  <span class="comment"># 导入系统库time，可以使用一些系统级别的函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy_one_stock</span><span class="params">(stock_name=<span class="string">'sh600000'</span>)</span>:</span>  <span class="comment"># 参数为股票名</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    此程序用于下单买入某个股票，但是买入过程中，程序有50%的概率报错。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    random = random.random()</span><br><span class="line">    <span class="keyword">if</span> random &gt;= <span class="number">0.5</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'程序报错！'</span>)</span><br><span class="line"><span class="comment"># buy_one_stock()</span></span><br><span class="line"></span><br><span class="line">max_try_num = <span class="number">5</span></span><br><span class="line">tyr_num = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:  <span class="comment"># 尝试做以下事情</span></span><br><span class="line">        buy_one_stock()</span><br><span class="line">    <span class="keyword">except</span>:  <span class="comment"># 如果因为各种原因报错</span></span><br><span class="line">        print(<span class="string">'警告！下单出错，停止1秒再尝试'</span>)</span><br><span class="line">        tyr_num += <span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> tyr_num &gt; max_try_num:</span><br><span class="line">            print(<span class="string">'超过最大尝试次数，下单失败'</span>)</span><br><span class="line">            <span class="comment"># 此处需要执行相关程序，通知某些人</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 如果没有报错</span></span><br><span class="line">        print(<span class="string">'下单成功了'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This note contains basic knowledge of Python3 including basic syntax, arithmetic rules, comments, list, dictionary, strings, if statement
      
    
    </summary>
    
      <category term="Computer Science" scheme="http://yoursite.com/categories/Computer-Science/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Computer-Science/Programming/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/Computer-Science/Programming/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Verbal Advantage Level 3</title>
    <link href="http://yoursite.com/2019/03/15/Level%203/"/>
    <id>http://yoursite.com/2019/03/15/Level 3/</id>
    <published>2019-03-15T04:00:00.000Z</published>
    <updated>2019-10-21T21:54:27.228Z</updated>
    
    <content type="html"><![CDATA[<h3 id="defray"><a href="#defray" class="headerlink" title="defray"></a>defray</h3><ul><li>pay, provide money for, cover the cost or expenses of</li><li>compare:<ul><li>pay: pay for a meal / pay your bills</li><li>defray: provide money for a portion of the cost or expense<ul><li>use an income tax refund to defray the expense of a trip to Europe</li><li>use the donation to defray the cost of office equipment and supplies</li></ul></li></ul></li></ul><h3 id="taciturn"><a href="#taciturn" class="headerlink" title="taciturn"></a>taciturn</h3><ul><li>silent, not talkative, holding one’s tongue, reserved, uncommunicative, reticent</li><li>antonyms: garrulous, loquacious, effusive, voluble</li><li>compare:<ul><li>reticent: disinclination to express one’s feelings or supply information</li><li>taciturn: person who is habitually silent and withdrawn (silent by nature)</li></ul></li></ul><h3 id="terse"><a href="#terse" class="headerlink" title="terse"></a>terse</h3><ul><li>brief and to the point, free of superfluous words, expressed in a pointed and polished way</li><li>synonyms: concise, pithy, succinct, and laconic</li><li>antonyms: long-winded, redundant, verbose, prolix</li><li>compare:<ul><li>concise: eliminating anything unnecessary or superfluous<ul><li>her presentation was persuasive and concise</li></ul></li><li>succinct: getting the point across in the fewest possible words<ul><li>an effective letter to the editor must be succinct</li></ul></li><li>terse: brief, pointed and polished<ul><li>a terse reply is brief and pointed</li></ul></li></ul></li></ul><h3 id="boon"><a href="#boon" class="headerlink" title="boon"></a>boon</h3><ul><li>a blessing, timely and welcome benefit, something beneficial bestowed upon one, something to be thankful for.</li><li>tips:<ul><li>[archaic] favor, request</li><li>His efforts were a boon to their enterprise</li></ul></li></ul><h3 id="proletariat"><a href="#proletariat" class="headerlink" title="proletariat"></a>proletariat</h3><ul><li>The working class, especially the industrial wage-earning class, which earns its living by manual labor</li><li>tips:<ul><li>proletarian [adj]: relating to the working class</li><li>Karl Marx</li></ul></li></ul><h3 id="heterogeneous"><a href="#heterogeneous" class="headerlink" title="heterogeneous"></a>heterogeneous</h3><ul><li>varied, composed of parts of different kinds, made up of unrelated or diverse elements, mixed, dissimilar, miscellaneous</li><li>antonym: homogeneous</li></ul><h3 id="pittance"><a href="#pittance" class="headerlink" title="pittance"></a>pittance</h3><ul><li>a small amount, portion, share, especially a small or meager amount of money<ul><li>her  inheritance was only a pittance</li><li>he received a pittance for his services</li><li>some people will work for a pittance if the job is rewarding</li></ul></li></ul><h3 id="glib"><a href="#glib" class="headerlink" title="glib"></a>glib</h3><ul><li>smooth-spoken, speaking in a ready, fluent manner, with natural or offhand ease, talkative in a nonchalant way</li><li>synonyms: suave, facile, bland, voluble, flippant, and unctuous</li><li>compare:<ul><li>unctuous: oily, fatty, having a greasy or soapy feel -&gt; slimy, slippery, or smarmy manner<ul><li>The unctuous person appears agreeable or earnest, but in an affected, self-serving and insincere way.</li></ul></li><li>glib: also has a slightly unpleasant aroma<ul><li>glib answers: thoughtless or ill-considered</li><li>glib proposals or solutions: superficial</li><li>glib salesperson or glib politician: persuasive but insincere</li></ul></li></ul></li></ul><h3 id="penchant"><a href="#penchant" class="headerlink" title="penchant"></a>penchant</h3><ul><li>a liking, leaning, strong inclination, decided taste<ul><li>a penchant for sports, a penchant for poetry, a penchant for spicy food</li></ul></li><li>synonyms: propensity, proclivity</li><li>compare:<ul><li>propensity: a profound, often irresistible inclination<ul><li>Successful businesspeople have a propensity for discerning the bottom line and making a profit.</li></ul></li><li>proclivity: a strong natural or habitual tendency, especially toward something objectionable or wicked<ul><li>Career criminals have a proclivity for violence.</li></ul></li><li>penchant<ul><li>Many people have a penchant for chocolate, a strong liking, decided taste.</li></ul></li></ul></li></ul><h3 id="solicitous"><a href="#solicitous" class="headerlink" title="solicitous"></a>solicitous</h3><ul><li><p>concerned, showing care and attention, especially in a worried, anxious, or fearful way</p><ul><li>be solicitous <strong>about</strong> the outcome of an event</li><li>be solicitous <strong>of</strong> a child</li><li>be solicitous <strong>for</strong> the welfare of another </li></ul></li><li><p>eager, full of desire, willing (with anxious concern)</p><ul><li>solicitous to gain the advantage</li><li>solicitous to know the results of the election</li><li>solicitous to go ahead with the plan</li></ul></li></ul><h3 id="circumscribe"><a href="#circumscribe" class="headerlink" title="circumscribe"></a>circumscribe</h3><ul><li>limit, restrict, confine, hem in, fix the boundaries of<ul><li>limited vocabulary can circumscribe your career and undermine your chances of success</li></ul></li></ul><h3 id="dearth"><a href="#dearth" class="headerlink" title="dearth"></a>dearth</h3><ul><li>lack, scarcity, insufficiency, inadequate supply of something needed</li><li>synonym: paucity</li><li>antonym: abundance, surplus, excess, superfluity, plethora</li></ul><h3 id="ingratiating"><a href="#ingratiating" class="headerlink" title="ingratiating"></a>ingratiating</h3><ul><li>flattering, attempting to win approval or curry favor, trying to gain acceptance, done to charm or please another<ul><li>flash a fake, ingratiating smile</li></ul></li></ul><h3 id="mercenary"><a href="#mercenary" class="headerlink" title="mercenary"></a>mercenary</h3><ul><li>greedy, done for payment only, motivated by a selfish desire for money or other reward</li><li>synonym: covetous, avaricious</li></ul><h3 id="extemporize"><a href="#extemporize" class="headerlink" title="extemporize"></a>extemporize</h3><ul><li>improvise, speak or compose with little or no preparation or practice, perform<ul><li>improvise: improvise a speech, a tune on the piano, or a plan of action</li><li>extemporize: spoken or composed with little or no preparation or practice</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;defray&quot;&gt;&lt;a href=&quot;#defray&quot; class=&quot;headerlink&quot; title=&quot;defray&quot;&gt;&lt;/a&gt;defray&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;pay, provide money for, cover the cost or expens
      
    
    </summary>
    
      <category term="Languages" scheme="http://yoursite.com/categories/Languages/"/>
    
      <category term="English" scheme="http://yoursite.com/categories/Languages/English/"/>
    
      <category term="Verbal Advantage" scheme="http://yoursite.com/categories/Languages/English/Verbal-Advantage/"/>
    
    
      <category term="English" scheme="http://yoursite.com/tags/English/"/>
    
      <category term="Vocabularies" scheme="http://yoursite.com/tags/Vocabularies/"/>
    
  </entry>
  
  <entry>
    <title>Data Structure Basics</title>
    <link href="http://yoursite.com/2019/03/09/Data%20Structure%20Basics/"/>
    <id>http://yoursite.com/2019/03/09/Data Structure Basics/</id>
    <published>2019-03-09T16:00:00.000Z</published>
    <updated>2019-03-21T13:55:33.110Z</updated>
    
    <content type="html"><![CDATA[<p>This note contains basic knowledge of data structure and algorithm, including  big-O.</p><h1 id="Computing-Model"><a href="#Computing-Model" class="headerlink" title="Computing Model"></a>Computing Model</h1><h1 id="Complexity"><a href="#Complexity" class="headerlink" title="Complexity"></a>Complexity</h1><h2 id="Complexity-1"><a href="#Complexity-1" class="headerlink" title="Complexity"></a>Complexity</h2><h1 id="Notations"><a href="#Notations" class="headerlink" title="Notations"></a>Notations</h1><h2 id="Big-Omega"><a href="#Big-Omega" class="headerlink" title="Big-$\Omega$"></a>Big-$\Omega$</h2><h2 id="Big-theta"><a href="#Big-theta" class="headerlink" title="Big-$\theta$"></a>Big-$\theta$</h2><h2 id="Big-O"><a href="#Big-O" class="headerlink" title="Big-O"></a>Big-O</h2><h3 id="O-c"><a href="#O-c" class="headerlink" title="O(c)"></a>O(c)</h3><h3 id="O-log-n"><a href="#O-log-n" class="headerlink" title="O($log^n$)"></a>O($log^n$)</h3><h3 id="O-n-c"><a href="#O-n-c" class="headerlink" title="O($n^c$)"></a>O($n^c$)</h3><p>tractable</p><h3 id="O-2-n"><a href="#O-2-n" class="headerlink" title="O($2^n$)"></a>O($2^n$)</h3><p>intractable</p><ul><li>example: 2-Subset Problem<ul><li>2-Subset is NP-complete</li></ul></li></ul><h1 id="Algorithm-Analysis"><a href="#Algorithm-Analysis" class="headerlink" title="Algorithm Analysis"></a>Algorithm Analysis</h1><h2 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h2><ul><li>Validity</li><li>Complexity</li></ul><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><h3 id="Iteration-summation-of-series"><a href="#Iteration-summation-of-series" class="headerlink" title="Iteration: summation of series"></a>Iteration: summation of series</h3><ul><li>Arithmetic Series</li></ul><script type="math/tex; mode=display">T(n) = 1 + 2 + ... + n = \frac{n(n+1)}{2} = O(n^2)</script><ul><li><em>Power of natural number</em> Series</li></ul><script type="math/tex; mode=display">\sum_{k=0}^{n}k^d \approx \int_{0}^{n}x^{d+1}dx=\frac{1}{d+1}x^{d+1}\bigg|_{0}^{n}=\frac{n^{d+1}}{d+1}=O(n^{d+1})</script><script type="math/tex; mode=display">\begin{align*}T_2(n) &= 1^2+2^2+..+n^2=\frac{n(n+1)(2n+1)}{6}=O(n^3) \\T_3(n) &= 1^3+2^3+..+n^3=\frac{n^2(n+1)^2}{4}=O(n^4) \\T_4(n) &= 1^4+2^4+..+n^4=\frac{n(n+1)(2n+1)(3n^2+3n-1)}{30}=O(n^5) \\\end{align*}</script><ul><li>Geometric series</li></ul><script type="math/tex; mode=display">T_p(n)=p^0+p^1+...p^n=\frac{p^{n+1}-1}{p-1}=O(a^n)</script><script type="math/tex; mode=display">1 + 2 + 4 + ... + 2^n = 2^{n+1}-1=O(2^{n+1})=O(2^n)</script><ul><li>Convergent series</li></ul><script type="math/tex; mode=display">1+\frac{1}{2^2}+...+\frac{1}{n^2}<1+\frac{1}{2^2}+...+\frac{1}{n^2}+...=\frac{\pi^2}{6}=O(1)</script><p>​    storage unit can be <em>fraction</em>:</p><script type="math/tex; mode=display">(1-\lambda)[1+2\lambda+3\lambda^2+4\lambda^3+...]=\frac{1}{1-\lambda}=O(1) ~ , ~ 0<\lambda<1</script><ul><li>Divergent series</li></ul><script type="math/tex; mode=display">h(n)=1+\frac{1}{2}+\frac{1}{3}+...+\frac{1}{n}=\theta(logn)</script><script type="math/tex; mode=display">\log1+\log2+\log3+...+\log n=\log(n!)=\theta(n\log n)</script><p>example1:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">    O1Oeration(i, j);</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">\sum\limits_{i=0}^{n-1}n=n+n+...n=n*n=O(n^2)</script><p>example2:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">    O1Oeration(i, j);</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">\sum\limits_{i=0}^{n-1}i=0+1+...n-1=\frac{n(n-1)}{2}=O(n^2)</script><p>example3:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j += <span class="number">2013</span>)</span><br><span class="line">    O1Oeration(i, j);</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">O(n^2)</script><p>example4:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i &lt;&lt;= <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">    O1Oeration(i, j);</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">1+2+4+...+2^{\lfloor\log_2(n-1)\rfloor}=\sum_{k=0}^{\lfloor\log_2(n-1)\rfloor}2^k=2^{\lceil\log_{2}n\rceil}-1=O(n)</script><p>example5:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j+=j)</span><br><span class="line">    O1Oeration(i, j);</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">\begin{align*}\sum_{k=0}^{n}\lceil\log_{2}i\rceil&=O(n\log n),~(i=0,1,2,3\sim4, 5\sim8, 9\sim16,...) \\&= 0+0+1+2*2+3*4+4*8+... \\&= \sum_{0}^{\log n}(k*2^{k-1})\\&= O(\log n*2^{\log n})\end{align*}</script><h3 id="Recursion-recursive-function"><a href="#Recursion-recursive-function" class="headerlink" title="Recursion: recursive function"></a>Recursion: recursive function</h3><h3 id="Inference"><a href="#Inference" class="headerlink" title="Inference"></a>Inference</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This note contains basic knowledge of data structure and algorithm, including  big-O.&lt;/p&gt;
&lt;h1 id=&quot;Computing-Model&quot;&gt;&lt;a href=&quot;#Computing-Mo
      
    
    </summary>
    
      <category term="Computer Science" scheme="http://yoursite.com/categories/Computer-Science/"/>
    
      <category term="Data Structure &amp; Algorithm" scheme="http://yoursite.com/categories/Computer-Science/Data-Structure-Algorithm/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/categories/Computer-Science/Data-Structure-Algorithm/Data-Structure/"/>
    
    
      <category term="MOOC" scheme="http://yoursite.com/tags/MOOC/"/>
    
      <category term="Data Structure" scheme="http://yoursite.com/tags/Data-Structure/"/>
    
  </entry>
  
  <entry>
    <title>Pragmatic Program Savings Account</title>
    <link href="http://yoursite.com/2019/02/27/C++%20Pragmatic%20Program-SavingsAccount/"/>
    <id>http://yoursite.com/2019/02/27/C++ Pragmatic Program-SavingsAccount/</id>
    <published>2019-02-27T16:00:00.000Z</published>
    <updated>2019-02-28T13:06:05.955Z</updated>
    
    <content type="html"><![CDATA[<p>This note contains a simple codes of a savings account in C++.</p><h1 id="Codes"><a href="#Codes" class="headerlink" title="Codes"></a>Codes</h1><ul><li>Version 1</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iosteam&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SavingsAccount</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">double</span> balance;</span><br><span class="line">    <span class="keyword">double</span> rate;</span><br><span class="line">    <span class="keyword">int</span> lastDate;</span><br><span class="line">    <span class="keyword">double</span> accumulation;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">record</span><span class="params">(<span class="keyword">int</span> date, <span class="keyword">double</span> amount)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">accumulate</span><span class="params">(<span class="keyword">int</span> date)</span><span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accumulation + balance * (date - lastDate);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    SavingsAccount(<span class="keyword">int</span> date, <span class="keyword">int</span> id, <span class="keyword">double</span> rate);</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> id;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getBalance</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> balance;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getRate</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> rate;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">int</span> date, <span class="keyword">double</span> amount)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">int</span> date, <span class="keyword">double</span> amount)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">settle</span><span class="params">(<span class="keyword">int</span> date)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SavingsAccount::SavingsAccount(<span class="keyword">int</span> date, <span class="keyword">int</span> id, <span class="keyword">double</span> rate):id(id),balance(<span class="number">0</span>),rate(rate),lastDate(date),accumulation(<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; date &lt;&lt; <span class="string">"\t#"</span> &lt;&lt; id &lt;&lt; <span class="string">"is created"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> SavingsAccount::record(<span class="keyword">int</span> date, <span class="keyword">double</span> amount)&#123;</span><br><span class="line">    accumulation = accumulate(date);</span><br><span class="line">    lastDate = date;</span><br><span class="line">    amount = <span class="built_in">floor</span>(amount * <span class="number">100</span> + <span class="number">0.5</span>) / <span class="number">100</span>;</span><br><span class="line">    balance += amount;  </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; date<span class="string">"\t#"</span>&lt;&lt;id&lt;&lt;<span class="string">"\t"</span>&lt;&lt;amount&lt;&lt;<span class="string">"\t"</span>&lt;&lt;balance&lt;&lt;<span class="string">"\t"</span>&lt;&lt;desc&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> SavingsAcount::settle(<span class="keyword">int</span> date)&#123;</span><br><span class="line">    <span class="keyword">double</span> interest = accumulate(date) * rate / <span class="number">365</span>;</span><br><span class="line">    <span class="keyword">if</span> (interest != <span class="number">0</span>)</span><br><span class="line">        record(date, interest);</span><br><span class="line">    accumulation = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> SavingsAccount::show()&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">'#'</span> &lt;&lt; id &lt;&lt;<span class="string">"\tBalance:"</span> &lt;&lt; balance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">SavingsAccount <span class="title">sa0</span><span class="params">(<span class="number">1</span>,<span class="number">21325302</span>,<span class="number">0.015</span>)</span></span>;</span><br><span class="line">    <span class="function">SavingsAccount <span class="title">sa1</span><span class="params">(<span class="number">1</span>,<span class="number">58320212</span>,<span class="number">0.015</span>)</span></span>;</span><br><span class="line">    sa0.deposit(<span class="number">5</span>,<span class="number">5000</span>);</span><br><span class="line">    sa1.deposit(<span class="number">25</span>,<span class="number">10000</span>);</span><br><span class="line">    sa0.deposit(<span class="number">45</span>,<span class="number">5500</span>);</span><br><span class="line">    sa1.withdaw(<span class="number">60</span>,<span class="number">4000</span>);</span><br><span class="line">    </span><br><span class="line">    sa0.settle(<span class="number">90</span>);</span><br><span class="line">    sa1.settle(<span class="number">90</span>);</span><br><span class="line">    </span><br><span class="line">    sa0.show(); <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    sa1.show(); <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This note contains a simple codes of a savings account in C++.&lt;/p&gt;
&lt;h1 id=&quot;Codes&quot;&gt;&lt;a href=&quot;#Codes&quot; class=&quot;headerlink&quot; title=&quot;Codes&quot;&gt;&lt;/a&gt;C
      
    
    </summary>
    
      <category term="Computer Science" scheme="http://yoursite.com/categories/Computer-Science/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Computer-Science/Programming/"/>
    
      <category term="C++" scheme="http://yoursite.com/categories/Computer-Science/Programming/C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="MOOC" scheme="http://yoursite.com/tags/MOOC/"/>
    
  </entry>
  
  <entry>
    <title>C++ Array, Pointer &amp; String</title>
    <link href="http://yoursite.com/2019/02/26/C++%20Array,%20Pointer%20&amp;%20String/"/>
    <id>http://yoursite.com/2019/02/26/C++ Array, Pointer &amp; String/</id>
    <published>2019-02-26T16:00:00.000Z</published>
    <updated>2019-03-02T15:26:33.401Z</updated>
    
    <content type="html"><![CDATA[<p>This note contains the basic rules of array, pointer and string in C++.</p><h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>Type Identifier <em>Name</em> [<em>Expression1</em>] [<em>Expression2</em>]…</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]</span><br><span class="line"><span class="comment">// a is an integer array with 10 elements.</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>][<span class="number">3</span>]</span><br><span class="line"><span class="comment">// a is an 2-dimension integer array with 5 rows and 3 columns and 15 elements.</span></span><br></pre></td></tr></table></figure><p>tips</p><ul><li><p>The array must be declared first, then be used.</p></li><li><p>refer the elements one by one, not the whole array.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">0</span>]=a[<span class="number">5</span>]+a[<span class="number">7</span>]-a[<span class="number">2</span>*<span class="number">3</span>]</span><br><span class="line">b[<span class="number">1</span>][<span class="number">2</span>]=a[<span class="number">2</span>][<span class="number">3</span>]/<span class="number">2</span></span><br></pre></td></tr></table></figure></li></ul><p>example</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>], b[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">a[i] = i * <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">b[<span class="number">10</span> - i - <span class="number">1</span>] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a["</span> &lt;&lt; i &lt;&lt; <span class="string">"] = "</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b["</span> &lt;&lt; I &lt;&lt; <span class="string">"] = "</span> &lt;&lt; b[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h2><ul><li><p>One dimension </p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. list all the initial value of elements</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line"><span class="comment">// 2. initialize part of elements</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"><span class="comment">// 3. don't set the length when initializing</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>two dimension</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. list all the initial value in braces by order</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;</span><br><span class="line"><span class="comment">// 2. list the initial value by different rows</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;</span><br><span class="line"><span class="comment">// 3. initialize part of elements</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;&#123;<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">6</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">11</span>&#125;&#125;</span><br><span class="line"><span class="comment">// 4. list all the initial values, the first index can be ignored</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a[][<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> a[][<span class="number">4</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,&#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>Find the first 20 items in Fibonacci sequence</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">20</span>] = &#123;<span class="number">1</span>,<span class="number">1</span>&#125;; <span class="comment">//initialize the 0th and the first number</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">f[i] = f[i - <span class="number">2</span>] + f[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++) &#123; <span class="comment">//output 5 number on each row</span></span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>.width(<span class="number">12</span>); <span class="comment">//set output width in 12</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; f[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Input the answers of multiple choices in a loop, compute and output the correct rate of each answer till input the ctrl+z. The answers will be input in a row as “a”, “b”, “c”, “d”.</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> key[ ] = &#123;<span class="string">'a'</span>,<span class="string">'c'</span>,<span class="string">'b'</span>,<span class="string">'a'</span>,<span class="string">'d'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NUM_QUES = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">int</span> ques = <span class="number">0</span>, numCorrect = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter the "</span> &lt;&lt; NUM_QUES &lt;&lt; <span class="string">" question tests:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>.get(c)) &#123;</span><br><span class="line">    <span class="keyword">if</span>(c != <span class="string">'\n'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(c == key[ques]) &#123;</span><br><span class="line">        numCorrect++; <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"*"</span>;</span><br><span class="line">    ques++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" Score "</span> &lt;&lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(numCorrect)/NUM_QUES*<span class="number">100</span> &lt;&lt; <span class="string">"%"</span>;</span><br><span class="line">    ques = <span class="number">0</span>;  numCorrect = <span class="number">0</span>; <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Array-as-argument"><a href="#Array-as-argument" class="headerlink" title="Array as argument"></a>Array as argument</h2><p>tips</p><ul><li>when elements in an array are parameters, they are just like variables. The name of array should be arguments and parameters. Type should be the same.</li></ul><blockquote><p>Compute the sum of every row of an array.</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rowSum</span><span class="params">(<span class="keyword">int</span> a[][<span class="number">4</span>], <span class="keyword">int</span> nRow)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nRow; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        a[i][<span class="number">0</span>] += a[i][j];</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> table[<span class="number">3</span>][<span class="number">4</span>] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)  &#123;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">              <span class="built_in">cout</span> &lt;&lt; table[i][j] &lt;&lt; <span class="string">"   "</span>;</span><br><span class="line">         <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    rowSum(table, <span class="number">3</span>); <span class="comment">//compute the sum of every row</span></span><br><span class="line"><span class="comment">//output the result</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Sum of row "</span> &lt;&lt; i &lt;&lt; <span class="string">" is "</span> &lt;&lt; table[i][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Object-Array"><a href="#Object-Array" class="headerlink" title="Object Array"></a>Object Array</h2><ul><li><p>definition</p><p><strong>Class Name</strong> <em>Array Name</em>[number of elements]</p></li><li><p>syntax</p><p><strong>Array Name</strong>[index].<em>member Name</em></p></li><li><p>initialization</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Point a[<span class="number">2</span>]=&#123;Point(<span class="number">1</span>,<span class="number">2</span>),Point(<span class="number">3</span>,<span class="number">4</span>)&#125;</span><br></pre></td></tr></table></figure></li><li><p>example</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Point.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _POINT_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _POINT_H</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Point();</span><br><span class="line">Point(<span class="keyword">int</span> x, <span class="keyword">int</span> y);</span><br><span class="line">~Point();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> newX,<span class="keyword">int</span> newY)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> y; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showCount</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//_POINT_H</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Point.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Point.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">Point::Point() : x(<span class="number">0</span>), y(<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Default Constructor called."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Point::Point(<span class="keyword">int</span> x, <span class="keyword">int</span> y) : x(x), y(y) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Constructor called."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Point::~Point() &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Destructor called."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> Point::move(<span class="keyword">int</span> newX,<span class="keyword">int</span> newY) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Moving the point to ("</span> &lt;&lt; newX &lt;&lt; <span class="string">", "</span> &lt;&lt; newY &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">x = newX;</span><br><span class="line">y = newY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Point.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Entering main..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Point a[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">a[i].move(i + <span class="number">10</span>, i + <span class="number">20</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Exiting main..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="for-loop-based-on-range"><a href="#for-loop-based-on-range" class="headerlink" title="for loop based on range"></a>for loop based on range</h2><ul><li>traversal all the elements in an array</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line"><span class="keyword">for</span>(p = <span class="built_in">array</span>; p &lt; <span class="built_in">array</span> + <span class="keyword">sizeof</span>(<span class="built_in">array</span>) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>); ++p)&#123;</span><br><span class="line">    *p += <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp; e : <span class="built_in">array</span>)&#123;</span><br><span class="line">    e += <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;e&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Pointer"><a href="#Pointer" class="headerlink" title="Pointer"></a>Pointer</h1><h2 id="Definition-1"><a href="#Definition-1" class="headerlink" title="Definition"></a>Definition</h2><ul><li><p>pointer operator</p><ul><li><p>*<em>Pointer Name</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>* ptr = &amp;i</span><br><span class="line">*ptr = <span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>address operator</p><ul><li>&amp;<em>Variable Name</em></li></ul></li></ul><h2 id="Initialization-1"><a href="#Initialization-1" class="headerlink" title="Initialization"></a>Initialization</h2><p>syntax</p><ul><li><em>Storage Type</em> Type Identifier <em> <em>*Pointer Name</em></em> = initial address</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *pa = &amp;a</span><br></pre></td></tr></table></figure><p>tips:</p><ul><li>The variable should be declared before assigned to a pointer.</li><li>A non-static variable can be assigned to a static pointer.</li></ul><h2 id="Assignment"><a href="#Assignment" class="headerlink" title="Assignment"></a>Assignment</h2><p>syntax</p><ul><li><strong>Pointer Name</strong> = address value</li></ul><p>tips:</p><ul><li><p>The address value must be a address constant or address variable rather than an integer.</p></li><li><p>0 can be assigned to a pointer, which means a null pointer. Now <code>nullptr</code> can be used as a null pointer</p></li><li><code>void</code> pointer can be assigned to the address of any type object.</li></ul><p>example of pointer</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> *ptr = &amp;i; <span class="comment">//assign the address of i to ptr</span></span><br><span class="line">i = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"i = "</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//output the value of the int variable</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"*ptr = "</span> &lt;&lt; *ptr &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//output the content that the int pointer is assigned to</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>the output result is:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i = 10</span><br><span class="line">*ptr = 10</span><br></pre></td></tr></table></figure><p>example of a void pointer</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//!void voidObject; //wrong: there is no void  variable</span></span><br><span class="line"><span class="keyword">void</span> *pv; <span class="comment">//right: the void type pointer</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">pv = &amp;i; <span class="comment">//void pointer is assigned to the int variable</span></span><br><span class="line"><span class="keyword">int</span> *pint = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span> *&gt;(pv); <span class="comment">//void pointer is transformed to an int pointer</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"*pint = "</span> &lt;&lt; *pint &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>pointer assigned to an constant and const pointer</p><ul><li>the assigned object cannot be changed by a pointer assigned to an constant.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p1 = &amp;a; <span class="comment">//p1 is a pointer assigned to an constant</span></span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">p1 = &amp;b; <span class="comment">//right，the assigned value of p1 can be changed</span></span><br><span class="line"> *p1 = <span class="number">1</span>; <span class="comment">//wrong，the object value cannot be changed by p1</span></span><br></pre></td></tr></table></figure><ul><li>the assigned value of an const pointer cannot be changed</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> * <span class="keyword">const</span> p2 = &amp;a;</span><br><span class="line">p2 = &amp;b; <span class="comment">//wrong，p2 is a const pointer which cannot be changed</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Operation"><a href="#Operation" class="headerlink" title="Operation"></a>Operation</h2><h3 id="Arithmetic-Operation"><a href="#Arithmetic-Operation" class="headerlink" title="Arithmetic Operation"></a>Arithmetic Operation</h3><ul><li><p>addition and subtraction: </p><ul><li><p>+n or -n meaning</p><p>the pointer assign to the initial address of the n-th data object.</p></li><li><p>++ or —</p><p>the initial address of the last or the next data object</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> a[<span class="number">4</span>]</span><br><span class="line"><span class="keyword">short</span> *pa=a</span><br></pre></td></tr></table></figure></li></ul><h3 id="Relationship-Operation"><a href="#Relationship-Operation" class="headerlink" title="Relationship Operation"></a>Relationship Operation</h3><p>tips:</p><ul><li>the same type of pointers can be operated with relationship</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p==<span class="number">0</span></span><br><span class="line">p!=<span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Access-Array-with-Pointer"><a href="#Access-Array-with-Pointer" class="headerlink" title="Access Array with Pointer"></a>Access Array with Pointer</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>], *pa;</span><br><span class="line">pa = &amp;a[<span class="number">0</span>]; <span class="comment">//or: pa = a</span></span><br></pre></td></tr></table></figure><p>tips: </p><ul><li><p>There are similar expression:</p><ul><li><p><code>*pa</code> is <code>a[0]</code>,  <code>*(pa+1)</code> is <code>a[1]</code>,  <code>*(pa+i)</code> is <code>a[i]</code>,  </p></li><li><p><code>a[i]</code>,<code>*(pa+i)</code>,<code>*(a+i)</code> and <code>pa[i]</code>are the same effect.</p></li></ul></li><li><p><code>a++</code> is wrong, because a is the initial address of the array, a constant.</p></li></ul><p>example:</p><ul><li>access array with index</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>access array with pointer</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *(a+i) &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>access array with pointer variable</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> *p = a; p &lt; (a + <span class="number">10</span>); p++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Array-with-pointer-elements"><a href="#Array-with-pointer-elements" class="headerlink" title="Array with pointer elements"></a>Array with pointer elements</h2><p>Definition：</p><p>​    <code>Point *pa[2]</code> is made up of <code>pa[0]</code> and <code>pa[1]</code>.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> line1[] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;;<span class="comment">//The first row</span></span><br><span class="line"><span class="keyword">int</span> line2[] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span> &#125;;<span class="comment">//The second row</span></span><br><span class="line"><span class="keyword">int</span> line3[] = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> &#125;;<span class="comment">//The third row</span></span><br><span class="line"><span class="comment">//define an int array with pointer elements and initialize it</span></span><br><span class="line"><span class="keyword">int</span> *pLine[<span class="number">3</span>] = &#123; line1, line2, line3 &#125;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Matrix test:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; pLine[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The output result is:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Matrix test:</span><br><span class="line"><span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span></span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="Function-with-pointer-arguments-and-parameters"><a href="#Function-with-pointer-arguments-and-parameters" class="headerlink" title="Function with pointer arguments and parameters"></a>Function with pointer arguments and parameters</h2><ul><li>example: split a number into integer and fraction.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splitFloat</span><span class="params">(<span class="keyword">float</span> x, <span class="keyword">int</span> *intPart, <span class="keyword">float</span> *fracPart)</span> </span>&#123;</span><br><span class="line">    *intPart = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(x);</span><br><span class="line">*fracPart = x - *intPart;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter 3 float point numbers:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">float</span> x, f;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">    splitFloat(x, &amp;n, &amp;f);<span class="comment">//address is the parameter.</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Integer Part = "</span> &lt;&lt; n &lt;&lt; <span class="string">" Fraction Part = "</span> &lt;&lt; f &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>example: a pointer assigned to const is argument</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">6</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> *p, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;<span class="built_in">array</span>[i];</span><br><span class="line">    print(<span class="built_in">array</span>, N);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> *p, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"&#123; "</span> &lt;&lt; *p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">", "</span> &lt;&lt; *(p+i);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" &#125;"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Function-with-a-pointer-return-value"><a href="#Function-with-a-pointer-return-value" class="headerlink" title="Function with a pointer return value"></a>Function with a pointer return value</h2><p>syntax:</p><ul><li><p><strong>Type Identifier</strong> *Function Name(){</p><p>​    //expression</p><p>}</p></li></ul><p>tips:</p><ul><li>a non-static local address cannot be a return value.</li></ul><p>example1:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span>* <span class="title">search</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> num)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;<span class="built_in">array</span>[i];</span><br><span class="line">    <span class="keyword">int</span>* zeroptr= search(<span class="built_in">array</span>, <span class="number">10</span>);  <span class="comment">//assign the address of array in main function to the sub-function</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">search</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> num)</span></span>&#123; <span class="comment">//pointer a assign to the array defined in the main function</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++)</span><br><span class="line">        <span class="keyword">if</span>(a[i]==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> &amp;a[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>example2:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span>* <span class="title">newintvar</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">int</span>* intptr= newintvar();</span><br><span class="line">    *intptr=<span class="number">5</span>; <span class="comment">//a valid address</span></span><br><span class="line">    <span class="keyword">delete</span> intptr; <span class="comment">//if not delete, the memory will leak</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">newintvar</span> <span class="params">()</span></span>&#123; </span><br><span class="line">    <span class="keyword">int</span>* p=<span class="keyword">new</span> <span class="keyword">int</span>();</span><br><span class="line">    <span class="keyword">return</span> p; <span class="comment">//the returned address is assigned to the dynamic allocated space</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pointer-assigned-to-the-Function"><a href="#Pointer-assigned-to-the-Function" class="headerlink" title="Pointer assigned to the Function"></a>Pointer assigned to the Function</h2><p>Definition:</p><p><em>Type Identifier</em> (*<strong>Function Pointer Name</strong>)();</p><blockquote><p>define a function which can achieve any kind of arithmetic operation</p></blockquote> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compute</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span>(*func)(<span class="keyword">int</span>, <span class="keyword">int</span>))</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> func(a, b);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span>((a &gt; b)?a: b);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span>((a &lt; b)?a: b);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> a + b;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, res;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"inout intager a: "</span>; <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"inout intager b: "</span>; <span class="built_in">cin</span> &gt;&gt; b;</span><br><span class="line">    res = compute(a, b, &amp; max);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Max of "</span> &lt;&lt; a &lt;&lt; <span class="string">" and "</span> &lt;&lt; b &lt;&lt; <span class="string">" is "</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    res = compute(a, b, &amp; min);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Min of "</span> &lt;&lt; a &lt;&lt; <span class="string">" and "</span> &lt;&lt; b &lt;&lt; <span class="string">" is "</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    res = compute(a, b, &amp; sum);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Sum of "</span> &lt;&lt; a &lt;&lt; <span class="string">" and "</span> &lt;&lt; b &lt;&lt; <span class="string">" is "</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Object-Pointer"><a href="#Object-Pointer" class="headerlink" title="Object Pointer"></a>Object Pointer</h2><p>syntax: </p><ul><li><p>definition:</p><p><em>Class Name</em> *<strong>Object Pointer Name</strong></p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Point a(5, 10);</span><br><span class="line">Point *ptr;</span><br><span class="line">ptr = &amp;a;</span><br></pre></td></tr></table></figure></li><li><p>access object member by pointer</p><p><strong>Object Pointer Name</strong>-&gt; <em>object member name</em></p><p>  <code>ptr-&gt;getx()</code> equals <code>(*ptr).getx()</code>;</p></li></ul><p>example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Point(<span class="keyword">int</span> x = <span class="number">0</span>, <span class="keyword">int</span> y = <span class="number">0</span>) : x(x), y(y) &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> y; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Point <span class="title">a</span><span class="params">(<span class="number">4</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line">    Point *p1 = &amp;a; <span class="comment">//define object pointer and initialize with address of a</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p1-&gt;getX() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a.getX() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="This-Pointer"><a href="#This-Pointer" class="headerlink" title="This Pointer"></a>This Pointer</h2><p><code>return x</code> equals to<code>return this -&gt; x</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fred</span>;</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Barney</span> &#123;</span></span><br><span class="line">Fred *x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fred</span> &#123;</span></span><br><span class="line">Barney y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Dynamic-Memory-Allocation"><a href="#Dynamic-Memory-Allocation" class="headerlink" title="Dynamic Memory Allocation"></a>Dynamic Memory Allocation</h2><h3 id="Definition-2"><a href="#Definition-2" class="headerlink" title="Definition"></a>Definition</h3><p>syntax:</p><p><em>new</em> <strong>Type Identifier</strong>(initial arguments list)</p><p><em>delete</em> <strong>Pointer Name</strong></p><p>example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Point() : x(<span class="number">0</span>), y(<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Default Constructor called."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Point(<span class="keyword">int</span> x, <span class="keyword">int</span> y) : x(x), y(y) &#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; <span class="string">"Constructor called."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Point() &#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Destructor called."</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> y; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> newX, <span class="keyword">int</span> newY)</span> </span>&#123;</span><br><span class="line">    x = newX;</span><br><span class="line">    y = newY;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"step one: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Point *ptr1 = <span class="keyword">new</span> Point; <span class="comment">//default constructor function</span></span><br><span class="line">    <span class="keyword">delete</span> ptr1; <span class="comment">//destructor function</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Step two: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    ptr1 = <span class="keyword">new</span> Point(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">delete</span> ptr1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The result:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Step One:</span><br><span class="line">Default Constructor called.</span><br><span class="line">Destructor called.</span><br><span class="line">Step Two:</span><br><span class="line">Constructor called.</span><br><span class="line">Destructor called.</span><br></pre></td></tr></table></figure><h3 id="Dynamic-Array"><a href="#Dynamic-Array" class="headerlink" title="Dynamic Array"></a>Dynamic Array</h3><p>syntax:</p><ul><li><p>one dimension</p><p>new <strong>Type identifier</strong> [length of the array]</p><p>delete[] <strong>Array Name</strong></p></li></ul><p>example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Point() : x(<span class="number">0</span>), y(<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Default Constructor called."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Point(<span class="keyword">int</span> x, <span class="keyword">int</span> y) : x(x), y(y) &#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; <span class="string">"Constructor called."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Point() &#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Destructor called."</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> y; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> newX, <span class="keyword">int</span> newY)</span> </span>&#123;</span><br><span class="line">    x = newX;</span><br><span class="line">    y = newY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Point *ptr = <span class="keyword">new</span> Point[<span class="number">2</span>]; <span class="comment">//create</span></span><br><span class="line">    ptr[<span class="number">0</span>].move(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">    ptr[<span class="number">1</span>].move(<span class="number">15</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Deleting..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">delete</span>[] ptr;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The result is:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Default Constructor called.</span><br><span class="line">Default Constructor called.</span><br><span class="line">Deleting...</span><br><span class="line">Destructor called.</span><br><span class="line">Destructor called.</span><br></pre></td></tr></table></figure><ul><li><p>multiple dimension</p><p>new <strong>Type identifier</strong> [length of the dimension1] [length of the dimension2]</p></li></ul><p>example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> (*cp)[<span class="number">9</span>][<span class="number">8</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">7</span>][<span class="number">9</span>][<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span>; k++)</span><br><span class="line">                *(*(*(cp + i) + j) + k) =（i * <span class="number">100</span> + j * <span class="number">10</span> + k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span>; k++)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; cp[i][j][k] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[] cp;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>example2: encapsulate dynamic array class</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Point() : x(<span class="number">0</span>), y(<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Default Constructor called."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Point(<span class="keyword">int</span> x, <span class="keyword">int</span> y) : x(x), y(y) &#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; <span class="string">"Constructor called."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Point() &#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Destructor called."</span>&lt;&lt;<span class="built_in">endl</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> y; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> newX, <span class="keyword">int</span> newY)</span> </span>&#123;</span><br><span class="line">    x = newX;</span><br><span class="line">    y = newY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayOfPoints</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ArrayOfPoints(<span class="keyword">int</span> size) : size(size) &#123;</span><br><span class="line">    points = <span class="keyword">new</span> Point[size];</span><br><span class="line">    &#125;</span><br><span class="line">    ~ArrayOfPoints() &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Deleting..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">delete</span>[] points;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Point&amp; <span class="title">element</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    assert(index &gt;= <span class="number">0</span> &amp;&amp; index &lt; size);</span><br><span class="line">    <span class="keyword">return</span> points[index];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Point *points; <span class="comment">//dynamic array initial address</span></span><br><span class="line">    <span class="keyword">int</span> size; <span class="comment">//size of array</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please enter the count of points: "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; count;</span><br><span class="line">    <span class="function">ArrayOfPoints <span class="title">points</span><span class="params">(count)</span></span>;</span><br><span class="line">    points.element(<span class="number">0</span>).move(<span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">    points.element(<span class="number">1</span>).move(<span class="number">15</span>, <span class="number">20</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The result is:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Please enter the number of points:<span class="number">2</span></span><br><span class="line">Default Constructor called.</span><br><span class="line">Default Constructor called.</span><br><span class="line">Deleting...</span><br><span class="line">Destructor called.</span><br><span class="line">Destructor called.</span><br></pre></td></tr></table></figure><h2 id="Smart-Pointer"><a href="#Smart-Pointer" class="headerlink" title="Smart Pointer"></a>Smart Pointer</h2><p><code>unique_ptr</code></p><p><code>shared_ptr</code></p><p><code>weak_ptr</code></p><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><p>syntax:</p><ul><li>definition</li></ul><p>vector\&lt;<em>Element Type</em>> <strong>Array Name</strong>(array length);</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><ul><li>access</li></ul><p>vector <strong>Array name</strong> [ index ]</p><p>vector <strong>Array name</strong>.size()</p><p>example:</p><blockquote><p>Calculate the average of elements in the array.</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">average</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; &amp;arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i&lt;arr.size(); i++)</span><br><span class="line">    sum += arr[i];</span><br><span class="line">    <span class="keyword">return</span> sum / arr.size();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"n = "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; arr(n); <span class="comment">//create array object</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input "</span> &lt;&lt; n &lt;&lt; <span class="string">" real numbers:"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Average = "</span> &lt;&lt; average(arr) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>example2: auto pointer</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i = v.begin(); i != v.end(); ++i)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> e : v)</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Object-Replication"><a href="#Object-Replication" class="headerlink" title="Object Replication"></a>Object Replication</h1><h2 id="Shallow-Copy"><a href="#Shallow-Copy" class="headerlink" title="Shallow Copy"></a>Shallow Copy</h2><h2 id="Deep-Copy"><a href="#Deep-Copy" class="headerlink" title="Deep Copy"></a>Deep Copy</h2><h2 id="Move-Assignment"><a href="#Move-Assignment" class="headerlink" title="Move Assignment"></a>Move Assignment</h2><p>syntax:</p><p>class_name ( class_name &amp;&amp; )</p><p>example: </p><ul><li>version 1</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntNum</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">IntNum(<span class="keyword">int</span> x = <span class="number">0</span>) : xptr(<span class="keyword">new</span> <span class="keyword">int</span>(x))&#123; <span class="comment">//constructor</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Calling constructor..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">    IntNum(<span class="keyword">const</span> IntNum &amp; n) : xptr(<span class="keyword">new</span> <span class="keyword">int</span>(*n.xptr))&#123;<span class="comment">//copy constructor</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Calling copy constructor..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    ~IntNum()&#123; <span class="comment">//destructor</span></span><br><span class="line">    <span class="keyword">delete</span> xptr;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Destructing..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getInt</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *xptr; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> *xptr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//return IntNum class object</span></span><br><span class="line"><span class="function">IntNum <span class="title">getNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">IntNum a;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;getNum().getInt()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>version 2:</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntNum</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    IntNum(<span class="keyword">int</span> x = <span class="number">0</span>) : xptr(<span class="keyword">new</span> <span class="keyword">int</span>(x))&#123; <span class="comment">//constructor</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Calling constructor..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">IntNum(<span class="keyword">const</span> IntNum &amp; n) : xptr(<span class="keyword">new</span> <span class="keyword">int</span>(*n.xptr))&#123; <span class="comment">// copy constructor</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Calling copy constructor..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> IntNum(IntNum &amp;&amp; n): xptr( n.xptr)&#123; <span class="comment">//move constructor</span></span><br><span class="line"> n.xptr = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Calling move constructor..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~IntNum()&#123; <span class="comment">//destructor</span></span><br><span class="line">    <span class="keyword">delete</span> xptr;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Destructing..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> *xptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return IntNum class</span></span><br><span class="line"><span class="function">IntNum <span class="title">getNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">IntNum a;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; getNum().getInt() &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="String-of-C-type"><a href="#String-of-C-type" class="headerlink" title="String of C type"></a>String of C type</h2><p>syntax:</p><ul><li>string constant</li></ul><p>const char *<strong>string name</strong>=”<em>string content</em>“</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *STRING1 = <span class="string">"program"</span></span><br></pre></td></tr></table></figure><ul><li>string array</li></ul><p>char <strong>string name</strong> = {,..,’\0’}</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">8</span>] = &#123; <span class="string">'p'</span>, <span class="string">'r'</span>, <span class="string">'o'</span>, <span class="string">'g'</span>, <span class="string">'r'</span>, <span class="string">'a'</span>, <span class="string">'m'</span>, <span class="string">'\0'</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">8</span>] = <span class="string">"program"</span>;</span><br><span class="line"><span class="keyword">char</span> str[] = <span class="string">"program"</span>;</span><br></pre></td></tr></table></figure><h2 id="String-Class"><a href="#String-Class" class="headerlink" title="String Class"></a>String Class</h2><p>syntax:</p><ul><li><p>constructor</p><ul><li><code>string()</code></li><li><code>string(const char *s)</code></li><li><code>string(const string&amp; rhs)</code></li></ul></li><li><p>operator</p><ul><li><code>s+t</code></li><li><code>s=t</code></li><li><code>s==t</code>, <code>s!=t</code>, <code>s&lt;=t</code>, <code>s&gt;=t</code>, <code>s&lt;t</code>, <code>s&gt;t</code></li><li><code>s[i]</code></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1 = <span class="string">"abc"</span>, s2 = <span class="string">"def"</span>;</span><br><span class="line"><span class="built_in">string</span> s3 = s1 + s2; <span class="comment">//"abcdef"</span></span><br><span class="line"><span class="keyword">bool</span> s4 = (s1 &lt; s2); <span class="comment">//true</span></span><br><span class="line"><span class="keyword">char</span> s5 = s2[<span class="number">1</span>]; <span class="comment">//'e'</span></span><br></pre></td></tr></table></figure><p>example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//output true or false based on the value</span></span><br><span class="line"><span class="comment">//title is notification</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *title, <span class="keyword">bool</span> value)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; title &lt;&lt; <span class="string">" returns "</span></span><br><span class="line">    &lt;&lt; (value ? <span class="string">"true"</span> : <span class="string">"false"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1 = <span class="string">"DEF"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"s1 is "</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">string</span> s2;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please enter s2: "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s2;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"length of s2: "</span> &lt;&lt; s2.length() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    test(<span class="string">"s1 &lt;= \"ABC\""</span>, s1 &lt;= <span class="string">"ABC"</span>);</span><br><span class="line">    test(<span class="string">"\"DEF\" &lt;= s1"</span>, <span class="string">"DEF"</span> &lt;= s1);</span><br><span class="line">    s2 += s1;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"s2 = s2 + s1: "</span> &lt;&lt; s2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"length of s2: "</span> &lt;&lt; s2.length() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getline"><a href="#getline" class="headerlink" title="getline"></a>getline</h3><p>getline(<em>cin</em>, <strong>string name</strong>)</p><p>getline(<em>cin</em>, <strong>string name</strong>, ‘,’)</p><p>example:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">include &lt;iostream&gt;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">string</span> city, state;</span><br><span class="line">    getline(<span class="built_in">cin</span>, city, <span class="string">','</span>);</span><br><span class="line">    getline(<span class="built_in">cin</span>, state);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"City:"</span> &lt;&lt; city &lt;&lt; “ State:<span class="string">" &lt;&lt; state &lt;&lt; endl;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This note contains the basic rules of array, pointer and string in C++.&lt;/p&gt;
&lt;h1 id=&quot;Array&quot;&gt;&lt;a href=&quot;#Array&quot; class=&quot;headerlink&quot; title=&quot;Arr
      
    
    </summary>
    
      <category term="Computer Science" scheme="http://yoursite.com/categories/Computer-Science/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Computer-Science/Programming/"/>
    
      <category term="C++" scheme="http://yoursite.com/categories/Computer-Science/Programming/C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="MOOC" scheme="http://yoursite.com/tags/MOOC/"/>
    
  </entry>
  
  <entry>
    <title>Useful Distributions</title>
    <link href="http://yoursite.com/2019/02/15/Useful%20Distributions/"/>
    <id>http://yoursite.com/2019/02/15/Useful Distributions/</id>
    <published>2019-02-15T05:00:00.000Z</published>
    <updated>2019-09-05T20:35:15.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Useful-Distributions"><a href="#Useful-Distributions" class="headerlink" title="Useful Distributions"></a>Useful Distributions</h1><h2 id="Discrete"><a href="#Discrete" class="headerlink" title="Discrete"></a>Discrete</h2><p>Here are some useful <em>distributions</em> of <strong><em>discrete random variables</em></strong> which have distinct expected values and variances. A discrete uniform random variable represents the occurrence of a value between number a and b when all values in the set ${a; a + 1; a + 2; …; b}$ have equal probability.</p><h3 id="Uniform-Distribution"><a href="#Uniform-Distribution" class="headerlink" title="Uniform Distribution"></a>Uniform Distribution</h3><h3 id="Bernoulli-Distribution"><a href="#Bernoulli-Distribution" class="headerlink" title="Bernoulli Distribution"></a>Bernoulli Distribution</h3><h3 id="Binomial-Distribution"><a href="#Binomial-Distribution" class="headerlink" title="Binomial Distribution"></a>Binomial Distribution</h3><p>A binomial random variable represents the number of successes in a sequences of $n$ experiments when each trial is independently a success with probability $p$.</p><h3 id="Poisson-Distribution"><a href="#Poisson-Distribution" class="headerlink" title="Poisson Distribution"></a>Poisson Distribution</h3><p>A Poisson random variable represents the number of events occurring in a fixed period of time with expected number of occurrences $\lambda t$ when events occur with a known average rate $\lambda$ (per unit time) and are independent since the last event.</p><ul><li><p>memorylessness</p><p>Shortfall distribution:</p><script type="math/tex; mode=display">P(\tau > t+s | \tau > s) = \frac{e^{-\lambda(t+s)}}{e^{-\lambda s}}                          = e^{-\lambda t}</script></li></ul><h3 id="Geometric-Distribution"><a href="#Geometric-Distribution" class="headerlink" title="Geometric Distribution"></a>Geometric Distribution</h3><p>A geometric random variable represents the trial number ($n$) to get the rst success when each trial is independently a success with probability $p$.</p><h3 id="Negative-binomial-distribution"><a href="#Negative-binomial-distribution" class="headerlink" title="Negative binomial distribution"></a>Negative binomial distribution</h3><p>A negative binomial random variable represents the trial number to get the $r^{th}$ success when each trial is independently a success with probability $p$.</p><h3 id="Pascal-Distribution"><a href="#Pascal-Distribution" class="headerlink" title="Pascal Distribution"></a>Pascal Distribution</h3><h3 id="Hypergeometric-Distribution"><a href="#Hypergeometric-Distribution" class="headerlink" title="Hypergeometric Distribution"></a>Hypergeometric Distribution</h3><h2 id="Continuous"><a href="#Continuous" class="headerlink" title="Continuous"></a>Continuous</h2><p>Here are some useful <em>distributions</em> of <strong><em>discrete random variables</em></strong> which have distinct expected values and variances.</p><h3 id="Uniform-Distribution-1"><a href="#Uniform-Distribution-1" class="headerlink" title="Uniform Distribution"></a>Uniform Distribution</h3><p>A continuous uniform random variable describes a random variable uniformly distributed over the interval $[a, b]$.</p><h3 id="Gauss-Distribution-Normal-Distribution"><a href="#Gauss-Distribution-Normal-Distribution" class="headerlink" title="Gauss Distribution (Normal Distribution)"></a>Gauss Distribution (Normal Distribution)</h3><p>Due to the central limit theorem, the normal distribution/Gaussian distribution is by far the most popular continuous distribution.</p><script type="math/tex; mode=display">\begin{align*}f(x)=\frac{1}{\sqrt{2 \pi}}\end{align*}</script><h3 id="Exponential-Distribution"><a href="#Exponential-Distribution" class="headerlink" title="Exponential Distribution"></a>Exponential Distribution</h3><p>The exponential distribution models <strong>the arrival time of an event</strong> if is has a constant arrival rate $\lambda$.</p><h3 id="Gamma-Distribution"><a href="#Gamma-Distribution" class="headerlink" title="Gamma Distribution"></a>Gamma Distribution</h3><p>The gamma distribution with parameters $(\alpha, \lambda)$ often arises in practice, as the distribution of the amount of time one has to wait until a total of n events occur.</p><h3 id="Beta-Distribution"><a href="#Beta-Distribution" class="headerlink" title="Beta Distribution"></a>Beta Distribution</h3><p>The beta distribution is used to model events that are constrained within a defined interval. By adjusting the shape parameters $\alpha$ and $\beta$, it can model different shapes of probability distributions.</p><h3 id="chi-2-Distribution"><a href="#chi-2-Distribution" class="headerlink" title="$\chi^2$ Distribution"></a>$\chi^2$ Distribution</h3><h3 id="Cauchy-Distribution"><a href="#Cauchy-Distribution" class="headerlink" title="Cauchy Distribution"></a>Cauchy Distribution</h3><h3 id="Weibull-Distribution"><a href="#Weibull-Distribution" class="headerlink" title="Weibull Distribution"></a>Weibull Distribution</h3><h3 id="Rayleigh-Distribution"><a href="#Rayleigh-Distribution" class="headerlink" title="Rayleigh Distribution"></a>Rayleigh Distribution</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Useful-Distributions&quot;&gt;&lt;a href=&quot;#Useful-Distributions&quot; class=&quot;headerlink&quot; title=&quot;Useful Distributions&quot;&gt;&lt;/a&gt;Useful Distributions&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Mathematics" scheme="http://yoursite.com/categories/Mathematics/"/>
    
      <category term="Probability" scheme="http://yoursite.com/categories/Mathematics/Probability/"/>
    
    
      <category term="Probability" scheme="http://yoursite.com/tags/Probability/"/>
    
      <category term="Statistics" scheme="http://yoursite.com/tags/Statistics/"/>
    
      <category term="Stochastic" scheme="http://yoursite.com/tags/Stochastic/"/>
    
  </entry>
  
  <entry>
    <title>Random Variables and Distribution</title>
    <link href="http://yoursite.com/2019/02/14/Random%20Variables%20and%20Distribution/"/>
    <id>http://yoursite.com/2019/02/14/Random Variables and Distribution/</id>
    <published>2019-02-14T05:00:00.000Z</published>
    <updated>2019-08-13T02:35:39.878Z</updated>
    
    <content type="html"><![CDATA[<p>This note contains basic knowledge of random variables and distribution, including random variables, expected values, variance, covariance, and other characteristic values. Except the covariance, other conceptions are about one random variable.</p><h1 id="Random-Variables-and-Distribution"><a href="#Random-Variables-and-Distribution" class="headerlink" title="Random Variables and Distribution"></a>Random Variables and Distribution</h1><h2 id="Random-Variables"><a href="#Random-Variables" class="headerlink" title="Random Variables"></a>Random Variables</h2><p>Numerical quantities whose values are determined by the outcome of the experiment are known as <em>random variables</em>. Hence, we can assign probabilities to their possible values. The set of this probabilities is <em>distribution</em>.</p><p>In fact, random variables can be <em>discrete</em> or <em>continuous</em>. The possible values of <strong><em>discrete random variables</em></strong> constituted sets of discrete values, whereas <strong><em>continuous random variables</em></strong> whose set of possible values is instead a continuous region can take on any value within some interval.</p><p>Actually, the distribution differs random variables from general variables in calculus. A random variable must have its own distribution.</p><h2 id="Distribution"><a href="#Distribution" class="headerlink" title="Distribution"></a>Distribution</h2><p>For discrete variables, the distribution is a sequence form. If $X$ is a discrete random variable whose possible values are $x_1, x_2,…,x_n$, then the set of probabilities $P\{X=x_j\}$$(j=1,…,n)$ is called the <em>probability distribution of discrete random variable</em>. Since $X$ must assume one of these values, it follows that</p><script type="math/tex; mode=display">\begin{equation*}\displaystyle{\sum_{j=1}^{n}}~P\{X = x_j\} = 1.\end{equation*}</script><p>For continuous variables, the distribution is a function form. Every continuous random variable $X$ has a function $f$ associated with it. This function $f$ is called the <em>probability density function</em> of $X$. For any numbers $a&lt;b$, the area under $f$ between $a$ and $b$ is equal to the probability that $X$ assumes a value between $a$ and $b$.</p><script type="math/tex; mode=display">P\{a \leq X \leq b \} = area ~ under ~ f ~ between ~ a ~ and ~ b</script><h2 id="Distribution-Function"><a href="#Distribution-Function" class="headerlink" title="Distribution Function"></a>Distribution Function</h2><p>If $X$ is a random variable, for any real number x, we define</p><script type="math/tex; mode=display">F(x) = P(X \leq x)</script><p>as the <strong>distribution function</strong> of random variable $X$, which is also called $X$ is denoted by $F(x)$, or $X \sim F(x)$. Sometimes, $F_{X}(x)$ is the same meaning. Sometimes it is also called <strong>cumulative distribution function</strong>(<strong>CDF</strong>).</p><p>Any random variable has its own distribution function, no matter it is discrete or continuous. And here are three fundamental properties.</p><ul><li><p>monotonicity</p><p>$F(x)$ is a monotonic and  nondecreasing function on the $(-\infty, \infty)$. that is to say, for any $x_1&lt;x_2$,</p><script type="math/tex; mode=display">F(x_1) \leq F(x_2)</script></li><li><p>boundedness</p><p>For any $x$, $0 \leq F(x) \leq 1$, and</p><script type="math/tex; mode=display">\begin{align*}F(-\infty)=\lim_{x \to -\infty}F(x)=0 \\F(\infty)=\lim_{x \to \infty}F(x)=1\end{align*}</script></li><li><p>right continuity</p><p>$F(x)$ is the right-continuous function of $x$, that is to say, for any $x_0$,</p><script type="math/tex; mode=display">\lim_{x \to x_0}F(x)=F(x_0) \\F(x_0+0)=F(x_0)</script></li></ul><p>These three fundamental properties are necessary and sufficient conditions whether a function is a distribution function.</p><h2 id="Mass-amp-Density-Function"><a href="#Mass-amp-Density-Function" class="headerlink" title="Mass &amp; Density Function"></a>Mass &amp; Density Function</h2><p>For a discrete random variable $X$, the probability can be values like $x_1, x_2,…,x_n,…$, then the probability of $X$ equals $x_i$:</p><script type="math/tex; mode=display">p_i = p_i(x_i)=P(X=x_i),~~i=1,2,...,n,...</script><p>is called the sequence of probability distribution, or the <strong>probability mass function</strong> of $X$. The abbreviation is <strong>PMF</strong>. </p><p>And the cumulative distribution function of $X​$ is:</p><script type="math/tex; mode=display">F(x)=\sum_{x_i \leq x}p(x_i)</script><p>For a continuous random variable $X$, the cumulative distribution function of is $F(x)$, if $\exists$ a nonnegative integrable function $p(x)$, such that for any real number $x$,</p><script type="math/tex; mode=display">F(x)=\int_{-\infty}^{x}p(t)dt</script><p>then $p(x)$ is called the <strong>probability density function</strong> of $X$, sometimes the a shorter name is <strong>density</strong> or <strong>PDF</strong>.</p><p>And here are two fundamental properties to determine whether a function is a probability density function or not.</p><ul><li>non-negativity</li></ul><script type="math/tex; mode=display">p(x) \geq 0</script><ul><li>regularity</li></ul><script type="math/tex; mode=display">\int_{-\infty}^{\infty}p(x)dx=1</script><h1 id="Expected-Values"><a href="#Expected-Values" class="headerlink" title="Expected Values"></a>Expected Values</h1><p>If X is a random variable whose possible values are $x_1, x_2,…,x_n​$, then the expected value of $X​$, denoted by $E[X]​$, is defined by</p><script type="math/tex; mode=display">\begin{equation*}E[X] = \displaystyle{\sum_{j=1}^{n}}~{x_j}P\{X = x_j\}\end{equation*}</script><p>$E[X]​$ also has alternative names: <em>expectation</em> or the <em>mean</em> of $X​$. It is a kind of weighted average of possible values of $X​$, where the weight given to a value is equal to the probability that $X​$ assumes that value.</p><p>Actually we can define it more accurately. For an infinite sequence of discrete random variables $p(x_i)=P(X=x_i), i=1,2,…,n,…$, if </p><script type="math/tex; mode=display">\sum_{i=1}^{\infty}|x_i|p(x_i)<\infty</script><p>then</p><script type="math/tex; mode=display">E(x)=\sum_{i=1}^{\infty}x_ip(x_i)</script><p>is called the <strong>expected values</strong>. If $\sum_{i=1}^{\infty}|x_i|p(x_i)$ is not convergent, then the expected values of $X​$ is not existent.</p><p>For continuous random variables $X$, its density function is $p(x)$. If</p><script type="math/tex; mode=display">\int_{-\infty}^{\infty}|x|p(x)dx<\infty</script><p>then</p><script type="math/tex; mode=display">E(X)=\int_{-\infty}^{\infty}xp(x)dx</script><p>is called the <strong>expected values</strong>. If $\int_{-\infty}^{\infty}|x|p(x)dx$ is not convergent, then the expected values of $X$ is not existent.</p><p>If PMF or PDF of a random variable $X$ is $p(x_i)$ or $p(x)$, then the expected value of a function $g(X)$ of $X$ is:</p><script type="math/tex; mode=display">E[g(X)]= \left\{\begin{align*}&\sum_{i}g(x_i)p(x_i) ~~~ &\text{for discrete } \\&\int_{-\infty}^{\infty}g(x)p(x)dx ~~~ &\text{for continuous}\end{align*}\right.</script><p>Here are some attributes of expectation. The first one is the linear attribute, which means that, for constants $a$ and $b$,</p><script type="math/tex; mode=display">E[aX+b]=aE[X]+b</script><p>To verify it, let $Y = aX + b​$. Since $Y = ax_j + b​$ when $ X = x_j ​$, it follows that</p><script type="math/tex; mode=display">\begin{align*}E[Y] &= \sum_{j=1}^{n} (ax_j + b) P\{X = x_j\} \\     &= \sum_{j=1}^{n}  ax_j P\{X = x_j\} ~ + ~ \sum_{j=1}^{n}b P\{X = x_j\} \\     &= a\sum_{j=1}^{n}  x_j P\{X = x_j\} ~ + ~ b\sum_{j=1}^{n} P\{X = x_j\} \\     &= aE[X] + b\end{align*}</script><p>And similarly, for random variables $X_1, …, X_k$,</p><script type="math/tex; mode=display">E\left[\sum_{j=1}^{k} X_j \right] = \sum_{j=1}^{k}E[X_j]</script><p>If $X$ and $Y$ are independent, then</p><script type="math/tex; mode=display">E[g(X)h(Y)]=E[g(X)]E[h(Y)]</script><h1 id="Variance"><a href="#Variance" class="headerlink" title="Variance"></a>Variance</h1><p>The <em>variance</em> of $X$, denoted by $Var(X)$, which measure the spread of a random variable, is defined by</p><script type="math/tex; mode=display">\begin{align*}Var(X) &= E[(X - E(X))^2] \\       &= E[X^2]-E[X]^2\end{align*}</script><p>If a and b are constants, then </p><script type="math/tex; mode=display">\begin{align*}Var(aX+b) &= E[(aX+b- E[aX+b])^2] \\          &= E[(aX - aE[X])^2] \\          &= E[a^2(X-E[X])^2] \\          &= a^2Var(X)\end{align*}</script><p>And if the <strong><em>random variables are independent</em></strong>, the variance of the sum of random variables is equal to the sum of their variances ($X_1,…X_k$ are <em>independent random variables</em>)</p><script type="math/tex; mode=display">Var\left(\sum_{j=1}^{k} X_j \right) = \sum_{j=1}^{k} Var(X_j)</script><p>The square root of the variance is called the <em>standard deviation</em>. A random variable tend s to lie within a few standard deviations of its expected value.</p><h1 id="Covariance"><a href="#Covariance" class="headerlink" title="Covariance"></a>Covariance</h1><p>The covariance of any two random variables $X$ and $Y$, denoted by $Cov(X,Y)$, is defined by</p><script type="math/tex; mode=display">\begin{align*}Cov(X,Y) &= E[(X-E[X])(Y-E[Y])] \\         &= E[XY-YE[X]-XE[Y]+E[X]E[Y]] \\         &= E[XY]-E[Y]E[X]-E[X]E[Y]+E[X]E[Y \\         &= E[XY]-E[X]E[Y]\end{align*}</script><p>A positive value of the covariance indicates that X and Y both tend to be large at the same time, whereas a negative value indicates that when one is large the other tends to be small. Independent random variables have covariance equal to 0. </p><p>The following are some useful properties of covariance. For random variables $X$ and $Y$, and constant $c$:</p><script type="math/tex; mode=display">\begin{align*}Cov(X,Y) &= Cov(Y,X) \\Cov(X,X) &= Var(X) \\Cov(cX,Y) &= c~Cov(X,Y) \\Cov(c, Y) &= 0\end{align*}</script><p>Covariance also satisfies a linearity property, namely,</p><script type="math/tex; mode=display">\begin{align*}Cov(X_1+X_2,Y) = Cov(X_1,Y)+Cov(X_2,Y)\end{align*}</script><p>which is easily generalized to yield the following identity:</p><script type="math/tex; mode=display">Cov\left( \sum_{i=1}^{n} X_i, \sum_{j=1}^{m}Y_j \right) = \sum_{i=1}^{n}\sum_{j=1}^{m}Cov(X_i,Y_j)</script><p>This yields a useful formula for <strong>the variance of the sum of random variables</strong>:</p><script type="math/tex; mode=display">\begin{align*}Var\left(\sum_{i=1}^{n} X_i \right) &= Cov\left( \sum_{i=1}^{n} X_i, \sum_{j=1}^{n}X_j \right) \\&= \sum_{i=1}^{n}\sum_{j=1}^{n}Cov(X_i,X_j) \\&= \sum_{i=1}^{n}Cov(X_i,X_i)+\sum_{i=1}^{n}\sum_{j \neq i}Cov(X_i,X_j) \\&= \sum_{i=1}^{n}Var(X_i)+\sum_{i=1}^{n}\sum_{j \neq i}Cov(X_i,X_j)\end{align*}</script><p>The degree to which large values of $X$ tend to be associated with large values of $Y$ is measured by the <em>correlation</em> between $X$ and $Y$, denoted as $\rho(X,Y)$ and defined by</p><script type="math/tex; mode=display">\rho(X,Y) = \frac{Cov(X,Y)}{\sqrt{Var(X)Var(Y)}}</script><p>It can be shown that</p><script type="math/tex; mode=display">-1 \le \rho(X, Y) \le 1</script><p>If X and Y are linearly related by the equation $Y = a + bX$ , then $\rho(X,Y)$ will equal 1 when $b$ is positive and -1 when $b$ is negative.</p><h1 id="Coefficient-of-Variation"><a href="#Coefficient-of-Variation" class="headerlink" title="Coefficient of Variation"></a>Coefficient of Variation</h1><p>Provided the 2-order moment of $X$ exists, then</p><script type="math/tex; mode=display">C_{v}(X)=\frac{\sqrt{Var(X)}}{E(X)}=\frac{\sigma(X)}{E(X)}</script><p>is called the <strong>coefficient of variation</strong> of $X$.</p><h1 id="Quantile"><a href="#Quantile" class="headerlink" title="Quantile"></a>Quantile</h1><p>If the distribution function of a continuous random variable of $X$ is $F(x)$, the density function is $p(x)$, for $\forall ~ p \in (0,1)$, then call the $x_p$ which satisfies</p><script type="math/tex; mode=display">F(x_p)=\int_{-\infty}^{x_p}p(x)dx=p</script><p>is the <strong>$p$ quantile</strong> of this distribution, also the <strong>lower $p$ quantile</strong>.  In fact, the left area of the density function which is divided into two part by the $x_p$ equals exactly $p$. Similarly, if $x’_p$ satisfies</p><script type="math/tex; mode=display">1-F(x'_p)=\int_{x'_p}^{\infty}p(x)dx=p</script><p>it is called the <strong>higher $p$ quantile</strong>. They have such a relationship:</p><script type="math/tex; mode=display">x'_p=x_{1-p} \\x_p=x'_{1-p}</script><h1 id="K-Order-Moment"><a href="#K-Order-Moment" class="headerlink" title="K-Order Moment"></a>K-Order Moment</h1><p>Considering a random variable $X$, $k$ is a positive integer, if the expected values below both exist, then</p><script type="math/tex; mode=display">\mu_{k}=E(X^k)</script><p>is called <strong>$k​$-order origin moment of $X​$</strong>.</p><script type="math/tex; mode=display">v_k=E(X-E(X))^k</script><p>is called <strong>$k$-order central moment of $X$</strong>.</p><p>Obviously, the one-order origin moment is the expected value, and the two-order central moment is the variance. Because of $|X|^{k-1} \leq |X|^k+1​$, if a k-order moment exists, a k-1-order moment also exists.</p><p>There is a simple equation between the origin moment and the central moment:</p><script type="math/tex; mode=display">v_k=E(X-E(X))^k=E(X-\mu_1)^k=\sum_{i=0}^k\left(_i ^k\right)\mu_i(-\mu_1)^{k-i}</script><h2 id="Moment-generating-function"><a href="#Moment-generating-function" class="headerlink" title="Moment generating function"></a>Moment generating function</h2><p>There is a moment generating functions for both discrete and continuous distribution:</p><script type="math/tex; mode=display">\begin{align*}M(t)=E \left[ e^{tX}\right] = \end{align*}</script><p>Sequentially taking derivatives of $M(t)$, we get one frequently used property of $M(t)$:</p><script type="math/tex; mode=display">\begin{align*}M'(t) \\M''(t) \\M^{n}(t)\end{align*}</script><h1 id="Median"><a href="#Median" class="headerlink" title="Median"></a>Median</h1><p>If the distribution function of a continuous random variable of $X$ is $F(x)$, the density function is $p(x)$, we call $x_p$ which satisfy the $p= 0.5$ as median, that is to say, $x_{0.5}​$ satisfy:</p><script type="math/tex; mode=display">F(x_{0.5})=\int_{-\infty}^{x_{0.5}}p(x)dx=0.5</script><h1 id="Skewness"><a href="#Skewness" class="headerlink" title="Skewness"></a>Skewness</h1><p>If all the first 3-order moments of a random variable $X$ exist, then</p><script type="math/tex; mode=display"></script><h1 id="Kurtosis"><a href="#Kurtosis" class="headerlink" title="Kurtosis"></a>Kurtosis</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This note contains basic knowledge of random variables and distribution, including random variables, expected values, variance, covarianc
      
    
    </summary>
    
      <category term="Mathematics" scheme="http://yoursite.com/categories/Mathematics/"/>
    
      <category term="Probability" scheme="http://yoursite.com/categories/Mathematics/Probability/"/>
    
      <category term="Probability Theory" scheme="http://yoursite.com/categories/Mathematics/Probability/Probability-Theory/"/>
    
    
      <category term="Probability" scheme="http://yoursite.com/tags/Probability/"/>
    
      <category term="Statistics" scheme="http://yoursite.com/tags/Statistics/"/>
    
  </entry>
  
  <entry>
    <title>NYU Tandon Webinar</title>
    <link href="http://yoursite.com/2019/02/11/NYU%20Tandon%20Webinar/"/>
    <id>http://yoursite.com/2019/02/11/NYU Tandon Webinar/</id>
    <published>2019-02-11T16:00:00.000Z</published>
    <updated>2019-02-12T16:29:34.943Z</updated>
    
    <content type="html"><![CDATA[<p>NYU Tandon Engineering Admitted Student Webinar</p><p>I attended the NYU Engineering Webinar which introduces some basic information of NYU as well as Tandon Engineering school, life in NYC, future opportunities and the next steps for admitted students. Here are some impressive slides.</p><ul><li><strong>NYU has 3 portal campuses and 11 global academic centers where NYU students have access to the academic resources.</strong></li></ul><p><a href="https://i.loli.net/2019/02/13/5c62ee0a0f673.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/02/13/5c62ee0a0f673.png" alt="NYU Without Wall.png"></a></p><ul><li><strong>Numbers of NYU speak for themselves. </strong></li></ul><p><a href="https://i.loli.net/2019/02/13/5c62ee0a45c90.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/02/13/5c62ee0a45c90.png" alt="NYU Rank.png"></a></p><ul><li><strong>The life in New York city will be fabulous.</strong></li></ul><p><a href="https://i.loli.net/2019/02/13/5c62ee0a431c3.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/02/13/5c62ee0a431c3.png" alt="NYU Life in NYC.png"></a></p><ul><li><strong>The value of graduates from NYU Tandon School of Engineering</strong> </li></ul><p><a href="https://i.loli.net/2019/02/13/5c62ee0a3ff12.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/02/13/5c62ee0a3ff12.png" alt="NYU Graduate.png"></a></p><ul><li><strong>The cost is a relatively tremendous burden for me and my family, which push me a lot.</strong> </li></ul><p><a href="https://i.loli.net/2019/02/13/5c62ee09e4523.png" target="_blank" rel="noopener"><img src="https://i.loli.net/2019/02/13/5c62ee09e4523.png" alt="NYU Cost.png"></a></p><p>Finally, here is a quote from Andrew Hamilton, NYU President, I want to share with you.</p><blockquote><p>Here at NYU, we should remind ourselves who are we as a community: We reject intimidation and discrimination; we strive for diversity and inclusiveness; and we are a community in which each person takes as his or her responsibility the welfare and well-being of others, irrespective of citizenship, faith, race, national origin, gender, sexual orientation, or any of the other identities that might, but surely need not, divide us.</p></blockquote><p>Such a varied and inclusive culture in NYU really fascinates me.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;NYU Tandon Engineering Admitted Student Webinar&lt;/p&gt;
&lt;p&gt;I attended the NYU Engineering Webinar which introduces some basic information of 
      
    
    </summary>
    
      <category term="Thoughts" scheme="http://yoursite.com/categories/Thoughts/"/>
    
      <category term="Personal Journals" scheme="http://yoursite.com/categories/Thoughts/Personal-Journals/"/>
    
    
      <category term="Journal" scheme="http://yoursite.com/tags/Journal/"/>
    
  </entry>
  
  <entry>
    <title>Verbal Advantage Level 2</title>
    <link href="http://yoursite.com/2019/02/10/Level%202/"/>
    <id>http://yoursite.com/2019/02/10/Level 2/</id>
    <published>2019-02-10T16:00:00.000Z</published>
    <updated>2019-03-21T10:30:02.693Z</updated>
    
    <content type="html"><![CDATA[<h3 id="advocate"><a href="#advocate" class="headerlink" title="advocate"></a>advocate</h3><ul><li>support, plead for, be in favor of, defend by argument</li><li>synonym: champion, endorse, espouse</li><li>compare:<ul><li>vocation</li><li>avocation</li><li>vocational</li><li>convoke: convocation: calling together and been summoned</li><li>evoke: call out, call forth, summon</li><li>evocative: calling forth a response</li></ul></li><li>tips:<ul><li>an advocate</li><li>to advocate</li></ul></li></ul><h3 id="delegate"><a href="#delegate" class="headerlink" title="delegate"></a>delegate</h3><ul><li>entrust with authority or power, deliver to another’s care or management</li><li>tips:<ul><li>the executive  director delegated various managerial duties to her assistant.</li><li>our department chief has trouble letting go of the reins and delegating responsibility.</li></ul></li></ul><h3 id="unprecedented"><a href="#unprecedented" class="headerlink" title="unprecedented"></a>unprecedented</h3><ul><li>unheard-of, novel, new, having no precedent pr parallel, having no prior example</li><li>compare:<ul><li>precedent</li><li>unprecedented: without a precedent</li></ul></li></ul><h3 id="poignant"><a href="#poignant" class="headerlink" title="poignant"></a>poignant</h3><ul><li>piercing, sharp, biting, penetrating, keen</li><li>tips:<ul><li>keenly affecting the senses<ul><li>a poignant odor, poignant beauty, a poignant look</li></ul></li><li>penetrating to the feelings, emotionally touching, painfully moving<ul><li>a poignant drama, a poignant family reunion</li></ul></li><li>biting, cutting, acute, piercingly effective<ul><li>poignant wit, poignant delight, poignant critique</li></ul></li></ul></li><li>compare:<ul><li>puncture: pierce</li><li>pungent: piercing to the smell or taste</li><li>expunge: punch out, erase, delete<ul><li>the editor expunged all potentially offensive and derogatory material from the book</li></ul></li></ul></li></ul><h3 id="nebulous"><a href="#nebulous" class="headerlink" title="nebulous"></a>nebulous</h3><ul><li>unclear, vague, obscure, hazy, indefinite, indistinct</li><li>tips:<ul><li>nebula: nebulae[pl]</li><li>nebular: cloudy, misty, vaporous</li><li>nebulous: vague, indefinite, unclear<ul><li>nebulous writing, nebulous idea, nebulous purpose or goal</li></ul></li></ul></li></ul><h3 id="clandestine"><a href="#clandestine" class="headerlink" title="clandestine"></a>clandestine</h3><ul><li>kept secret, done in secrecy, especially for an evil, immoral, or illegal purpose</li><li>synonyms:<ul><li>private, concealed, covert, underhand, sly, stealthy, furtive, surreptitious</li></ul></li><li>tips:<ul><li>a clandestine affair</li><li>a clandestine business deal</li><li>a clandestine intelligence operation</li></ul></li></ul><h3 id="tirade"><a href="#tirade" class="headerlink" title="tirade"></a>tirade</h3><ul><li>a long-drawn-out speech, especially a vehement and abusive one (protracted, vituperative, censorious)</li><li>tips:<ul><li>after suffering through yet another one of his boss’s frequent tirades, Joe decided it was time to quit and move on.</li></ul></li></ul><h3 id="recur"><a href="#recur" class="headerlink" title="recur"></a>recur</h3><ul><li>happen again, occur again, especially at intervals or after some lapse of time.</li><li>compare:<ul><li>reoccur: suggests a one-time repetition</li><li>recur: suggests repetition more than once</li></ul></li></ul><h3 id="tacit"><a href="#tacit" class="headerlink" title="tacit"></a>tacit</h3><ul><li>unspoken, silent, implied, understood without words</li><li>tips:<ul><li>a tacit consent: approval given without words</li><li>a tacit agreement: unspoken understanding</li><li>taciturn, reserved, uncommunicative, inclined to hold one’s tongue</li></ul></li></ul><h3 id="allegation"><a href="#allegation" class="headerlink" title="allegation"></a>allegation</h3><ul><li>an assertion or declaration, especially one made without proof</li><li>tips:<ul><li>law: an assertion of what one intends to prove <ul><li>The judge dismissed the allegations.</li><li>a spokesperson for the company today denied the allegations of wrongdoing regarding the firm’s hiring practices.</li></ul></li></ul></li></ul><h3 id="gullible"><a href="#gullible" class="headerlink" title="gullible"></a>gullible</h3><ul><li>easily deceived, fooled, or cheated</li><li>compare:<ul><li>credulous: willing to accept something as true without questioning</li><li>gull: take advantage of someone  who is foolish, unwary or inexperienced</li><li>dupe: unwariness on the part of the victim</li></ul></li></ul><h3 id="benign"><a href="#benign" class="headerlink" title="benign"></a>benign</h3><ul><li>kindly, good-natured, gracious, mild, having or showing a gentle disposition</li><li>tips:<ul><li>a benign old man, benign smile, benign intention, a benign government</li><li>favorable, positive, propitious<ul><li>a benign omen, benign view</li><li>a benign weather/climate</li><li>a benign tumor, a benign disease</li></ul></li></ul></li></ul><h3 id="peripheral"><a href="#peripheral" class="headerlink" title="peripheral"></a>peripheral</h3><ul><li><p>external, outer, lying at or forming the outside or boundary of something -&gt; not essential, irrelevant</p></li><li><p>tips:</p><ul><li>periphery: boundary, external surface or area<ul><li>literally: exploring the periphery of the polar icecap</li><li>figuratively: the periphery of consciousness, the periphery of one’s sphere of influence</li></ul></li><li>peripheral:<ul><li>in the literal sense: lying at the edge, on the boundary</li><li>in the figurative sense: peripheral issues, peripheral points, peripheral considerations</li></ul></li></ul></li></ul><h3 id="rebuff"><a href="#rebuff" class="headerlink" title="rebuff"></a>rebuff</h3><ul><li>refuse bluntly, reject sharply, turn down abruptly, snub, spurn</li><li>tips:<ul><li>in colloquial terms: rebuff means to give the cold shoulder to, slam the door on</li></ul></li></ul><h3 id="animosity"><a href="#animosity" class="headerlink" title="animosity"></a>animosity</h3><ul><li>ill will, hostility, antagonism, strong dislike or hatred</li><li>tips:<ul><li>There was long-standing animosity between the two families</li><li>after her coworker apologized for his rude remarks, she resolved not to harbor any animosity toward him.</li></ul></li><li>synonyms: malice, aversion, malevolence, antipathy, rancor, enmity</li></ul><h3 id="tenuous"><a href="#tenuous" class="headerlink" title="tenuous"></a>tenuous</h3><ul><li>thin, slender, slight, flimsy, weak, not dese or substantial, lacking a strong basis.</li><li>tips:<ul><li>scientific: air is tenuous/thin. Certain fluids or compounds are said to be tenuous</li><li>a tenuous grip, a tenuous proposal, a tenuous argument, tenuous construction</li></ul></li></ul><h3 id="complacent"><a href="#complacent" class="headerlink" title="complacent"></a>complacent</h3><ul><li>self-satisfied, smug, overly pleased with oneself</li><li>tips:<ul><li>A complacent smile is a smug, self-satisfied smile.</li><li>A complacent behavior is self-centered and disregards others’ concerns.</li><li>A complacent ignorant person is completely satisfied with his ignorance.</li></ul></li><li>compare:<ul><li>complaisant: inclined to please, gracious, obliging, courteous, affable, urbane.(positive connotation)</li><li>complacent:(negative connotation)</li></ul></li></ul><h3 id="acme"><a href="#acme" class="headerlink" title="acme"></a>acme</h3><ul><li>peak, highest point, summit, zenith, especially the  point of culmination, the highest possible point in the development or progress of something.</li><li>tips:<ul><li>figuratively: <ul><li>the acme of his career</li><li>a company at the acme of the industry</li></ul></li><li>acmatic<ul><li>acmatic scientific breakthrough</li></ul></li></ul></li><li>antonym: nadir</li></ul><h3 id="defunct"><a href="#defunct" class="headerlink" title="defunct"></a>defunct</h3><ul><li><p>dead, extinct, obsolete, no longer in existence, effect, operation, use</p></li><li><p>tips:</p><ul><li>defunct law</li><li>defunct organization</li><li>defunct factory/procedure</li><li>defunct species/person</li><li>defunct expression/idea</li></ul></li></ul><h3 id="abet"><a href="#abet" class="headerlink" title="abet"></a>abet</h3><ul><li>encourage, support, help, aid, promote, assist in achieving a purpose</li><li>tips:<ul><li>especially to encourage or assist in wrongdoing<ul><li>to aid and abet: assist a criminal in the commission of a crime</li></ul></li><li>favorably:<ul><li>to abet the cause of justice</li><li>to abet the committee’s efforts to get the plan approved</li></ul></li></ul></li></ul><h3 id="haggard"><a href="#haggard" class="headerlink" title="haggard"></a>haggard</h3><ul><li><p>worn out, tired, gaunt, drawn, emaciated</p></li><li><p>tips:</p><ul><li>a person who is haggard has a wild-eyed and wasted look, as from exhaustion, illness, or grief.</li><li>long hours at work, lack of sleep, or inadequate nutrition can easily make you haggard, worn out, tired and gaunt.</li></ul></li></ul><h3 id="waive"><a href="#waive" class="headerlink" title="waive"></a>waive</h3><ul><li><p>relinquish voluntarily, give up, forgo</p></li><li><p>compare:</p><ul><li>relinquish: giving up something one doesn’t want to part with, either out of necessity or because one has been compelled or forced<ul><li>relinquish possession</li><li>relinquish command</li></ul></li><li>waive: voluntary refusal to insist on one’s right or claim to something<ul><li>waive one’s right to a trial by jury</li><li>waive one’s claim on a title or property</li></ul></li></ul></li><li><p>tips:</p><ul><li>also meaning: postpone, defer, dispense with<ul><li>waive discussion, to waive formalities and get on with business</li></ul></li></ul></li></ul><h3 id="carnal"><a href="#carnal" class="headerlink" title="carnal"></a>carnal</h3><ul><li>bodily, pertaining to the flesh as opposed to the spirit, sensual, corporeal</li><li>tips:<ul><li>not used to mean bodily in neutral sense. Wrong using: carnal functions, carnal aches, pains</li><li>refer to basic physical appetites of the body, especially the sexual appetite<ul><li>carnal desires, carnal lust, carnal knowledge</li></ul></li></ul></li></ul><h3 id="sanction"><a href="#sanction" class="headerlink" title="sanction"></a>sanction</h3><ul><li>approve, allow, permit, authorize, certify, ratify</li><li>compare:<ul><li>ratify: officially approve something done by a representative<ul><li>ratify a treaty</li></ul></li><li>certify: officially approve compliance with requirements or standards<ul><li>a certified public accountant</li></ul></li><li>sanction: give authoritative approval: <ul><li>the company’s board of directors sanctioned the merger.</li><li>many religions do not sanction unmarried sexual relations.</li><li>law sanctions free speech but not antisocial behavior.</li></ul></li></ul></li></ul><h3 id="ambiguous"><a href="#ambiguous" class="headerlink" title="ambiguous"></a>ambiguous</h3><ul><li>uncertain, unclear, doubtful, dubious, questionable, puzzling, having an obscure or indefinite meaning</li><li>tips:<ul><li>ambiguous intention</li><li>ambiguous statement</li></ul></li><li>synonyms:<ul><li>enigmatic, cryptic, equivocal</li></ul></li><li>antonyms:<ul><li>distinct, apparent, evident, conspicuous, manifest</li></ul></li></ul><h3 id="spendthrift"><a href="#spendthrift" class="headerlink" title="spendthrift"></a>spendthrift</h3><ul><li>wasteful, spending extravagantly or foolishly, squandering one’s resources</li><li>tips:<ul><li>adjective: His spendthrift habits</li><li>noun: a wasteful person, someone who foolishly squanders money or resources</li></ul></li><li>compare:<ul><li>improvident: literally not provident, not providing for the future<ul><li>improvident person does not save money for retirement</li></ul></li><li>prodigal: spending money in a reckless or extravagant way, to support a lavish or luxurious lifestyle</li><li>profligate: extremely prodigal or spendthrift, a person who spends money with reckless abandon and lives a life shamelessly devoted to pleasure.<ul><li>a profligate Hollywood movie star</li></ul></li></ul></li></ul><h3 id="mollify"><a href="#mollify" class="headerlink" title="mollify"></a>mollify</h3><ul><li>calm, soothe, pacify, appease, soften in feeling or tone, make less harsh  or severe</li><li>tips:<ul><li>emollient<ul><li>adj: softening, soothing, mollifying</li><li>n: softening or soothing agent</li></ul></li><li>literally: make soft or tender<ul><li>mollify meat, tenderize it</li></ul></li><li>soften in feeling or tone<ul><li>mollify their demands, mollify conflicts, mollify Jack who is furious</li></ul></li></ul></li></ul><h3 id="unequivocal"><a href="#unequivocal" class="headerlink" title="unequivocal"></a>unequivocal</h3><ul><li>clear and direct, definite, straightforward, certain, a single obvious meaning</li><li>tip:<ul><li>reporters are so accustomed to equivocal answers from government officials that they are often surprised and suspicious when they get an unequivocal response.</li></ul></li></ul><h3 id="malleable"><a href="#malleable" class="headerlink" title="malleable"></a>malleable</h3><ul><li>capable of being shaped, molded or manipulated, adaptable impressionable</li><li>tips:<ul><li>literally: certain metals are malleable.</li><li>figuratively: person or abstract thing that can be molded or shaped<ul><li>malleable, impressionable, capable of being shaped</li><li>an idea my be malleable, adaptable, capable of being shaped to fit various purposed.</li></ul></li></ul></li><li><p>compare:</p><ul><li>tractable: can be pulled or hauled<ul><li>a tractable person is manageable, easily handled.</li></ul></li><li>malleable: can be hammered into shape<ul><li>a malleable person is adaptable, impressionable.</li></ul></li></ul></li><li><p>antonyms: inflexible, unyielding, stubborn, obstinate, intransigent</p></li></ul><h3 id="verbose"><a href="#verbose" class="headerlink" title="verbose"></a>verbose</h3><ul><li>wordy, having too many words, long-winded, full of verbiage</li><li>synonyms: garrulous, loquacious, voluble, prolix</li><li>tips:<ul><li>speech or writing that uses more words than necessary.</li></ul></li><li>compare:<ul><li>verbiage: n<ul><li>full of verbiage</li></ul></li><li>verbal: expressed in words, either orally or in writing<ul><li>verbal agreement, verbal understanding</li></ul></li><li>verbose: adj</li></ul></li></ul><h3 id="transient"><a href="#transient" class="headerlink" title="transient"></a>transient</h3><ul><li>temporary, passing away with time, lasting only a short while, momentary, fleeting, short-lived</li><li><p>compare:</p><ul><li>transitory: by its nature is bound to pass away or come to an end. All life must by nature end:<ul><li>life is transitory</li><li>transitory nature of fame</li></ul></li><li>evanescent: fades away like vapor or vanishes as if into thin air<ul><li>evanescent beauty of springtime flowers</li><li>an evanescent trail of light</li><li>evanescent experience can become a lifelong memory</li></ul></li><li>ephemeral: living or lasting for only a day<ul><li>ephemeral literature: newspaper writing</li><li>ephemeral memory for names</li></ul></li><li>fugitive: flee, run or fly away<ul><li>a fugitive smile; </li><li>the fugitive colors of the sunset</li></ul></li><li>fugacious: fleeting, things that are elusive<ul><li>our fugacious memories of childhood</li></ul></li></ul></li><li><p>permanent, timeless, eternal, and everlasting</p></li></ul><h3 id="nettle"><a href="#nettle" class="headerlink" title="nettle"></a>nettle</h3><ul><li><p>irritate, annoy, vex, harass, pester, provoke</p><ul><li>supervisor constantly nettled them about trivial or irrelevant detail</li></ul></li><li><p>tips:</p><ul><li>plant: tiny hairs that sting and irritate the skin</li><li>verb: sting like a nettle<ul><li>someone who is nettled to the point of silent anger or resentment</li></ul></li></ul></li></ul><h3 id="repudiate"><a href="#repudiate" class="headerlink" title="repudiate"></a>repudiate</h3><ul><li>reject, cast off, disown, renounce, refuse to accept as one’s own, reject as false, deny the authority, refuse to accept as true<ul><li>tips:<ul><li>repudiate a child, reject or disown the child</li><li>repudiate a belief, cast it off or renounce it</li><li>repudiate a claim, deny its authority</li><li>repudiate a charge, reject it as untrue</li></ul></li></ul></li></ul><h3 id="impetuous"><a href="#impetuous" class="headerlink" title="impetuous"></a>impetuous</h3><ul><li>hasty, rash, overeager, acting in a sudden, vigorous, emotional way, with little thought<ul><li>The impetuous shopper buys on impulse</li><li>a prudent investor is not likely to make impetuous decision</li></ul></li><li>compare:<ul><li>rash: reckless haste and foolish daring<ul><li>rash statements can lead to war</li></ul></li><li>impulsive: ungovernable inner force that drives one to act without thinking<ul><li>he is an impulsive talker who often puts his foot in his mouth</li></ul></li><li>impetuous: great energy eagerness or impatience<ul><li>children are often impetuous</li></ul></li></ul></li><li>antonyms: prudent, circumspect</li></ul><h3 id="frugal"><a href="#frugal" class="headerlink" title="frugal"></a>frugal</h3><ul><li>spending carefully and wisely, thrifty, economical<ul><li>frugal people are cautious and sparing with the fruit of their labors.</li></ul></li><li>compare:<ul><li>thrifty: hard work, good management as a means to prosperity<ul><li>The thrifty person spends only what is necessary and diligently saves the rest.</li></ul></li><li>economical: the use of money or resources in the most advantageous way.<ul><li>economical car uses fuel efficiently</li><li>economical investment is one that generates a higher return</li></ul></li><li>provident: providing for the future.<ul><li>provident person spends carefully with a mind toward what may be needed later</li></ul></li><li>parsimonious: extremely frugal, stingy, miserly<ul><li>the parsimonious person keeps a wary eye on every <strong>nickel and dime</strong>.</li></ul></li><li>frugal: spending carefully, involving little expense, not wasteful or lavish<ul><li>a frugal meal is an economical, no-frills meal.</li><li>flying coach rather than first-class is a more frugal way to travel</li></ul></li></ul></li></ul><h3 id="incongruous"><a href="#incongruous" class="headerlink" title="incongruous"></a>incongruous</h3><ul><li>out of place, inappropriate, inconsistent, unsuitable, lacking harmony of parts or agreement in character<ul><li>incongruous remark: inappropriate or not in keeping with the conversation</li><li>incongruous element is out of place, not consistent with the elements around it</li><li>incongruous action, incongruous mixture</li></ul></li></ul><h3 id="assuage"><a href="#assuage" class="headerlink" title="assuage"></a>assuage</h3><ul><li>relieve, ease, allay, mitigate, make less severe or intense; to satisfy, appease, make content<ul><li>assuage someone’s anger/pain/fears: relieve those conditions, allay them, make them less severe or intense.<ul><li>assuage one’s hunger or thirst</li><li>assuage one’s need or desire</li></ul></li></ul></li></ul><h3 id="corroborate"><a href="#corroborate" class="headerlink" title="corroborate"></a>corroborate</h3><ul><li>to confirm, support, make more certain or believable</li><li>compare:<ul><li>authenticate: establish sth. as authentic or genuine<ul><li>authenticate a document, a signature, or a work of art</li></ul></li><li>verify: establish as true, confirm the accuracy of<ul><li>reporters have responsibility to verify facts and quotations. </li></ul></li><li>substantiate: support by supplying reliable evidence or proof<ul><li>scholars and scientist must substantiate their theories.</li><li>investigation uncovered several key facts that substantiated the case against the company.</li></ul></li><li>corroborate: substantiate what someone else has said by supplying additional evidence or proof<ul><li>corroborate one’s statement</li></ul></li></ul></li></ul><h3 id="embellish"><a href="#embellish" class="headerlink" title="embellish"></a>embellish</h3><ul><li>decorate, dress up, adorn, enhance with ornamentation, make more beautiful, elegant or interesting<ul><li>embellish one’s home, an outfit, one’s speech, a story</li></ul></li><li>tips:<ul><li>embellishment</li></ul></li></ul><h3 id="avaricious"><a href="#avaricious" class="headerlink" title="avaricious"></a>avaricious</h3><ul><li>greedy, money-grubbing, miserly, consumed with a selfish desire to accumulate money or property</li><li>compare:(acquire more than they have or are entitled to have)<ul><li>greedy: general term for an excessive dire for anything<ul><li>be greedy for approval/success</li><li>a greedy eater</li></ul></li><li>covetous: an excessive and sometimes immoral desire for what another person has<ul><li>be covetous of one’s new car / attractive wife / spacious office and impressive salary.</li></ul></li><li>avaricious: an excessive and selfish drive to accumulate wealth and valuable possessions, with an accompanying desire to hoard them<ul><li>avaricious developers and bankers</li></ul></li></ul></li><li>tips:<ul><li>avarice, greed,  and inordinate desire for wealth</li></ul></li></ul><h3 id="cursory"><a href="#cursory" class="headerlink" title="cursory"></a>cursory</h3><ul><li>quick, hasty, not methodical, done rapidly with little attention to detail, passing quickly over or through something that deserves closer examination</li><li>synonyms: hurried, haphazard, slapdash, superficial</li><li>antonyms: thorough, careful, exhaustive, prolonged, protracted</li><li>tips:<ul><li>a cursory glance, a cursory reading, a cursory explanation, a cursory investigation</li></ul></li></ul><h2 id="vacillate"><a href="#vacillate" class="headerlink" title="vacillate"></a>vacillate</h2><ul><li>waver, fluctuate, be indecisive, show uncertainly, hesitate in making up one’s mind<ul><li>the strong leader is decisive; the weak leader vacillates</li><li>when you vacillate, you go back and forth mentally on an issue or question</li></ul></li></ul><h3 id="clement"><a href="#clement" class="headerlink" title="clement"></a>clement</h3><ul><li>mild, calm, tranquil, moderate, temperate, not severe or extreme; merciful, lenient, inclined to pardon or forgive<ul><li>weather is clement when it’s mild or temperate.(when rough or stormy it’s inclement)</li><li>mild state of mind: inclined to be lenient or forgiving</li></ul></li><li>tips:<ul><li>noun: clemency, mildness, leniency, compassion</li></ul></li></ul><h3 id="lucrative"><a href="#lucrative" class="headerlink" title="lucrative"></a>lucrative</h3><ul><li>profitable, producing wealth, money-making, financially productive, remunerative<ul><li>lucrative job pays well.</li><li>lucrative business deal is profitable.</li><li>lucrative enterprise is a money-making enterprise.</li></ul></li></ul><h3 id="allocate"><a href="#allocate" class="headerlink" title="allocate"></a>allocate</h3><ul><li>assign, designate, earmark, set aside for a specific purpose<ul><li>allocate a bedroom in the house as a home office</li><li>allocate time to spend with children</li><li>allocate funds for education, parks or libraries</li></ul></li></ul><h3 id="reconcile"><a href="#reconcile" class="headerlink" title="reconcile"></a>reconcile</h3><ul><li>make friendly again, restore friendly relations between, settle, resolve, bring into harmony or agreement<ul><li>reconcile their differences</li><li>reconciliation, a settlement, resolution, act of restoring harmony or agreement</li></ul></li><li>tips:<ul><li>bring into agreement, make consistent<ul><li>reconcile the confession of guilt with his profession of innocence</li></ul></li><li>resign oneself to accept something undesirable<ul><li>reconcile herself to live her mother-in-law</li></ul></li></ul></li></ul><h3 id="paragon"><a href="#paragon" class="headerlink" title="paragon"></a>paragon</h3><ul><li>a model of excellence, perfect example<ul><li>the Gettysburg Address is a paragon of forceful, eloquent speechwriting.</li></ul></li></ul><h3 id="analogous"><a href="#analogous" class="headerlink" title="analogous"></a>analogous</h3><ul><li>similar, akin, comparable, corresponding partially, sharing some aspects of form, function or content.<ul><li>tips: analogy, not apply to things that are identical, just similar, alike in certain ways</li></ul></li></ul><h3 id="diurnal"><a href="#diurnal" class="headerlink" title="diurnal"></a>diurnal</h3><ul><li>daily, recurring each day, performed or happening in the course of a day</li><li>tips:<ul><li>the ocean’s tides and the rotation of the earth are diurnal</li><li>diurnal duties are the tasks you perform every day</li><li>diurnal complaint/ make doing sth. part of one’s diurnal routine</li></ul></li></ul><h3 id="pretext"><a href="#pretext" class="headerlink" title="pretext"></a>pretext</h3><ul><li>an excuse, ostensible reason or motive, professed purpose</li><li>tips:<ul><li>tyrannical leaders often invent pretexts for invading or declaring war on other countries</li><li>irresponsible employees will invent pretexts for not coming to work</li><li>supervisor who hates an employee’s guts may try to come up with a pretext for firing the person</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;advocate&quot;&gt;&lt;a href=&quot;#advocate&quot; class=&quot;headerlink&quot; title=&quot;advocate&quot;&gt;&lt;/a&gt;advocate&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;support, plead for, be in favor of, defe
      
    
    </summary>
    
      <category term="Languages" scheme="http://yoursite.com/categories/Languages/"/>
    
      <category term="English" scheme="http://yoursite.com/categories/Languages/English/"/>
    
      <category term="Verbal Advantage" scheme="http://yoursite.com/categories/Languages/English/Verbal-Advantage/"/>
    
    
      <category term="English" scheme="http://yoursite.com/tags/English/"/>
    
      <category term="Vocabularies" scheme="http://yoursite.com/tags/Vocabularies/"/>
    
  </entry>
  
  <entry>
    <title>C++ Data Share &amp; Protection</title>
    <link href="http://yoursite.com/2019/01/31/C++%20Data%20Share%20&amp;%20Protection/"/>
    <id>http://yoursite.com/2019/01/31/C++ Data Share &amp; Protection/</id>
    <published>2019-01-31T16:00:00.000Z</published>
    <updated>2019-02-27T02:59:52.323Z</updated>
    
    <content type="html"><![CDATA[<p>This note contains basic knowledge of data share and protection in C++ including.</p><h1 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h1><ul><li><p>classification</p><p>function prototype scope</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">(<span class="keyword">double</span> radius)</span></span></span><br></pre></td></tr></table></figure><p>local scope</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> b = a;</span><br><span class="line">   <span class="built_in">cin</span> &gt;&gt; b;</span><br><span class="line">   <span class="keyword">if</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="keyword">int</span> c;</span><br><span class="line">     ......</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>global scope </p><p>file scope</p></li><li><p>visibility</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> i;<span class="comment">//global variable，file scope</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">     i = <span class="number">5</span>; <span class="comment">//i is a global variable (external)</span></span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">int</span> i; <span class="comment">//local scope (inner)</span></span><br><span class="line">         i = <span class="number">7</span>;</span><br><span class="line">         <span class="built_in">cout</span> &lt;&lt; <span class="string">"i = "</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//output 7</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; “i = ” &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//output 5</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Lifetime"><a href="#Lifetime" class="headerlink" title="Lifetime"></a>Lifetime</h1><ul><li>static lifetime</li><li>local lifetime</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>; <span class="comment">// i is global variable with static lifetime and global visibility.</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">other</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b;</span><br><span class="line">    <span class="comment">// a,b are static local variables, with static lifetime and local visibility</span></span><br><span class="line">    <span class="comment">// a,b will be initialized only at the first time</span></span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">10</span>; <span class="comment">// c is a local variable with local lifetime and local visibility</span></span><br><span class="line">    <span class="comment">//c will be initialized every time the "other function" is about to run.</span></span><br><span class="line">    a += <span class="number">2</span>; i += <span class="number">32</span>; c += <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"---OTHER---\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">" i: "</span>&lt;&lt;i&lt;&lt;<span class="string">" a: "</span>&lt;&lt;a&lt;&lt;<span class="string">" b: "</span>&lt;&lt;b&lt;&lt;<span class="string">" c: "</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    b = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a;<span class="comment">//a is static local variable with static lifetime and local visibility</span></span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">-10</span>; <span class="comment">// b, c are local variables with local lifetime</span></span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"---MAIN---\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">" i: "</span>&lt;&lt;i&lt;&lt;<span class="string">" a: "</span>&lt;&lt;a&lt;&lt;<span class="string">" b: "</span>&lt;&lt;b&lt;&lt;<span class="string">" c: "</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    c += <span class="number">8</span>; other();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"---MAIN---\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">" i: "</span>&lt;&lt;i&lt;&lt;<span class="string">" a: "</span>&lt;&lt;a&lt;&lt;<span class="string">" b: "</span>&lt;&lt;b&lt;&lt;<span class="string">" c: "</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    i += <span class="number">10</span>; other();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The result is below:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---MAIN---</span><br><span class="line">i: <span class="number">1</span> a: <span class="number">0</span> b: <span class="number">-10</span> c: <span class="number">0</span></span><br><span class="line">---OTHER---</span><br><span class="line">i: <span class="number">33</span> a: <span class="number">4</span> b: <span class="number">0</span> c: <span class="number">15</span></span><br><span class="line">---MAIN---</span><br><span class="line">i: <span class="number">33</span> a: <span class="number">0</span> b: <span class="number">-10</span> c: <span class="number">8</span></span><br><span class="line">---OTHER---</span><br><span class="line">i: <span class="number">75</span> a: <span class="number">6</span> b: <span class="number">4</span> c: <span class="number">15</span></span><br></pre></td></tr></table></figure><h1 id="Friend-Function-amp-Class"><a href="#Friend-Function-amp-Class" class="headerlink" title="Friend Function &amp; Class"></a>Friend Function &amp; Class</h1><h2 id="friend-function"><a href="#friend-function" class="headerlink" title="friend function"></a>friend function</h2> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> &#123;</span> <span class="comment">//Point类声明</span></span><br><span class="line"><span class="keyword">public</span>: <span class="comment">//外部接口</span></span><br><span class="line">Point(<span class="keyword">int</span> x=<span class="number">0</span>, <span class="keyword">int</span> y=<span class="number">0</span>) : x(x), y(y) &#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">float</span> <span class="title">dist</span><span class="params">(Point &amp;a, Point &amp;b)</span></span>;</span><br><span class="line"><span class="keyword">private</span>: <span class="comment">//私有数据成员</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">dist</span><span class="params">(Point&amp; a, Point&amp; b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> x = a.x - b.x;</span><br><span class="line"><span class="keyword">double</span> y = a.y - b.y;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(<span class="built_in">sqrt</span>(x * x + y * y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Point p1(1, 1), p2(4, 5);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"The distance is: "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dist(p1, p2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="friend-class"><a href="#friend-class" class="headerlink" title="friend class"></a>friend class</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">A a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> B::<span class="built_in">set</span>(<span class="keyword">int</span> i) &#123;</span><br><span class="line">a.x=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> B::display() &#123;</span><br><span class="line">a.display();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>tips:<ul><li>The friend function and class is a one-direction relationship.</li></ul></li></ul><h1 id="Shared-Data-Protection"><a href="#Shared-Data-Protection" class="headerlink" title="Shared Data Protection"></a>Shared Data Protection</h1><h2 id="const-object"><a href="#const-object" class="headerlink" title="const object"></a>const object</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> i,<span class="keyword">int</span> j) &#123;x=i; y=j;&#125;</span><br><span class="line">                     ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">A <span class="keyword">const</span> <span class="title">a</span><span class="params">(<span class="number">3</span>,<span class="number">4</span>)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="const-function"><a href="#const-function" class="headerlink" title="const function"></a>const function</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">R</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">R(<span class="keyword">int</span> r1, <span class="keyword">int</span> r2) : r1(r1), r2(r2) &#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> r1, r2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> R::print() &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; r1 &lt;&lt; <span class="string">":"</span> &lt;&lt; r2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> R::print() <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; r1 &lt;&lt; <span class="string">";"</span> &lt;&lt; r2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">R <span class="title">a</span><span class="params">(<span class="number">5</span>,<span class="number">4</span>)</span></span>;</span><br><span class="line">a.print(); <span class="comment">//调用void print()</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> R <span class="title">b</span><span class="params">(<span class="number">20</span>,<span class="number">52</span>)</span></span>; </span><br><span class="line">b.print(); <span class="comment">//调用void print() const</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="const-member"><a href="#const-member" class="headerlink" title="const member"></a>const member</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> i);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> A::b=<span class="number">10</span>;</span><br><span class="line">A::A(<span class="keyword">int</span> i) : a(i) &#123; &#125;</span><br><span class="line"><span class="keyword">void</span> A::print() &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">":"</span> &lt;&lt; b &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//建立对象a和b，并以100和0作为初值，分别调用构造函数，</span></span><br><span class="line"><span class="comment">//通过构造函数的初始化列表给对象的常数据成员赋初值</span></span><br><span class="line">A a1(100), a2(0);</span><br><span class="line">a1.print();</span><br><span class="line">a2.print();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="const-reference"><a href="#const-reference" class="headerlink" title="const reference"></a>const reference</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:          </span><br><span class="line">    Point(<span class="keyword">int</span> x = <span class="number">0</span>, <span class="keyword">int</span> y = <span class="number">0</span>)</span><br><span class="line">: x(x), y(y) &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> y; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">float</span> <span class="title">dist</span><span class="params">(<span class="keyword">const</span> Point &amp;p1,<span class="keyword">const</span> Point &amp;p2)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">dist</span><span class="params">(<span class="keyword">const</span> Point &amp;p1, <span class="keyword">const</span> Point &amp;p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x = p1.x - p2.x; </span><br><span class="line">    <span class="keyword">double</span> y = p1.y - p2.y;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(<span class="built_in">sqrt</span>(x*x+y*y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    const Point myp1(1, 1), myp2(4, 5);    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The distance is: "</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dist(myp1, myp2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This note contains basic knowledge of data share and protection in C++ including.&lt;/p&gt;
&lt;h1 id=&quot;Scope&quot;&gt;&lt;a href=&quot;#Scope&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="Computer Science" scheme="http://yoursite.com/categories/Computer-Science/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Computer-Science/Programming/"/>
    
      <category term="C++" scheme="http://yoursite.com/categories/Computer-Science/Programming/C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="MOOC" scheme="http://yoursite.com/tags/MOOC/"/>
    
  </entry>
  
  <entry>
    <title>C++ Class</title>
    <link href="http://yoursite.com/2019/01/31/C++%20Class/"/>
    <id>http://yoursite.com/2019/01/31/C++ Class/</id>
    <published>2019-01-31T16:00:00.000Z</published>
    <updated>2019-02-01T09:33:51.328Z</updated>
    
    <content type="html"><![CDATA[<p>This note contains basic knowledge of class and objects in C++ including characteristics, definition, constructor, destructor, sturcture, union and enumeration class.</p><h2 id="characteristics-of-object-oriented-programming"><a href="#characteristics-of-object-oriented-programming" class="headerlink" title="characteristics of object-oriented programming"></a>characteristics of object-oriented programming</h2><h3 id="1-abstract"><a href="#1-abstract" class="headerlink" title="1. abstract"></a>1. abstract</h3><h3 id="2-encapsulation"><a href="#2-encapsulation" class="headerlink" title="2. encapsulation"></a>2. encapsulation</h3><h3 id="3-inheritance"><a href="#3-inheritance" class="headerlink" title="3. inheritance"></a>3. inheritance</h3><h3 id="4-polymorphism"><a href="#4-polymorphism" class="headerlink" title="4. polymorphism"></a>4. polymorphism</h3><h2 id="definition-of-class-and-object"><a href="#definition-of-class-and-object" class="headerlink" title="definition of class and object"></a>definition of class and object</h2><h3 id="1-class"><a href="#1-class" class="headerlink" title="1. class"></a>1. class</h3><p>syntax:</p><ul><li>class <em>Name</em>{<br>　　public:<br>　　　　<em>public member</em> (which is also external interface)<br>　　private:<br>　　　　<em>private member</em><br>　　protected:<br>　　　　<em>protected member</em><br>}</li></ul><p>tips:</p><ul><li>Members can be provided with default values when defined. </li><li>The members without default values will be initialized.</li></ul><h3 id="2-object"><a href="#2-object" class="headerlink" title="2. object"></a>2. object</h3><p>syntax:</p><p>1. definition</p><ul><li>class Name <em>object Name</em>;</li></ul><p>2. access public members</p><ul><li>object Name.<em>member Name</em></li></ul><h3 id="3-member-function-in-class"><a href="#3-member-function-in-class" class="headerlink" title="3. member function in class"></a>3. member function in class</h3><p>syntax:</p><ul><li>class Name::<em>Name</em>{</li></ul><p>tips:</p><ul><li>declare the function prototype in the class definition</li><li>the function body can be defined outside the class  with class name to qualify.</li><li>the function can be defined in the class as an inline function.</li></ul><blockquote><p>define a class of clock.</p><pre><code>#include &lt;iostream&gt;    using namespace std;</code></pre></blockquote><pre><code>class Clock    {public:    void setTime(int newH = 0, int newM = 0, int newS = 0);    void showTime();private:    int hour, minute, second;};void Clock::setTime(int newH, int newM, int newS) {    hour = newH;    minute = newM;    second = newS;}inline void Clock::showTime() {    cout &lt;&lt; hour &lt;&lt; &quot;:&quot; &lt;&lt; minute &lt;&lt; &quot;:&quot; &lt;&lt; second &lt;&lt; endl;}int main() {    Clock myClock;    cout &lt;&lt; &quot;First time set and output:&quot; &lt;&lt; endl;    myClock.setTime();    myClock.showTime();    cout &lt;&lt; &quot;Second time set and output:&quot; &lt;&lt; endl;    myClock.setTime(8, 30, 30);    myClock.showTime();    return 0;}</code></pre><h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><p>syntax:</p><p>tips:</p><pre><code>class Clock    {public:        Clock() =default; //default constructor       Clock(int newH, int newM, int newS); //constructorprivate:    int hour, minute, second;};</code></pre><blockquote><p>define a class of clock with a constructor.</p></blockquote><pre><code>#include &lt;iostream&gt;    using namespace std;class Clock    {public:    Clock(int newH, int newM, int newS);    void setTime(int newH, int newM, int newS);    void showTime();private:    int hour, minute, second;};Clock::Clock(int newH, int newM, int newS):hour(newH), minute(newM), second(newS){}void Clock::setTime(int newH, int newM, int newS) {    hour = newH;    minute = newM;    second = newS;}inline void Clock::showTime() {    cout &lt;&lt; hour &lt;&lt; &quot;:&quot; &lt;&lt; minute &lt;&lt; &quot;:&quot; &lt;&lt; second &lt;&lt; endl;}int main() {    Clock c(0,0,0);    c.showTime();    return 0;}</code></pre><blockquote><p>define a class of clock with a constructor and a default constructor.</p></blockquote><pre><code>#include &lt;iostream&gt;    using namespace std;class Clock    {public:    Clock(int newH, int newM, int newS);    Clock();    void setTime(int newH, int newM, int newS);    void showTime();private:    int hour, minute, second;};Clock::Clock():hour(0), minute(0), second(0){}Clock::Clock(int newH, int newM, int newS):hour(newH), minute(newM), second(newS){}void Clock::setTime(int newH, int newM, int newS) {    hour = newH;    minute = newM;    second = newS;}inline void Clock::showTime() {    cout &lt;&lt; hour &lt;&lt; &quot;:&quot; &lt;&lt; minute &lt;&lt; &quot;:&quot; &lt;&lt; second &lt;&lt; endl;}int main() {    Clock c(8,10,0);    Clock c2;    c.showTime();    c2.showTime();    return 0;}</code></pre><h3 id="delegating-constructors"><a href="#delegating-constructors" class="headerlink" title="delegating constructors"></a>delegating constructors</h3><p>syntax:</p><p>tips:</p><ul><li><p>delegating constructors help to maintain the constancy of codes.</p><pre><code>  // 2 constructors  Clock(int newH, int newM, int newS):   hour(newH), minute(newM), second(newS){  }  Clock::Clock(): hour(0),minute(0),second(0) { }  // delegating constructors  Clock(int newH, int newM, int newS):    hour(newH),minute(newM),  second(newS){  }  Clock(): Clock(0, 0, 0) {   }</code></pre></li></ul><h3 id="copy-constructor"><a href="#copy-constructor" class="headerlink" title="copy constructor"></a>copy constructor</h3><p>syntax:</p><p>1. create</p><ul><li>class <em>class Name</em>{<br>　　public:<br>　　<em>class Name</em>(parameter);<br>　　<em>class Name</em>(const <em>class Name</em> &amp; <em>object Name</em>);<br>}</li><li><em>class Name</em>::<em>class Name</em>(const <em>class Name</em> &amp; <em>object Name</em>){<br>}</li></ul><p>2. delete</p><ul><li><p><em>class Name</em>(const <em>class Name</em> &amp; <em>object Name</em>) = delete</p><pre><code>  class Point {      public:          Point(int xx=0, int yy=0) { x = xx; y = yy; }  //constructor, inline          Point(const Point&amp; p) =delete; //don&#39;t create default copy constructor      private:          int x, y;  };</code></pre></li></ul><p>tips:</p><ul><li>3 conditions that copy constructors will be invoked:<ul><li>1 </li><li>2</li><li>3</li></ul></li></ul><h3 id="destructor"><a href="#destructor" class="headerlink" title="destructor"></a>destructor</h3><p>syntax:</p><p>~<em>class Name</em></p><pre><code>#include &lt;iostream&gt;using namespace std;class Point{    public:        Point(int xx, int yy);        ~Point();    private:        int x, y;};Point::Point(int xx, int yy){    x = xx;    y = yy;}Point::~Point(){}</code></pre><p>tips:</p><ul><li>The destructor will be invoked when the object disappears.</li></ul><h2 id="combination-of-class"><a href="#combination-of-class" class="headerlink" title="combination of class"></a>combination of class</h2><p>syntax:</p><ul><li><em>class Name</em>::<em>class Name</em>(parameters of members in the object, parameters of members in this class) : object1(parameter), object2(parameter),…{<br>　　function body<br>}</li></ul><p>tips:</p><ul><li>the order of initialization: the member which is declared first will be constructed first.</li></ul><blockquote><p>create a line class using point class</p></blockquote><pre><code>#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;class Point {public:    Point(int xx = 0, int yy = 0) {        x = xx;        y = yy;    }    Point(Point &amp;p);    int getX() { return x; }    int getY() { return y; }private:    int x, y;};Point::Point(Point &amp;p) {    x = p.x;    y = p.y;    cout &lt;&lt; &quot;Calling the copy constructor of Point&quot; &lt;&lt; endl;}//combination of classclass Line {public:    Line(Point xp1, Point xp2);    Line(Line &amp;l);    double getLen() { return len; }private:    Point p1, p2;    double len;};//constructor of the combination classLine::Line(Point xp1, Point xp2) : p1(xp1), p2(xp2) {    cout &lt;&lt; &quot;Calling constructor of Line&quot; &lt;&lt; endl;    double x = static_cast&lt;double&gt;(p1.getX() - p2.getX());    double y = static_cast&lt;double&gt;(p1.getY() - p2.getY());    len = sqrt(x * x + y * y);}//copy constructor of the combination classLine::Line (Line &amp;l): p1(l.p1), p2(l.p2) {    cout &lt;&lt; &quot;Calling the copy constructor of Line&quot; &lt;&lt; endl;    len = l.len;}int main() {    Point myp1(1, 1), myp2(4, 5);    //build Point objects    Line line(myp1, myp2);    //build Line objects    Line line2(line);    //use copy constructor of the combination class to build a new object    cout &lt;&lt; &quot;The length of the line is: &quot;;    cout &lt;&lt; line.getLen() &lt;&lt; endl;    cout &lt;&lt; &quot;The length of the line2 is: &quot;;    cout &lt;&lt; line2.getLen() &lt;&lt; endl;    return 0;}</code></pre><h3 id="preceding-reference-declaration"><a href="#preceding-reference-declaration" class="headerlink" title="preceding reference declaration"></a>preceding reference declaration</h3><p>tips:</p><ul><li><p>declare a class name before define another class.</p><pre><code>  class B;   class A {  public:      void f(B b);  };  class B {  public:    void g(A a);  };</code></pre></li><li><p>cannot be involved with details of this declared class:</p><pre><code>  class Fred;  class Barney {     Fred x;  };  class Fred {     Barney y;  };</code></pre></li></ul><h2 id="UML-introduction"><a href="#UML-introduction" class="headerlink" title="UML introduction"></a>UML introduction</h2><p>basic elements</p><ul><li>Things</li><li>Relationships</li><li>Diagrams</li></ul><h2 id="Structures"><a href="#Structures" class="headerlink" title="Structures"></a>Structures</h2><p>syntax:  </p><ul><li>struct <em>Name</em>{<br>　　<em>public members</em><br>protected:<br>　　<em>protected members</em><br>private:<br>　　<em>private members</em><br>};</li></ul><p>tips:</p><ul><li>default members in structures is public, and can be data members or function members.</li></ul><blockquote><p>Students’ basic information</p></blockquote><pre><code>#include &lt;iostream&gt;#include &lt;iomanip&gt;#include &lt;string&gt;using namespace std;struct Student {    int num;        string name;    char sex;    int age;};int main() {    Student stu = { 97001, &quot;Lin Lin&quot;, &#39;F&#39;, 19 };    cout &lt;&lt; &quot;Num:  &quot; &lt;&lt; stu.num &lt;&lt; endl;    cout &lt;&lt; &quot;Name: &quot; &lt;&lt; stu.name &lt;&lt; endl;    cout &lt;&lt; &quot;Sex:  &quot; &lt;&lt; stu.sex &lt;&lt; endl;    cout &lt;&lt; &quot;Age:  &quot; &lt;&lt; stu.age &lt;&lt; endl;    return 0;}</code></pre><h2 id="unions"><a href="#unions" class="headerlink" title="unions"></a>unions</h2><p>syntax:</p><ul><li>union <em>Name</em>{<br>　　<em>public members</em><br>protected:<br>　　<em>protected members</em><br>private:<br>　　<em>private members</em><br>};</li></ul><p>tips:</p><ul><li>members in unions share the storage space, therefore there is only one effective member at the same time.</li><li>The storage space is determined by the largest space demand members.</li></ul><blockquote><p>Student’s mark</p></blockquote><pre><code>union Mark{    char grade;    //class grade: A, B, C, D, F    bool pass;    //pass or fail    int percent;    //hundred mark};</code></pre><h3 id="anonymous-unions"><a href="#anonymous-unions" class="headerlink" title="anonymous unions"></a>anonymous unions</h3><pre><code>union {  int i;  float f;}</code></pre><p>tips:</p><ul><li>i and f will share the storage space.</li></ul><blockquote><p>Student’s mark information</p></blockquote><pre><code>#include &lt;string&gt;#include &lt;iostream&gt;using namespace std;class ExamInfo {public:    ExamInfo(string name, char grade)        : name(name), mode(GRADE), grade(grade) { }    ExamInfo(string name, bool pass)        : name(name), mode(PASS), pass(pass) { }    ExamInfo(string name, int percent)        : name(name), mode(PERCENTAGE), percent(percent) { }    void show();private:    string name;    enum {        GRADE,        PASS,        PERCENTAGE    } mode;    union {        char grade;        bool pass;        int percent;    };};void ExamInfo::show() {    cout &lt;&lt; name &lt;&lt; &quot;: &quot;;    switch (mode) {    case GRADE:        cout &lt;&lt; grade;        break;    case PASS:        cout &lt;&lt; (pass ? &quot;PASS&quot; : &quot;FAIL&quot;);        break;    case PERCENTAGE:        cout &lt;&lt; percent;        break;    }    cout &lt;&lt; endl;}int main() {    ExamInfo course1(&quot;English&quot;, &#39;B&#39;);    ExamInfo course2(&quot;Calculus&quot;, true);    ExamInfo course3(&quot;C++ Programming&quot;, 85);    course1.show();    course2.show();    course3.show();    return 0;}</code></pre><h2 id="enumeration-class"><a href="#enumeration-class" class="headerlink" title="enumeration class"></a>enumeration class</h2><p>syntax:</p><p>enum class <em>Name</em>: <strong><em>Type name</em></strong>{ enumeration list };</p><pre><code>enum class Type {General, Light, Medium, Heavy};enum class Type: char {General, Light, Medium, Heavy};enum class Category {General=1, Pistol, MachineGun, Cannon};</code></pre><p><em>Name</em>::enumeration element</p><pre><code>Type::General</code></pre><p>tips:</p><ul><li>the Type name can be defined as <code>int</code>, <code>char</code>, <code>double</code> etc. The default is <code>int</code>.</li><li>Strong scope</li><li><p>Strict</p><pre><code>  #include&lt;iostream&gt;  using namespace std;  enum class Side{ Right, Left };  enum class Thing{ Wrong, Right };  int main(){      Side s = Side::Right;              Thing w = Thing::Wrong;      cout &lt;&lt; (s == w) &lt;&lt; endl;      return 0;  }</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This note contains basic knowledge of class and objects in C++ including characteristics, definition, constructor, destructor, sturcture,
      
    
    </summary>
    
      <category term="Computer Science" scheme="http://yoursite.com/categories/Computer-Science/"/>
    
      <category term="Programming" scheme="http://yoursite.com/categories/Computer-Science/Programming/"/>
    
      <category term="C++" scheme="http://yoursite.com/categories/Computer-Science/Programming/C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="MOOC" scheme="http://yoursite.com/tags/MOOC/"/>
    
  </entry>
  
  <entry>
    <title>Limit and Continuity</title>
    <link href="http://yoursite.com/2019/01/31/Limit%20and%20Continuity/"/>
    <id>http://yoursite.com/2019/01/31/Limit and Continuity/</id>
    <published>2019-01-31T05:00:00.000Z</published>
    <updated>2020-01-10T16:43:17.317Z</updated>
    
    <content type="html"><![CDATA[<p>This note contains basic knowledge of Limit and Continuity.</p><h1 id="Limits-of-Sequences"><a href="#Limits-of-Sequences" class="headerlink" title="Limits of Sequences"></a>Limits of Sequences</h1><h2 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h2><p>A sequence is an infinite or finite ordered list of terms base on the positive number index:</p><script type="math/tex; mode=display">x_1, x_2,...,x_n,...</script><p>It is usually denoted as $\{x_n\}$, and $x_n$ is called the general term. And the <strong>limits of sequences</strong> can be rigorously defined as this:</p><p>Let $\{ x_n \}$ is a given sequence, $a$ is a constant. If $\forall $ given $\varepsilon &gt; 0$, $\exists$ a positive integer $N$, such that when $n &gt; N$ there is </p><script type="math/tex; mode=display">|x_n - a|<\varepsilon</script><p>then we call sequence $\{ x_n \}$ is <strong>convergent</strong> and converges to $a$, or $a$ is the <strong>limit</strong> of  sequence $\{ x_n \}$, denoted as</p><script type="math/tex; mode=display">\lim_{n \to \infty}x_n=a</script><p>or</p><script type="math/tex; mode=display">x_n \to a ~(x \to \infty)</script><p>If there does not exist a real number $a$ such that $\{ x_n \}$ converges to $a$, then the sequence is said to be <strong>divergent</strong>. </p><p>Similarly, We can define the neighborhood as this:</p><p>For a point $a$ which is on the x-axis of the Cartesian Coordinates, the interval $(a-\varepsilon, a+\varepsilon)$ is called as the $\varepsilon$ <strong>neighborhood</strong> of point $a$, denoted as $O(a,\varepsilon)$:</p><script type="math/tex; mode=display">O(a,\varepsilon) = \{x|a - \varepsilon < x < a+\varepsilon\}</script><p>Whether a sequence is convergent or divergent has nothing to do with the finite terms, because if a sequence is convergent, “when $n &gt; N$, there is $|x_n-a|&lt;\varepsilon$” means that all the terms from the $N+1$ order will be in the $\varepsilon$ neighborhood, that is to say $x_n \in O(a, \varepsilon), n &gt; N$.</p><p>Among the convergent sequences, the one whose limit is 0 is called <strong>infinitesimals</strong>.</p><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><h3 id="Uniqueness"><a href="#Uniqueness" class="headerlink" title="Uniqueness"></a>Uniqueness</h3><p>The limit of a convergent sequence is unique.</p><script type="math/tex; mode=display">\text{if}\lim_{n \to \infty}x_n=a \\\lim_{n \to \infty}x_n=b \\\text{then} \a = b</script><h3 id="Boundedness"><a href="#Boundedness" class="headerlink" title="Boundedness"></a>Boundedness</h3><p>A convergent sequence must be bounded.</p><h3 id="Squeeze-Theorem"><a href="#Squeeze-Theorem" class="headerlink" title="Squeeze Theorem"></a>Squeeze Theorem</h3><p>For 3 sequence $\{x_n\}$,  $\{y_n\}$,  $\{z_n\}$ from a certain term there is</p><script type="math/tex; mode=display">x_n \leq y_n \leq z_n, n \ge N_0</script><p>and $\lim_{n \to \infty} x_n = \lim_{n \to \infty} z_n = a$, then</p><script type="math/tex; mode=display">\lim_{n \to \infty}y_n = a</script><h3 id="Arithmetic"><a href="#Arithmetic" class="headerlink" title="Arithmetic"></a>Arithmetic</h3><p>If $\lim_{n \to \infty}x_n=a$, $\lim_{n \to \infty}y_n=b$, then</p><script type="math/tex; mode=display">\begin{align*}&\lim_{n \to \infty}(\alpha x_n+\beta y_n)=\alpha a+\beta b \\&\lim_{n \to \infty}(x_ny_n)=ab \\&\lim_{n \to \infty}\frac{x_n}{y_n}=\frac{a}{b}\end{align*}</script><h1 id="Infinity"><a href="#Infinity" class="headerlink" title="Infinity"></a>Infinity</h1><h2 id="Definition-1"><a href="#Definition-1" class="headerlink" title="Definition"></a>Definition</h2><p>For any given $G&gt;0$, if $\exist$ positive integer $N$ such that when $n&gt;N$, $|x_n|&gt;G$, then call $\{x_n\}$ the infinity, denote as</p><script type="math/tex; mode=display">\lim_{n \to \infty}x_n=\infty</script><p>It can be $\lim_{n \to \infty}a_n=+\infty$ or $\lim_{n \to \infty}b_n=-\infty$.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This note contains basic knowledge of Limit and Continuity.&lt;/p&gt;
&lt;h1 id=&quot;Limits-of-Sequences&quot;&gt;&lt;a href=&quot;#Limits-of-Sequences&quot; class=&quot;header
      
    
    </summary>
    
      <category term="Mathematics" scheme="http://yoursite.com/categories/Mathematics/"/>
    
      <category term="Analysis" scheme="http://yoursite.com/categories/Mathematics/Analysis/"/>
    
    
      <category term="Calculus" scheme="http://yoursite.com/tags/Calculus/"/>
    
      <category term="Real Analysis" scheme="http://yoursite.com/tags/Real-Analysis/"/>
    
  </entry>
  
</feed>
